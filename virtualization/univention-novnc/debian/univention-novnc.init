#!/bin/sh
### BEGIN INIT INFO
# Provides:          univention-novnc
# Required-Start:    $network $local_fs
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Proxy VNC via websocket
# Description:       Provide access to VNC via websocket.
### END INIT INFO

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="noVNC websockify"
NAME=univention-novnc
DAEMON=/usr/share/novnc/utils/websockify
DAEMON_ARGS="--target-config /var/cache/univention-virtual-machine-manager-daemon/novnc.tokens --web /usr/share/novnc"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
. /lib/lsb/init-functions

: ${HOSTNAME:=$(hostname)}
if [ -r "/etc/univention/ssl/$HOSTNAME/cert.pem" ] && [ -r "/etc/univention/ssl/$HOSTNAME/private.key" ]
then
	DAEMON_ARGS="$DAEMON_ARGS --cert /etc/univention/ssl/$HOSTNAME/cert.pem"
	DAEMON_ARGS="$DAEMON_ARGS --key /etc/univention/ssl/$HOSTNAME/private.key"
fi
DAEMON_ARGS="$DAEMON_ARGS 6080"

do_start () {
	if [ -f "/usr/share/univention-config-registry/init-autostart.lib" ]; then
		. "/usr/share/univention-config-registry/init-autostart.lib"
		check_autostart univention-novnc uvmm/novnc/autostart
	fi
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	pgrep -f "$DAEMON" > /dev/null && return 1
	start-stop-daemon --start --quiet --user novnc --pidfile "$PIDFILE" --make-pidfile --background --exec "$DAEMON" -- \
		$DAEMON_ARGS ||
		return 2
}

do_stop() {
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	pkill -f "$DAEMON"
	RETVAL="$?"
	rm -f "$PIDFILE"
	return "$RETVAL"
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC " "$NAME"
    do_start
    case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
  ;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  restart|force-reload)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
