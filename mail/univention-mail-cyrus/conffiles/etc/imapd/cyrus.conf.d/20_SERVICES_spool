}

# UNIX sockets start with a slash and are absolute paths
# you can use a maxchild=# to limit the maximum number of forks of a service
# you can use babysit=true and maxforkrate=# to keep tight tabs on the service
# most services also accept -U (limit number of reuses) and -T (timeout)
SERVICES {
@!@
if baseConfig.has_key('mail/cyrus/murder/backend/id') and baseConfig['mail/cyrus/murder/backend/id'] != '':
	backend_emailId = baseConfig['mail/cyrus/murder/backend/id']
else:
	backend_emailId = "%s@%s" % ('.'.join([ baseConfig['hostname'], baseConfig.get('domainname','undefined') ]) , baseConfig.get('domainname','undefined'))
if baseConfig.has_key('mail/cyrus/murder/frontend/id') and baseConfig['mail/cyrus/murder/frontend/id'] != '':
	frontend_emailId = baseConfig['mail/cyrus/murder/frontend/id']
else:
	frontend_emailId = "%s@%s" % ('.'.join([ baseConfig['hostname'], baseConfig.get('domainname','undefined') ]) , baseConfig.get('domainname','undefined'))

# If we run without a Cyrus Murder Master MUPDATE server
# or if we have registered as a service provider (aka 'backend' or 'spool')
if not (baseConfig.has_key('mail/cyrus/murder/master') and baseConfig['mail/cyrus/murder/master'] != '') \
   or (baseConfig.has_key('mail/cyrus/murder/backends') \
       and backend_emailId in baseConfig['mail/cyrus/murder/backends'].split(' ')):
	print '\t# --- Normal cyrus spool, or Murder backends ---'

	bindprefix = ''
	if baseConfig.has_key('mail/cyrus/murder/backend/interface') and baseConfig['mail/cyrus/murder/backend/interface'] != '':
		interface=baseConfig['mail/cyrus/murder/backend/interface']
		ucrVariable='interfaces/' + interface + '/address'
		if baseConfig.has_key(ucrVariable) and baseConfig[ucrVariable] != '':
			bindprefix = "%s:" % baseConfig[ucrVariable]

	if baseConfig.has_key('mail/cyrus/imap') and baseConfig['mail/cyrus/imap'] == 'yes':

		if baseConfig.has_key( 'mail/cyrus/imap/maxchilds' ):
			maxchild = baseConfig[ 'mail/cyrus/imap/maxchilds' ]
		else:
			maxchild = '400'

		print '\timap		cmd="/usr/lib/cyrus/bin/imapd -C /etc/imapd/imapd.conf -U 30" listen="%simap" prefork=0 maxchild=%s' % (bindprefix, maxchild)
		print '\timaps		cmd="/usr/lib/cyrus/bin/imapd -C /etc/imapd/imapd.conf -s -U 30" listen="%simaps" prefork=0 maxchild=%s' % (bindprefix, maxchild)

	if baseConfig.has_key('mail/cyrus/pop') and baseConfig['mail/cyrus/pop'] == 'yes':
		if baseConfig.has_key( 'mail/cyrus/pop/maxchilds' ):
			maxchild = baseConfig[ 'mail/cyrus/pop/maxchilds' ]
		else:
			maxchild = '400'

		print '\tpop3		cmd="/usr/lib/cyrus/bin/pop3d -C /etc/imapd/imapd.conf -U 30" listen="%spop3" prefork=0 maxchild=%s' % (bindprefix, maxchild)
		print '\tpop3s		cmd="/usr/lib/cyrus/bin/pop3d -C /etc/imapd/imapd.conf -s -U 30" listen="%spop3s" prefork=0 maxchild=%s' % (bindprefix, maxchild)

	print'''
	# At least one form of LMTP is required for delivery
	# (you must keep the Unix socket name in sync with imap.conf)
'''
	if bindprefix:
		# don't use preauth (-a) when binding to external IPs, real authentication needed
		print '\tlmtp		cmd="/usr/lib/cyrus/bin/lmtpd -C /etc/imapd/imapd.conf" listen="%s2003" prefork=0 maxchild=20' % bindprefix
		print '\t#lmtpunix	cmd="/usr/lib/cyrus/bin/lmtpd -C /etc/imapd/imapd.conf" listen="/var/run/cyrus/socket/lmtp" prefork=0 maxchild=20'
	else:
		print '\tlmtp		cmd="/usr/lib/cyrus/bin/lmtpd -C /etc/imapd/imapd.conf -a" listen="localhost:2003" prefork=0 maxchild=20'
		print '\t#lmtpunix	cmd="/usr/lib/cyrus/bin/lmtpd -C /etc/imapd/imapd.conf" listen="/var/run/cyrus/socket/lmtp" prefork=0 maxchild=20'
	print'''
	# ----------------------------------------------

	# useful if you need to give users remote access to sieve
	# by default, we limit this to localhost in Debian'''

	if baseConfig.has_key( 'mail/cyrus/sieve/maxchilds' ):
		maxchild = baseConfig[ 'mail/cyrus/sieve/maxchilds' ]
	else:
		maxchild = '400'
	if baseConfig.has_key('mail/cyrus/sieve/listen_host') and baseConfig['mail/cyrus/sieve/listen_host']:
		if baseConfig['mail/cyrus/sieve/listen_host'] == "all":
			print'\tsieve		cmd="timsieved -C /etc/imapd/imapd.conf" listen=":sieve" prefork=0 maxchild=%s' % maxchild
		else:
			print'\tsieve		cmd="timsieved -C /etc/imapd/imapd.conf" listen="%s:sieve" prefork=0 maxchild=%s' % ( baseConfig['mail/cyrus/sieve/listen_host'], maxchild )
	else:
	    print'\tsieve		cmd="timsieved -C /etc/imapd/imapd.conf" listen="localhost:sieve" prefork=0 maxchild=%s' % maxchild

elif baseConfig.has_key('mail/cyrus/murder/frontends') and frontend_emailId in baseConfig['mail/cyrus/murder/frontends'].split(' '):
	print'\n\t# useful if you need to give users remote access to sieve'
	print'\t# by default, we limit this to localhost in Debian'

	if baseConfig.has_key( 'mail/cyrus/sieve/maxchilds' ):
		maxchild = baseConfig[ 'mail/cyrus/sieve/maxchilds' ]
	else:
		maxchild = '400'
	if baseConfig.has_key('mail/cyrus/sieve/listen_host') and baseConfig['mail/cyrus/sieve/listen_host']:
		if baseConfig['mail/cyrus/sieve/listen_host'] == "all":
			print'\tsieve		cmd="timsieved -C /etc/imapd/frontend.conf" listen=":sieve" prefork=0 maxchild=%s' % maxchild
		else:
			print'\tsieve		cmd="timsieved -C /etc/imapd/frontend.conf" listen="%s:sieve" prefork=0 maxchild=%s' % ( baseConfig['mail/cyrus/sieve/listen_host'], maxchild )
	else:
	    print'\tsieve		cmd="timsieved -C /etc/imapd/frontend.conf" listen="localhost:sieve" prefork=0 maxchild=%s' % maxchild
@!@

	# this one is needed for the notification services
#notify		cmd="notifyd" listen="/var/run/cyrus/socket/notify" proto="udp" prefork=1

