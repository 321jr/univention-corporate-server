@%@BCWARNING=# @%@

@!@
serverName = configRegistry.get("mail/cyrus/murder/backend/hostname", "")
if serverName:
	print 'servername: %s' % serverName
@!@
configdirectory: /var/lib/cyrus
proc_path: /run/cyrus/proc
mboxname_lockpath: /run/cyrus/lock
defaultpartition: default
partition-default: /var/spool/cyrus/mail
partition-news: /var/spool/cyrus/news
newsspool: /var/spool/news
userprefix: user
sharedprefix: shared
@!@
serverName = configRegistry.get("mail/cyrus/murder/backend/hostname", "")
if serverName:
	print 'virtdomains: userid'
else:
	print 'virtdomains: yes'
@!@
postuser: univentioninternalpostuser
robot101mode: yes
altnamespace: no
unixhierarchysep: yes
defaultacl: anyone none
lmtp_downcase_rcpt: yes
admins: cyrus root @!@
if configRegistry.get('mail/cyrus/admins'):
	print '%s' % configRegistry['mail/cyrus/admins'].replace(',',' '),
@!@

lmtp_admins: postman @!@
if configRegistry.get('mail/cyrus/murder/master', ""):
	servers = configRegistry.get('mail/cyrus/murder/servers', "")
	if servers:
		print '%s' % servers
@!@
imap_admins: cyrus root @!@
if configRegistry.get('mail/cyrus/imap/admins'):
	print '%s' % configRegistry['mail/cyrus/imap/admins'].replace(',',' '),
servers = configRegistry.get('mail/cyrus/murder/servers', "")
if servers:
	print '%s' % servers
@!@
allowanonymouslogin: no
popminpoll: 0

autocreatequota: 0
@!@
if 'mail/cyrus/imap/quotawarnpercent' in configRegistry:
        print 'quotawarn: %s' % configRegistry['mail/cyrus/imap/quotawarnpercent']
if 'mail/cyrus/imap/quotawarnkb' in configRegistry:
        print 'quotawarnkb: %s' % configRegistry['mail/cyrus/imap/quotawarnkb']
@!@
umask: 077
sieveusehomedir: false
sievedir: /var/spool/cyrus/sieve
hashimapspool: true
@!@
print "allowplaintext: %s" % configRegistry.get("mail/cyrus/auth/allowplaintext", "no")
print "sasl_mech_list: PLAIN"
if configRegistry.get('mail/cyrus/loginrealms'):
	print 'loginrealms: %s' % configRegistry['mail/cyrus/loginrealms']
elif configRegistry.get('mail/hosteddomains'):
	print 'loginrealms: %s' % configRegistry['mail/hosteddomains']
else:
	print 'loginrealms: %s' % configRegistry['domainname']
@!@
sasl_pwcheck_method: saslauthd
sasl_auxprop_plugin: sasldb
sasl_auto_transition: no

@!@
mail_cyrus_mailbox_rename=configRegistry.get('mail/cyrus/mailbox/rename')
if mail_cyrus_mailbox_rename and mail_cyrus_mailbox_rename.lower() in ['true', 'yes']:
	print '# mail/cyrus/mailbox/rename=yes is mandatory for cyrus murder environments'
	print 'allowusermoves: yes'

if 'mail/cyrus/imap/lookup_groups' in configRegistry and configRegistry['mail/cyrus/imap/lookup_groups'].lower() == 'no':
	print 'unix_group_enable: no'
else:
	print 'unix_group_enable: yes'
@!@
auth_ldap_group: true
ldap_base: @%@ldap/base@%@
ldap_host: @%@ldap/server/name@%@
@!@
print 'ldap_port: %s' % configRegistry.get("ldap/server/port", 7389)
@!@
ldap_bindpwfile: @%@mail/cyrus/ldap/pwfile@%@
ldap_binddn: @%@ldap/hostdn@%@
ldap_to_attr: uid
ldap_from_attr: mailPrimaryAddress

@!@
print 'tls_cert_file: %s' % configRegistry.get('mail/cyrus/ssl/certificate', '/var/lib/cyrus/cert.pem')
print 'tls_key_file: %s' % configRegistry.get('mail/cyrus/ssl/key', '/var/lib/cyrus/private.key')

if configRegistry.get("mail/cyrus/murder/master", ""):
	print 'tls_ca_file: %s' % configRegistry.get('mail/cyrus/ssl/cafile', '/etc/univention/ssl/ucsCA/CAcert.pem')
	if configRegistry.get('mail/cyrus/ssl/capath'):
		print 'tls_ca_path: %s' % configRegistry.get('mail/cyrus/ssl/capath')
else:
	print 'tls_ca_path: %s' % configRegistry.get('mail/cyrus/ssl/capath', '/etc/univention/ssl/ucsCA/certs/')
	if configRegistry.get('mail/cyrus/ssl/cafile'):
		print 'tls_ca_file: %s' % configRegistry.get('mail/cyrus/ssl/cafile')
@!@
tls_session_timeout: 1440
tls_cipher_list: TLSv1:SSLv3:SSLv2:!NULL:!EXPORT:!DES:!LOW:@STRENGTH
@!@
print "idlemethod: %s" % configRegistry.get('mail/cyrus/idlemethod', 'idled')
@!@
idlesocket: /var/run/cyrus/socket/idle
lmtpsocket: /var/run/cyrus/socket/lmtp
notifysocket: /var/run/cyrus/socket/notify
@!@
if configRegistry.get("mail/cyrus/mailnotifier"):
	print "mailnotifier: %s" % configRegistry["mail/cyrus/mailnotifier"]
@!@
syslog_prefix: cyrus

@!@
mail_cyrus_murder_master = configRegistry.get('mail/cyrus/murder/master')
if mail_cyrus_murder_master:
	import os
	if os.path.exists('/etc/machine.secret'):
		file = open('/etc/machine.secret','r')
		machinepass = file.read().strip()

		print '# how to contact the MUPDATE master'
		print 'mupdate_server: %s' % mail_cyrus_murder_master
		print 'mupdate_authname: %s$' % configRegistry.get("hostname")
		print 'mupdate_password: %s' % machinepass
		print ''

		servers = configRegistry.get('mail/cyrus/murder/servers')
		if servers:

			print '# how the frontends need to authenticate'
			print '# check with: testsaslauthd -s imap -u <id> -p <pw>'
			print '# space separated ist of users and groups that are allowed'
			print '# to proxy for other user.'
			print 'proxyservers: %s' % servers
			print ''

			print '# how to contact the neighbor backend servers'
			print 'proxy_authname: %s$' % configRegistry.get("hostname")
			print 'proxy_password: %s' % machinepass
			print ''


if configRegistry.is_true('mail/cyrus/imap/duplicatesuppression', True):
        print "duplicatesuppression: 1"
else:
        print "duplicatesuppression: 0"
@!@

