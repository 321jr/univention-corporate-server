#!/bin/sh
#
# Lint tests
#
set -u

tmp=$(mktemp)
trap "rm -f '$tmp'" EXIT

rc=0
issue () {
	local err msg="$1"
	shift
	err="$(sed -ne "${1:-p}" "$tmp")"
	if [ -n "$err" ]
	then
		echo "FAIL: $msg"
		echo "$err"
		rc=1
	else
		echo "OK: $msg"
	fi
}

find -type f -exec grep '^source\>' {} + >"$tmp"
issue "BASHism 'source'"

find tests -name .svn -prune -o -type f \( \
	\( -name \*.inst -prune \) -o \
	\( -perm -0755 -exec grep -q '^#! */usr/share/ucs-test/runner ' {} \; -prune \) -o \
	\( -not -perm /0111 -not -exec grep -q '^#! */usr/share/ucs-test/runner ' {} \; -prune \) -o \
	-ls \) >"$tmp"
issue "Executable bits"

find tests -type f -exec grep -F -l '"$TESTLIBPATH/ucr.sh"' {} + |
	xargs grep -F -L "ucr_restore" >"$tmp"
issue "Use of 'ucr.sh' without call to 'ucr_restore'."

find tests -type f -exec grep -E -l 'fail_(test|fast)+ [^0-9"$?]+' {} + >"$tmp"
issue "Missing reason for fail_test"

UCS_TESTS=tests python -c '
import sys
sys.path.remove("")
import univention
univention.__path__.insert(0, "univention")
from univention.testing.internal import get_sections, get_tests
from os.path import basename
sections = get_sections()
tests = get_tests(sections)
for tests in tests.itervalues():
    for fname in tests:
        if "." in basename(fname):
            print fname
' >"$tmp" 2>&1 ||
	issue "Failed to find tests" '/^Traceback/,$p'
issue "Wrong file name"

UCS_TESTS=tests python -c '
import sys
sys.path.remove("")
import univention
univention.__path__.insert(0, "univention")
execfile("bin/ucs-test")
' --dry-run --count >"$tmp" 2>&1 ||
	issue "Failed to run ucs-test" '/^Traceback/,$p'
issue "Broken tests" '/^CRITICAL/p'

exit $rc
