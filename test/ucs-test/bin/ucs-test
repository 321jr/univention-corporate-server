#!/usr/bin/python
# vim: set fileencoding=utf-8 ft=python sw=4 ts=4 noet :
#
# UCS Testrunner - run UCS test in sane environment
#
import sys
import logging
import operator
from time import time
from optparse import OptionParser, OptionGroup
from univention.testing.utils import *
from univention.testing.data import *
from univention.testing.format.tap import TAP as format_tap
from univention.testing.format.text import Text as format_text
from univention.testing.format.html import HTML as format_html
from univention.testing.format.jenkins import Jenkins as format_jenkins

def parse_options(sections):
	usage = "Usage: %prog [options]"
	parser = OptionParser(usage=usage)

	selection_group = OptionGroup(parser, 'Test selection')
	selection_group.add_option("-s", "--section",
			dest="sections", action="append", choices=sections,
			help="Run tests only from this section", metavar="SECTION")
	selection_group.add_option("-p", "--prohibit",
			dest="tags_prohibited", action="append", default=[],
			help="Skipt tests with this tag", metavar="TAG")
	selection_group.add_option("-r", "--require",
			dest="tags_required", action="append", default=[],
			help="Only run tests with this tag", metavar="TAG")
	selection_group.add_option("-g", "--ignore",
			dest="tags_ignored", action="append", default=[],
			help="Neither require nor prohibt this tag", metavar="TAG")
	selection_group.add_option("-E", "--exposure",
			dest="exposure", action="store", choices=('safe', 'careful', 'dangerous'),
			help="Run more dangerous tests")
	parser.add_option_group(selection_group)

	output_group = OptionGroup(parser, 'Output options')
	output_group.add_option("-n", "--dry-run",
			dest="dry", action="store_true",
			help="Only show which tests would run")
	output_group.add_option("-f", "--filtered",
			dest="filter", action="store_true",
			help="Hide tests with unmatched pre-conditions")
	output_group.add_option("-F", "--format",
			dest="format", action="store", choices=('text','tap','html','jenkins'), default='text',
			help="Select output format [%default]")
	output_group.add_option("-v", "--verbose",
			dest="verbose", action="count",
			help="Increase verbosity")
	output_group.add_option("-i", "--interactive",
			dest="interactive", action="store_true", default=False,
			help="Run test connected to terminal")
	output_group.add_option("-c", "--count",
			dest="count", action="store_true", default=False,
			help="Prefix tests by count")
	output_group.add_option("-l", "--logfile",
			dest="logfile", action="store", default=LOG_BASE % (time(),),
			help="Path to log file [%default]")

	parser.add_option_group(output_group)

	return parser.parse_args()

def main():
	all_sections = get_sections()

	(options, args) = parse_options(all_sections.keys())

	format = globals()['format_%s' % (options.format,)]()
	setup_environment()
	setup_debug(options.verbose)
	global logger
	logger = logging.getLogger('test')

	if options.dry:
		te = TestEnvironment(interactive=options.interactive)
	else:
		te = TestEnvironment(interactive=options.interactive, logfile=options.logfile)
	te.tag(require=options.tags_required, ignore=options.tags_ignored, prohibit=options.tags_prohibited)
	if options.exposure:
		te.set_exposure(options.exposure)

	if options.sections:
		selected_sections = options.sections
	else:
		selected_sections = all_sections.keys()
	tests = get_tests(selected_sections)
	max_count = reduce(operator.add, map(len, tests.values()))
	if options.count:
		count_width = len('%d' % (max_count,))
		prefix = '%%0%dd/%%0%dd ' % (count_width, count_width)
	else:
		prefix = ''

	format.begin_run(te, max_count)
	try:
		count = 0
		for section, cases in sorted(tests.items()):
			format.begin_section(section)
			try:
				for fname in cases:
					count += 1
					tc = TestCase().load(fname)
					tr = TestResult(tc, te)
					check = tr.check()
					if options.filter and not check:
						continue
					if prefix:
						format.begin_test(tc, prefix % (count, max_count))
					else:
						format.begin_test(tc)
					try:
						if not options.dry:
							tr.run()
					finally:
						format.end_test(tr)
			finally:
				format.end_section()
	finally:
		format.end_run()

if __name__ == '__main__':
	try:
		main()
	except KeyboardInterrupt, e:
		sys.exit(1)
