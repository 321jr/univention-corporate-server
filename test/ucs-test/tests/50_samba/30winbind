#!/usr/share/ucs-test/runner bash
## desc: "Winbind Test"
## exposure: safe
## packages:
##  - winbind
## roles-not:
## - basesystem
## tags:
##  - basic
##  - apptest

. "$TESTLIBPATH/base.sh" || exit 137
. "$TESTLIBPATH/user.sh" || exit 137

SAMBA="true"
MAIL="false"
KERBEROS="true"
PERSON="false"
POSIX="true"

password="univention"
username="$(user_randomname)"
trap 'user_remove "$username"' INT TERM EXIT

##create User
echo "##  create User"
if ! user_create "$username"; then
	fail_fast 1 "Failed to create user";
fi

wait_for_replication

##wbinfo tests
echo "##  wbinfo -t"
if ! wbinfo -t; then
	fail_fast 1 "Checking shared secret failed"
fi

echo "##  wbinfo --ping"
if ! wbinfo --ping; then
	fail_fast 1 "failed to ping the winbind-daemon";
fi

echo "##  wbinfo --ping-dc"
if ! wbinfo --ping-dc; then
	fail_fast 1 "No connection to NETLOGON"
fi

echo "##  wbinfo -D"
for i in $(wbinfo --trusted-domains);
do
	if ! output="$(wbinfo -D "$i")"; then
		print "$output"
		fail_fast 1 "Failed to look up domaininfo"
	fi
done

if [ "$(/usr/sbin/univention-config-registry get server/role)" = "memberserver" ]; then
	winbind_separator=$(wbinfo --separator)
	NAME="$(/usr/sbin/univention-config-registry get windows/domain)$winbind_separator$username"
fi

echo "##  wbinfo --authenticate"
max_auth_attempts=30
for try in $(seq 1 "$max_auth_attempts"); do
	wbinfo -a "$NAME%$password"
	res="$?"
	if [ "$res" == 0 ]; then
		break
	else
		echo .
		sleep 1
	fi
done
if [ "$res" != 0 ]; then
	fail_fast 1 "wbinfo --authenticate '$NAME%$password' failed after $max_auth_attempts attempts"
fi

echo "##  wbinfo --name-to-sid"
output=$(wbinfo -n "$username")
if [ $? != 0 ]; then
	fail_fast 1 "wbinfo --name-to-sid '$username' failed"
else
	user_sid=$(echo "$output" | cut -d' '  -f1)
fi

echo "##  wbinfo --sid-to-uid"
user_uid=$(wbinfo -S "$user_sid")
if [ $? != 0 ]; then
	fail_fast 1 "wbinfo --sid-to-uid '$user_sid' failed"
fi

echo "##  wbinfo --uid-to-sid"
user_sid2=$(wbinfo -U "$user_uid")
if [ $? != 0 ]; then
	fail_fast 1 "wbinfo --uid-to-sid '$user_uid' failed"
fi

echo "##  wbinfo --sid-to-name"
output=$(wbinfo -s "$user_sid2")
if [ $? != 0 ]; then
	fail_fast 1 "wbinfo --sid-to-name '$user_sid2' failed"
else
	user_name2=$(echo "$output" | cut -d' '  -f1)
fi

if [ "$user_name2" != "$NAME" ]; then
	fail_fast 1 "Unexpected user name obtained from SID lookup: $user_name2, expected: $NAME"
fi

echo "##  wbinfo --user-domgroups"
for group_sid in $(wbinfo --user-domgroups="$user_sid");
do
	echo "## wbinfo --user-domgroups returned $group_sid"
	## wbinfo -Y $(wbinfo -n "$(wbinfo -s "$(wbinfo -G "$(wbinfo -Y $group_sid)" )" | sed 's/ [0-9]*$//')" | cut -d' '  -f1 )
	echo "##  wbinfo --sid-to-gid"
	group_gid=$(wbinfo -Y "$group_sid")
	if [ "$?" != 0 ]; then
		fail_fast 1 "wbinfo --sid-to-gid '$group_sid' failed"
	fi
	echo "##  wbinfo --gid-to-sid"
	output=$(wbinfo -G "$group_gid")
	if [ "$?" != 0 ]; then
		fail_fast 1 "wbinfo --gid-to-sid '$group_gid' failed"
	else
		group_sid2=$(echo "$output")
	fi
	echo "##  wbinfo --sid-to-name"
	output=$(wbinfo -s "$group_sid2")
	if [ "$?" != 0 ]; then
		fail_fast 1 "wbinfo --sid-to-name '$group_sid2' failed"
	else
		group_name2=$(echo "$output" | sed 's/ [0-9]*$//')
	fi
	echo "##  wbinfo --name-to-sid"
	output=$(wbinfo -n "$group_name2")
	if [ "$?" != 0 ]; then
		fail_fast 1 "wbinfo --name-to-sid '$group_name2' failed"
	else
		group_sid3=$(echo "$output" | cut -d' '  -f1)
	fi
done

echo "##  wbinfo --krb5auth"
if ! wbinfo --krb5auth "$NAME"%"$password"; then
	fail_fast 1 "wbinfo --krb5auth '$NAME%$password' failed"
fi

exit 0
