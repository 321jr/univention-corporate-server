#!/usr/share/ucs-test/runner python2.7
## desc: Test hijacking uidNumber=0
## roles-not:
##  - basesystem
## packages:
##  - python-univention-lib
##  - python-ldap
## exposure: dangerous

from univention.testing import utils
import univention.testing.strings as uts
import univention.uldap
import ldap

modlists = [[
	('objectClass', '', 'posixAccount'),
	('uidNumber', '', '0'),
	('gidNumber', '', '0'),
	('userPassword', '', '{crypt}$6$H.05VD/DuPnyIoNC$yIJwYBZNWU4fkCV8SE0qiP7yDB3IQWnFPR08Ui.MKcHQBZvy7OImU2avb22GTYGlzBg4FjttMYCUz8FWSp0Jl/'),
	('homeDirectory', '', '/foo/')
],[  # when modifying a group (which already has a gidNumber)
	('objectClass', '', 'posixAccount'),
	('uidNumber', '', '0'),
	('homeDirectory', '', '/foo/')
]]
al = [
	('cn', '', 'hacker'),
	('objectClass', '', 'organizationalRole')
]
add_lists = [ml + al for ml in modlists]


def add_testcases():
	lo = utils.get_ldap_connection()  # TODO: use connection to master because this has only partly replicated objects
	dns = set(lo.searchDn('cn=*'))
	for dn in dns:
		if 'cn=users' in ldap.explode_dn(dn):
			continue
		uid = uts.random_username()
		for al in add_lists:
			yield ('uid=%s,%s' % (uid, dn), al + [('uid', '', uid), ('cn', '', uid)])
			yield ('cn=%s,%s' % (uid, dn), al + [('uid', '', uid), ('cn', '', uid)])


def modify_testcases():
	lo = utils.get_ldap_connection()  # TODO: use connection to master because this has only partly replicated objects
	dns = set(lo.searchDn('cn=*'))
	for dn in dns:
		if 'cn=users' in ldap.explode_dn(dn):
			continue
		uid = uts.random_username()
		for ml in modlists:
			yield (dn, ml + [('uid', '', uid)])


def main():
	# TODO: prior to starting this test we should add a lot objects especially UCS@school related objects
	failures = set()
	for lo in [univention.uldap.getMachineConnection(ldap_master=True)]:
		print 'Testing for %r' % (lo.binddn,)
		
		for dn, al in add_testcases():
			try:
				lo.add(dn, al)
			except ldap.INSUFFICIENT_ACCESS:
				print "OK: ldapadd of %s denied" % (dn,)
			except (ldap.OBJECT_CLASS_VIOLATION, ldap.CONSTRAINT_VIOLATION, ldap.TYPE_OR_VALUE_EXISTS, ldap.NO_SUCH_OBJECT) as exc:
				print 'SKIP: %s: %s' % (dn, exc)
			else:
				print "FAIL: ldapadd of %s (al=%r) successful" % (dn, al)
				failures.add(dn)
				lo.delete(dn)

		for dn, ml in modify_testcases():
			try:
				lo.modify(dn, ml)
			except ldap.INSUFFICIENT_ACCESS:
				print "OK: ldapmodify of %s denied" % (dn,)
			except (ldap.OBJECT_CLASS_VIOLATION, ldap.CONSTRAINT_VIOLATION, ldap.TYPE_OR_VALUE_EXISTS, ldap.NO_SUCH_OBJECT) as exc:
				print 'SKIP: %s: %s' % (dn, exc)
			else:
				print "FAIL: ldapmodify of %s (ml=%r) successful" % (dn, ml)
				failures.add(dn)
				lo_admin = utils.get_ldap_connection()
				for attr, old, new in ml:
					try:
						lo_admin.modify(dn, [(attr, new, old)])
					except ldap.INSUFFICIENT_ACCESS:
						print 'ERROR: could not revert %s %r' % (dn, (attr, old, new))
		print ''

	assert not failures, 'uidNumber=0 hijacking by succeded for the following DNs: %s' % ('\n'.join(failures),)


if __name__ == "__main__":
	main()
# vim: set ft=python :
