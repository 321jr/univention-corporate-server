#!/usr/share/ucs-test/runner bash
## desc: univention-admingrp-user-passwordreset
## roles:
##  - domaincontroller_master
##  - domaincontroller_backup
## packages:
##  - univention-admingrp-user-passwordreset
## exposure: dangerous


. "$TESTLIBPATH/base.sh" || exit 1
. "$TESTLIBPATH/user.sh" || exit 1
. "$TESTLIBPATH/group.sh" || exit 1
. "$TESTLIBPATH/random.sh" || exit 1
. "$TESTLIBPATH/maildomain.sh" || exit 1

eval "$(ucr shell)"

create_mail_domain "$domainname"
rc=$?

cleanup_mail_domain () {
    if [ "$rc" = "0" ]; then
        delete_mail_domain "$domainname" || fail_test 1
    fi
}

trap cleanup_mail_domain EXIT

# create helpdesk group
G_HELPDESK=$(group_randomnameme)
if ! group_create $G_HELPDESK ; then
    echo "cannot create G_HELPDESK group $G_HELPDESK"
	fail_test 140
    exit "$RETVAL"
fi
# create new user
U_HELPDESK=$(user_randomname)
if ! user_create $U_HELPDESK ; then
    echo "cannot create U_HELPDESK user $U_HELPDESK"
    fail_test 140
    exit "$RETVAL"
fi

# add user to corresponding group
udm groups/group modify --dn "$(group_dn $G_HELPDESK)" --append users="$(user_dn $U_HELPDESK)"

# create additional helpdesk group
G_HELPDESK_B=$(group_randomnameme)
if ! group_create $G_HELPDESK_B ; then
	echo "cannot create g_HELPDESK_B group $G_HELPDESK_B"
	fail_test 140
    exit "$RETVAL"
fi
# create new user
U_HELPDESK_B=$(user_randomname)
if ! user_create $U_HELPDESK_B ; then
    echo "cannot create U_HELPDESK_B user $U_HELPDESK_B"
	fail_test 140
    exit "$RETVAL"
fi

# add user to corresponding group
udm groups/group modify --dn "$(group_dn $G_HELPDESK_B)" --append users="$(user_dn $U_HELPDESK_B)"


# create new test user
U_UNPROT=$(user_randomname)
if ! user_create $U_UNPROT ; then
    echo "cannot create U_UNPROT user $U_UNPROT"
	fail_test 140
    exit "$RETVAL"
fi

U_UNPROT_B=$(user_randomname)
if ! user_create $U_UNPROT_B ; then
    echo "cannot create U_UNPROT_B user $U_UNPROT_B"
	fail_test 140
    exit "$RETVAL"
fi
# create new protected test user
U_PROT=$(user_randomname)
if ! user_create $U_PROT ; then
    echo "cannot create U_PROT user $U_PROT"
	fail_test 140
    exit "$RETVAL"
fi

# backup
old_ldap_acl_user_passwordreset_protected_uid="$ldap_acl_user_passwordreset_protected_uid"
old_ldap_acl_user_passwordreset_attributes="$ldap_acl_user_passwordreset_attributes"
old_ldap_acl_user_passwordreset_accesslist_groups_dn="$ldap_acl_user_passwordreset_accesslist_groups_dn"

# configure new group
UCRKEY="dn"
ucr set ldap/acl/user/passwordreset/accesslist/groups/$UCRKEY="$(group_dn $G_HELPDESK)"
ucr set ldap/acl/user/passwordreset/protected/uid="Administrator,$U_PROT"
/etc/init.d/slapd crestart

# do some cleanup when exiting
cleanup() {
        echo "==> performing cleanup"
        ucr unset ldap/acl/user/passwordreset/accesslist/groups/$UCRKEY
        if [ -n "$UCRKEY_B" ] ; then
                ucr unset ldap/acl/user/passwordreset/accesslist/groups/$UCRKEY_B
        fi
        ucr set ldap/acl/user/passwordreset/protected/uid="$old_ldap_acl_user_passwordreset_protected_uid" \
                ldap/acl/user/passwordreset/attributes="$old_ldap_acl_user_passwordreset_attributes"
        if [ -n "$old_ldap_acl_user_passwordreset_accesslist_groups_dn" ] ; then
                ucr set ldap/acl/user/passwordreset/accesslist/groups/dn="$old_ldap_acl_user_passwordreset_accesslist_groups_dn"
        fi

        /etc/init.d/slapd crestart

        for user in $U_HELPDESK $U_HELPDESK_B $U_UNPROT $U_UNPROT_B $U_PROT ; do
            user_remove $user
        done
        for grp in $G_HELPDESK $G_HELPDESK_B ; do
            group_remove $grp
        done
        resetPwd "Administrator"

		cleanup_mail_domain

        exit "$RETVAL"
}
trap cleanup EXIT

# has user $1 access to reset password of user $2 ?
hasPwdAccess () {
        local adminuser="$1"
        local targetuser="$2"
        local testpwd="$(random_chars 12 "${_lowerletters}")"
        local pwd="${3:-$testpwd}"
        # udm call has to be last command of function
        udm users/user modify --binddn "uid=${adminuser},cn=users,$ldap_base" --bindpwd univention --dn "uid=${targetuser},cn=users,$ldap_base" --set password="$pwd" --set overridePWHistory=1 --set overridePWLength=1
}

# has user $1 access to set description of user $2 ?
hasDescrAccess () {
        local adminuser="$1"
        local targetuser="$2"
        local testpwd="$(random_chars 12 "${_lowerletters}")"
        local pwd="${3:-$testpwd}"
        # udm call has to be last command of function
        udm users/user modify --binddn "uid=${adminuser},cn=users,$ldap_base" --bindpwd univention --dn "uid=${targetuser},cn=users,$ldap_base" --set description="$(date)"
}

# reset password to univention for user $1
resetPwd() {
        local targetuser="$1"
        # udm call has to be last command of function
        udm users/user modify --dn "uid=${targetuser},cn=users,$ldap_base" --set password="univention" --set overridePWHistory=1 --set overridePWLength=1
}

# test if Administrator can set passwords
echo "==> Test 1"
for u in "$U_HELPDESK" "$U_UNPROT" "$U_PROT" ; do
    if ! hasPwdAccess "Administrator" "$u" ; then
        echo "Administrator cannot set password of $u"
		fail_test 1
		exit "$RETVAL"
    fi
    resetPwd "$u"
done

# test if helpdesk user can set passwords
echo "==> Test 2"
for u in "$U_UNPROT" ; do
    if ! hasPwdAccess "$U_HELPDESK" "$u" ; then
        echo "helpdesk user $U_HELPDESK cannot set password of unprotected user $u"
		fail_test 1
		exit "$RETVAL"
    fi
    resetPwd "$u"
done

echo "==> Test 3"
for u in "Administrator" "$U_PROT" ; do
    if hasPwdAccess "$U_HELPDESK" "$u" ; then
        echo "helpdesk user $U_HELPDESK can set password of protected user $u"
		fail_test 1
		exit "$RETVAL"
    fi
    resetPwd "$u"
done

# do test with two helpdesk groups
UCRKEY_B="$(random_chars 8 "${_lowerletters}")"
ucr set ldap/acl/user/passwordreset/accesslist/groups/$UCRKEY_B="$(group_dn $G_HELPDESK_B)"
/etc/init.d/slapd crestart

# test if helpdesk user can set passwords
echo "==> Test 4"
for u in "$U_UNPROT" ; do
    if ! hasPwdAccess "$U_HELPDESK" "$u" ; then
        echo "helpdesk user $U_HELPDESK cannot set password of unprotected user $u"
		fail_test 1
		exit "$RETVAL"
    fi
    resetPwd "$u"
done

echo "==> Test 5"
for u in "Administrator" "$U_PROT" ; do
    if hasPwdAccess "$U_HELPDESK" "$u" ; then
        echo "helpdesk user $U_HELPDESK can set password of protected user $u"
		fail_test 1
		exit "$RETVAL"
    fi
    resetPwd "$u"
done

# test if helpdesk user can set passwords
echo "==> Test 6"
for u in "$U_UNPROT" ; do
    if ! hasPwdAccess "$U_HELPDESK_B" "$u" ; then
        echo "helpdesk_b user $U_HELPDESK_B cannot set password of unprotected user $u"
		fail_test 1
		exit "$RETVAL"
    fi
    resetPwd "$u"
done

echo "==> Test 7"
for u in "Administrator" "$U_PROT" ; do
    if hasPwdAccess "$U_HELPDESK_B" "$u" ; then
        echo "helpdesk_b user $U_HELPDESK_B can set password of protected user $u"
		fail_test 1
		exit "$RETVAL"
    fi
    resetPwd "$u"
done

# test if unprotected user with expired password can be reset
echo "==> Test 8"
udm users/user modify --dn "uid=${U_UNPROT_B},cn=users,$ldap_base" --set password="univention" --set overridePWHistory=1 --set overridePWLength=1 --set pwdChangeNextLogin=1
for u in "$U_UNPROT_B" ; do
    if ! hasPwdAccess "$U_HELPDESK" "$u" ; then
        echo "helpdesk user $U_HELPDESK cannot set password of unprotected user $u"
		fail_test 1
		exit "$RETVAL"
    fi
    resetPwd "$u"
done

# test if unprotected user with pw expiry policy can be set
echo "==> Test 9"
POLNAME="pwdpol-$(random_chars 8 "${_lowerletters}")"
if ! udm policies/pwhistory create --position "cn=policies,$ldap_base" --set name="$POLNAME" --set length=5 --set expiryInterval=7 --set pwLength=8 ; then
    echo "Creating policies/pwhistory failed"
	fail_test 140
	exit "$RETVAL"
fi

if ! udm users/user modify --dn "uid=$U_UNPROT_B,cn=users,$ldap_base" --policy-reference "cn=$POLNAME,cn=policies,$ldap_base" ; then
    echo "Setting reference of policies/pwhistory object $POLNAME to $U_UNPROT_B failed"
	fail_test 140
	exit "$RETVAL"
fi
for u in "$U_UNPROT_B" ; do
    if ! hasPwdAccess "$U_HELPDESK" "$u" ; then
        echo "helpdesk user $U_HELPDESK cannot set password of unprotected user $u"
		fail_test 1
		exit "$RETVAL"
    fi
    resetPwd "$u"
done
udm policies/pwhistory remove --dn "cn=$POLNAME,cn=policies,$ldap_base"


# do test with additional attributes
# test if helpdesk user can set description BEFORE enabling it
echo "==> Test 10"
for u in "$U_UNPROT" ; do
    if hasDescrAccess "$U_HELPDESK" "$u" ; then
        echo "helpdesk user $U_HELPDESK can set description of unprotected user $u"
		fail_test 1
		exit "$RETVAL"
    fi
done

ucr set ldap/acl/user/passwordreset/attributes="$old_ldap_acl_user_passwordreset_attributes,description"
/etc/init.d/slapd crestart
# test if helpdesk user can set description AFTER enabling it
echo "==> Test 11"
for u in "$U_UNPROT" ; do
    if ! hasDescrAccess "$U_HELPDESK" "$u" ; then
        echo "helpdesk user $U_HELPDESK cannot set description of unprotected user $u"
		fail_test 1
		exit "$RETVAL"
    fi
done
# test if unprotected (simple) user can set description of other users
echo "==> Test 12"
for u in "$U_HELPDESK" "Administrator" "$U_HELPDESK_B" ; do
    if hasDescrAccess "$U_UNPROT" "$u" ; then
        echo "simple user $U_UNPROT can set description of (helpdesk) user $u"
		fail_test 1
        exit "$RETVAL"
    fi
done
# test if unprotected (simple) user can set password of other users
echo "==> Test 13"
for u in "$U_HELPDESK" "Administrator" "$U_HELPDESK_B" ; do
    if hasPwdAccess "$U_UNPROT" "$u" ; then
        echo "simple user $U_UNPROT can set password of (helpdesk) user $u"
        fail_test 1
        exit "$RETVAL"
    fi
done

exit "$RETVAL"
