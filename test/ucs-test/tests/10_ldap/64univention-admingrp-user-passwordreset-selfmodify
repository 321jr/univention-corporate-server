#!/usr/share/ucs-test/runner bash
## desc: univention-admingrp-user-passwordreset (selfmodify)
## roles:
##  - domaincontroller_master
##  - domaincontroller_backup
## packages:
##  - univention-admingrp-user-passwordreset
## exposure: dangerous

. "$TESTLIBPATH/base.sh" || exit 137
. "$TESTLIBPATH/user.sh" || exit 137
. "$TESTLIBPATH/group.sh" || exit 137
. "$TESTLIBPATH/random.sh" || exit 137
. "$TESTLIBPATH/maildomain.sh" || exit 137

create_mail_domain "$domainname"
rc=$?

cleanup_mail_domain () {
    if [ "$rc" = "0" ]; then
        delete_mail_domain "$domainname" || fail_test 1
    fi
}

trap cleanup_mail_domain EXIT

# create helpdesk group
G_HELPDESK=$(group_randomnameme)
if ! group_create $G_HELPDESK ; then
	fail_fast 140 "cannot create G_HELPDESK group $G_HELPDESK"
fi
# create new user
U_HELPDESK=$(user_randomname)
if ! user_create $U_HELPDESK ; then
	fail_fast 140 "cannot create U_HELPDESK user $U_HELPDESK"
fi

# add user to corresponding group
udm groups/group modify --dn "$(group_dn $G_HELPDESK)" --append users="$(user_dn $U_HELPDESK)"

# create new protected test user
U_PROT=$(user_randomname)
if ! user_create $U_PROT ; then
	fail_fast 140 "cannot create U_PROT user $U_PROT"
fi

# create new unprotected test user
U_UNPROT=$(user_randomname)
if ! user_create $U_UNPROT ; then
	fail_fast 140 "cannot create U_UNPROT user $U_UNPROT"
fi

# backup
old_ldap_acl_user_passwordreset_protected_uid="$ldap_acl_user_passwordreset_protected_uid"
old_ldap_acl_user_passwordreset_attributes="$ldap_acl_user_passwordreset_attributes"
old_ldap_acl_user_passwordreset_accesslist_groups_dn="$ldap_acl_user_passwordreset_accesslist_groups_dn"

UCRKEY="dn"
# users can modify their own password
# Allow users to modify their password in Univention Directory Manager
ucr set ldap/acl/user/password/change=yes \
 	ldap/acl/user/passwordreset/accesslist/groups/$UCRKEY="$(group_dn $G_HELPDESK)" \
 	ldap/acl/user/passwordreset/protected/uid="Administrator,$U_PROT"

/etc/init.d/slapd crestart

# do some cleanup when exiting
cleanup() {
        echo "==> performing cleanup"

		ucr unset ldap/acl/user/passwordreset/accesslist/groups/$UCRKEY
        ucr set ldap/acl/user/password/change=no \
	    	ldap/acl/user/passwordreset/protected/uid="$old_ldap_acl_user_passwordreset_protected_uid" \
			ldap/acl/user/passwordreset/attributes="$old_ldap_acl_user_passwordreset_attributes"

        if [ -n "$old_ldap_acl_user_passwordreset_accesslist_groups_dn" ] ; then
            ucr set ldap/acl/user/passwordreset/accesslist/groups/dn="$old_ldap_acl_user_passwordreset_accesslist_groups_dn"
        fi

        /etc/init.d/slapd crestart

        for user in $U_HELPDESK $U_PROT $U_UNPROT ; do
			user_remove $user
        done

        for grp in $G_HELPDESK ; do
            group_remove $grp
        done

        resetPwd "Administrator"

		cleanup_mail_domain

        exit "$RETVAL"
}

trap cleanup EXIT

# has user $1 access to reset password of user $2 ?
hasPwdAccess () {
        local adminuser="$1"
        local targetuser="$2"
		local testpwd="$(random_chars 12 "${_lowerletters}")"
        local pwd="${3:-$testpwd}"
        # udm call has to be last command of function
        udm users/user modify --binddn "uid=${adminuser},cn=users,$ldap_base" --bindpwd univention --dn "uid=${targetuser},cn=users,$ldap_base" --set password="$pwd" --set overridePWHistory=1 --set overridePWLength=1
}

# reset password to univention for user $1
resetPwd() {
        local targetuser="$1"
        # udm call has to be last command of function
        udm users/user modify --dn "uid=${targetuser},cn=users,$ldap_base" --set password="univention" --set overridePWHistory=1 --set overridePWLength=1
}

echo "==> reset all passwords"
for user in Administrator $U_HELPDESK $U_PROT $U_UNPROT ; do
    resetPwd "$user"
done

# test if Administrator can set it's own password
echo "==> Test 1"
if ! hasPwdAccess "Administrator" "Administrator" ; then
	fail_fast 1 "Administrator cannot set its own password"
fi

# test if helpdesk user can set it's own password
echo "==> Test 2"
if ! hasPwdAccess "$U_HELPDESK" "$U_HELPDESK" ; then
	fail_fast 1 "Helpdesk user $U_HELPDESK cannot set its own password"
fi

# test if unprotected user can set it's own password
echo "==> Test 3"
if ! hasPwdAccess "$U_PROT" "$U_PROT" ; then
	fail_fast 1 "Unportected user $U_PROT cannot set its own password"
fi

exit "$RETVAL"
