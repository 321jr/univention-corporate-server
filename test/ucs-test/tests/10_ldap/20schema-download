#!/usr/share/ucs-test/runner python2.6
## desc: Checking ldap schema download
## tags: [basic]
## roles:
##  - domaincontroller_master
## packages:
##  - univention-config
##  - univention-directory-manager-tools
## exposure: safe

import sys
import os
import subprocess
import socket
from univention.config_registry import ConfigRegistry
import univention.config_registry

def main():
    """A main method stores almost completely code."""
    ucr_variable_to_set = "ldap/schema/export"
    service_to_restart = "/etc/init.d/slapd"
    try:
        univention.config_registry.handler_set([ucr_variable_to_set + '=yes']) # set to value
        ucr = ConfigRegistry()   
        ucr.load() # load whole dict
        ldap_schema_export = ucr.get(ucr_variable_to_set) # get specific key from ucr 

        if not ldap_schema_export or ldap_schema_export != 'yes': # if no value or value is not yes
            print >> sys.stderr, "The variable", ucr_variable_to_set, "could not be set."
            sys.exit(110)
        print "Try to restart", service_to_restart
        subprocess_restart_slapd = subprocess.Popen([service_to_restart, 'restart'],
        stdout=subprocess.PIPE) # subprocess (command line input)
        subprocess_restart_slapd.wait() # waits for child process to terminate before goes on
        if subprocess_restart_slapd.returncode: # analysis of restart
            print >> sys.stderr, "Something went wrong with restarting", service_to_restart
            sys.exit(110)
        else:
            print "Done."

        hostname = socket.gethostname() # returns hostname
        download_schema_file = hostname + "/ldap-schema.txt"
        subprocess_wget = subprocess.Popen(['wget', '-c', download_schema_file, '-O' ,'/dev/null', ],
        stdout=subprocess.PIPE) # subprocess (command line input) needs a returnvalue
        subprocess_wget.wait() # waits for child process to terminate before goes on

      
        if not subprocess_wget.returncode: # in case returncode of wget is not zero
            univention.config_registry.handler_unset([ucr_variable_to_set])
            ucr.load() # load whole ucr dict
            ldap_schema_export = ucr.get(ucr_variable_to_set) # get specific key from ucr
            if ldap_schema_export: # if ucr value is not empty
                print >> sys.stderr, "The variable", ucr_variable_to_set, "could not be unset."
                sys.exit(110) # test failed if the ucr variable could not be unset.
            else: # if ucr value is empty
                print "Try to restart", service_to_restart
                subprocess_restart_slapd = subprocess.Popen([service_to_restart, 'restart'],
                stdout=subprocess.PIPE) # subprocess (command line input) needs a returnvalue
                subprocess_restart_slapd.wait() # waits for child process to terminate before goes on
                if subprocess_restart_slapd.returncode: # if restarting went bad
                    print >> sys.stderr, "Something went wrong with restarting", service_to_restart
                    sys.exit(110)
                else:
                    print "Done."
                    sys.exit(100) # test passed if the ucr variable could be unset and if returncode of 'wget' is 0
        else:
            sys.exit(110) # test failed if wget does not work out
             
    except OSError, error:
        print >> sys.stderr, "An error occured with %s" % (error, )
        sys.exit(1) # exit if something goes wrong on OS level

if __name__ == '__main__':
   main()
