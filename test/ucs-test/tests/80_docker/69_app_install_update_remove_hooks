#!/usr/share/ucs-test/runner python
## desc: Test update-certificates
## tags: [docker]
## exposure: dangerous
## packages:
##   - docker.io

from __future__ import print_function
from dockertest import \
	Appcenter, \
	get_app_version, \
	App, \
	UCSTest_DockerApp_InstallationFailed, \
	get_docker_appbox_image, \
	get_app_name
from univention.testing.utils import is_port_open
import subprocess

app_name = get_app_name()  # returns an arbitrary app

# a log file to store the results (line based)...
file_result = "/tmp/69_app_install_update_remove_hooks.result"

# the path, where -by convention- script hooks have to be stored (app specific)
hook_path = "/var/lib/univention-appcenter/apps/{appid}/local/hooks".format(
	appid=app_name)

# the same script will be placed in all script hook folders. It prints its
# filename into $result_file- appends one line & that is the test condition.
test_script = '#!/bin/sh' \
	'\n' '# This script prints its own name' \
	'\n' "echo \"\'$0\'\" >> {file_result}".format(file_result=file_result)
# ^ NOTE: ticks are intentional!

# the setup will create all script folders for the hooks and place the
# test_script inside each of them. The $result_file is also initialized
# and should cotain only one line, the current date, after this setup.
setup = '#!/bin/sh' \
	"\n" 'set -x' \
	"\n" 'mkdir -p {hook_path}/post-remove.d/' \
	"\n" 'mkdir -p {hook_path}/post-install.d/' \
	"\n" 'mkdir -p {hook_path}/post-upgrade.d/' \
	"\n" \
	"\n" 'echo "{test_script}" > {hook_path}/post-remove.d/01-script.sh' \
	"\n" 'echo "{test_script}" > {hook_path}/post-install.d/01-script.sh' \
	"\n" 'echo "{test_script}" > {hook_path}/post-upgrade.d/01-script.sh' \
	"\n" \
	"\n" 'chmod +x {hook_path}/post-remove.d/01-script.sh' \
	"\n" 'chmod +x {hook_path}/post-install.d/01-script.sh' \
	"\n" 'chmod +x {hook_path}/post-install.d/01-script.sh' \
	"\n" '# initialize or reset result file...' \
	"\n" '(echo -n "#" ; date) > {file_result}' \
	"\n" 'set +x'.format(
		hook_path=hook_path,
		test_script=test_script,
		file_result=file_result
	)

# ==============================================================================


def assert_file_lines(filename, hookname):
	"""
	function to check if the last line of the $result_file contains the name of
	the last called hook. The result file is similar to any log file.
	"""
	assert(hookname in subprocess.check_output(['tail', '-1', filename]))


if __name__ == '__main__':
	"""
	This test tests three hook directories: install, update and remove. Each of
	these actions should then execute its hook scripts and if that works a
	resulting log file contains their script file names. After each step we
	check the $result_file entry and see if it contains the last action.
	"""
	subprocess.check_output(setup, shell=True)
	with Appcenter() as appcenter:

		# ==================================================================
		# first test: update the app
		app = App(
			name=app_name,
			version='1',  # first version
			build_package=False,
			call_join_scripts=False
		)
		app.add_script(setup=setup)
		app.set_ini_parameter(
			DockerImage='alpine:3.6',  # initial docker image release
			DockerScriptSetup='/setup',
			DockerScriptInit='/sbin/init',
		)

		app.add_to_local_appcenter()
		appcenter.update()
		app.install()  # install the app
		app.verify(joined=False)

		# assume, that the install hook has added a line to the file_result,
		# which contains only the current date after the setup and check
		# that this last line contains the word `install`...
		assert_file_lines(file_result, "install")
		# appcenter.cleanup()
		# ==================================================================
		# second test: update the app...
		app = App(
			name=app_name,
			version='2',  # next version
			build_package=False,
			call_join_scripts=False
		)
		app.add_script(setup=setup)
		app.set_ini_parameter(
			DockerImage='alpine:3.7',  # next image release
			DockerScriptSetup='/setup',
			DockerScriptInit='/sbin/init',
		)

		app.add_to_local_appcenter()
		appcenter.update()
		app.upgrade()	# now upgrade the app
		app.verify(joined=False)

		# assure, that the update_hook has added a new line to the file..
		assert_file_lines(file_result, "upgrade")

		# ==================================================================
		# third test: remove the app...
		app.uninstall()
		app.remove()
		# assure, that the remove has added a new line to the file..
		assert_file_lines(file_result, "remove")
# vim: ft=python
