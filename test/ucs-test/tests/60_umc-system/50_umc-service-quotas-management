#!/usr/share/ucs-test/runner python
## desc: Test the UMC file quota module
## bugs: [34625]
## exposure: dangerous

import sys
sys.path.insert(0, '.')
from TestUMCSystemModule import TestUMCSystem

import simplejson as json

import univention.testing.utils as utils
import univention.testing.udm as udm_test
from univention.testing.strings import random_username


class TestUMCQuotasManagement(TestUMCSystem):

    def __init__(self):
        """Test Class constructor"""
        super(TestUMCQuotasManagement, self).__init__()
        self.quota_was_in_use = None
        self.partition_dev = ''

    def query_user_quotas(self, options='{}'):
        """
        Makes a 'quota/users/query' UMC request with provided options
        and returns response 'result' with any status code
        """
        try:
            # defining request explicitly, since the status
            # code can be other than 200 and/or result might be empty
            umc_connection = self.Connection.get_connection()
            umc_connection.request('POST',
                                   '/umcp/command/quota/users/query',
                                   options,
                                   self.Connection._headers)

            request_result = umc_connection.getresponse()
            request_result = request_result.read()
            if not request_result:
                utils.fail("Request 'quota/users/query' with options '%s' "
                           "failed, no or empty response, hostname %s"
                           % (options, self.hostname))

            request_result = json.loads(request_result)
            return request_result.get('result')
        except Exception as exc:
            utils.fail("Exception while making 'quota/users/query' request "
                       "with options '%s': %s" % (options, exc))

    def check_quotas_query(self, quotas_query):
        """
        Checks if 'quotas_query' has all default fields
        """
        for quota in quotas_query:
            if not 'partitionSize' in quota:
                utils.fail("The field 'partitionSize' was not found in "
                           "quotas query '%s'" % quota)
            if not 'mountPoint' in quota:
                utils.fail("The field 'mountPoint' was not found in "
                           "quotas query '%s'" % quota)
            if not 'partitionDevice' in quota:
                utils.fail("The field 'partitionDevice' was not found in "
                           "quotas query '%s'" % quota)
            if not 'freeSpace' in quota:
                utils.fail("The field 'freeSpace' was not found in "
                           "quotas query '%s'" % quota)
            if not 'inUse' in quota:
                utils.fail("The field 'inUse' was not found in "
                           "quotas query '%s'" % quota)

    def choose_partition_device(self, quotas_query, mount_point='/boot'):
        """
        Looks through the provided 'quotas_query' for a 'mount_point',
        returns respective partition device to use for the test.
        Also saves initial quota state 'inUse' into global var.
        Returns code 77 (RESULT_SKIP) in case '/boot' was not found.
        """
        for quota in quotas_query:
            if quota['mountPoint'] == mount_point:
                self.quota_was_in_use = quota['inUse']
                return quota['partitionDevice']
        print "Failed to select a partition for the test, skipping"
        return self.return_code_result_skip()

    def is_dev_quota_active(self, quotas_query):
        """
        Returns the 'inUse' field value of the quota with a
        mount point '/boot' and 'self.partition_dev' from
        the provided 'quotas_query'
        """
        for quota in quotas_query:
            if ((quota['partitionDevice'] == self.partition_dev) and
                (quota['mountPoint'] == '/boot')):
                return quota['inUse']

    def is_user_quota_active(self, user_quotas, username):
        """
        Returns True when quota is found among the given 'user_quotas'
        for a user with provided 'username'
        """
        if user_quotas:
            try:
                for quota in user_quotas:
                    if quota['user'] == username:
                        return True
            except KeyError as exc:
                utils.fail("KeyError exception while searching for '%s' "
                           "user quota: '%s'" % (username, exc))

    def activate_deactivate_quota(self, command):
        """
        Depending on a given 'command' activates or deactvates a
        'self.partition_dev' quota by making a UMC request 'quota/partitions/'
        """
        options = {"partitionDevice": self.partition_dev}
        try:
            request_result = self.Connection.request('quota/partitions/'
                                                     + command,
                                                     options)
            if not request_result:
                utils.fail("Request 'quota/partitions/%s' with options '%s' "
                           " failed, no response result, hostname %s"
                           % (command, options, self.hostname))
            if not request_result.get('success'):
                utils.fail("Request 'quota/partitions/%s' with options '%s' "
                           "failed, no 'success'=True in response, "
                           "hostname '%s', response '%s'" % (command,
                           options, self.hostname, request_result))
        except Exception as exc:
            utils.fail("Exception while making 'quota/partitions/%s' "
                       "request with options '%s': %s"
                       % (command, options, exc))

    def set_remove_user_quota(self, command, username,
                              size_limit_soft=10, size_limit_hard=10,
                              file_limit_soft=0, file_limit_hard=0):
        """
        Sets or removes the quota for a provided 'username' and
        'self.partition_dev' depending on a given 'command'
        """
        if command == 'set':
            options = {"user": username,
                       "partitionDevice": self.partition_dev,
                       "sizeLimitSoft": size_limit_soft,
                       "sizeLimitHard": size_limit_hard,
                       "fileLimitSoft": file_limit_soft,
                       "fileLimitHard": file_limit_hard}
        elif command == 'remove':
            options = [{"object": username + "@" + self.partition_dev,
                        "options": None}]
        else:
            utils.fail("The provided command '%s' is not supported, request "
                       "or/and its options are unknown" % command)
        try:
            request_result = self.Connection.request('quota/users/' + command,
                                                     options)
            if not request_result:
                utils.fail("Request 'quota/users/%s' wtih options '%s' "
                           "failed, no response result, hostname %s"
                           % (command, options, self.hostname))
            if not request_result.get('success'):
                utils.fail("Request 'quota/users/%s' with options '%s' "
                           "failed, no 'success'=True in response, "
                           "hostname '%s', response '%s'"
                           % (command, options, self.hostname, request_result))
        except Exception as exc:
            utils.fail("Exception while making 'quota/users/%s' request "
                       "with options '%s': %s" % (command, options, exc))

    def main(self):
        """
        A method to test the filesystem quota management through UMC
        """
        self.get_ucr_credentials()
        self.create_connection_authenticate()

        test_username = 'umc_test_user_' + random_username(6)

        with udm_test.UCSTestUDM() as UDM:
            print("Creating a test user for testing user-specific "
                  "quotas set up")
            test_user_dn = UDM.create_user(password='univention',
                                           username=test_username)[0]
            utils.verify_ldap_object(test_user_dn)

            try:
                print "Making 'quota/partitions' query request"
                quotas_query = self.make_query_request('quota/partitions')
                print "Checking quotas query response structure"
                self.check_quotas_query(quotas_query)

                print("Choosing partition device for the test "
                      "(with '/boot' mount point)")
                self.partition_dev = self.choose_partition_device(quotas_query)
                query_options = {"filter": "*",
                                 "partitionDevice": self.partition_dev}
                query_options = json.dumps({"options": query_options})

                print("Deactivating quotas for partition '%s'"
                      % self.partition_dev)
                self.activate_deactivate_quota('deactivate')
                if self.is_dev_quota_active(
                    self.make_query_request('quota/partitions')):
                    utils.fail("The quota on a device '%s' was reported as "
                               "'inUse' after the deactivation"
                               % self.partition_dev)

                print("Activating quotas for '%s' partition"
                      % self.partition_dev)
                self.activate_deactivate_quota('activate')
                if not self.is_dev_quota_active(
                    self.make_query_request('quota/partitions')):
                    utils.fail("The quota on a device '%s' was reported as "
                               "not 'inUse' after being activated"
                               % self.partition_dev)

                print("Setting '%s' user quota for '%s' partition"
                      % (test_username, self.partition_dev))
                self.set_remove_user_quota('set', test_username)
                if not self.is_user_quota_active(
                    self.query_user_quotas(query_options), test_username):
                    utils.fail("The user '%s' quota for '%s' reported as "
                               "inactive after it was set"
                               % (test_username, self.partition_dev))

                print("Removing '%s' user quota for '%s' partition"
                      % (test_username, self.partition_dev))
                self.set_remove_user_quota('remove', test_username)
                if self.is_user_quota_active(
                    self.query_user_quotas(query_options), test_username):
                    utils.fail("The user '%s' quota for '%s' reported as "
                               "active after the quota was removed"
                               % (test_username, self.partition_dev))

                print("Deactivating quotas for '%s' partition"
                      % self.partition_dev)
                self.activate_deactivate_quota('deactivate')
                if self.is_dev_quota_active(
                    self.make_query_request('quota/partitions')):
                    utils.fail("The quota on a device '%s' was reported as "
                               "'inUse' after being deactivated"
                               % self.partition_dev)
            finally:
                print("Cleaning up created quotas and test user (if any), "
                      "restoring initial partition quota "
                      "setting to 'inUse=%s'" % self.quota_was_in_use)
                if self.partition_dev:
                    # Make sure that quota is active to get the test user quota
                    self.activate_deactivate_quota('activate')
                    if self.is_user_quota_active(
                        self.query_user_quotas(query_options), test_username):
                        self.set_remove_user_quota('remove', test_username)

                    if self.quota_was_in_use is False:
                        self.activate_deactivate_quota('deactivate')


if __name__ == '__main__':
    TestUMC = TestUMCQuotasManagement()
    sys.exit(TestUMC.main())
