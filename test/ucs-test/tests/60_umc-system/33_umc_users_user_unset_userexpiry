#!/usr/share/ucs-test/runner python
# -*- coding: utf-8 -*.
## desc: Test unsetting userexpiry attribute via UMC
## bugs: [25279]
## roles:
##  - domaincontroller_master
## exposure: dangerous

import sys
sys.path.insert(0, '.')
from TestUMCSystemModule import TestUMCSystem

import json

import univention.testing.utils as utils
from univention.testing.udm import UCSTestUDM
from univention.testing.strings import random_username
from univention.testing.umc import UMCConnection


class TestUMCUserAuthentication(TestUMCSystem):

	def __init__(self):
		"""Test Class constructor"""
		super(TestUMCUserAuthentication, self).__init__()

		self.UDM = None

		self.test_user_dn = ''
		self.test_username = ''
		self.test_password = ''

	def create_user(self):
		"""
		Creates a group and a user in it for the test.
		"""
		print("\nCreating a user '%s' without posix" % (self.test_username,))

		self.test_user_dn = self.UDM.create_user(
			password=self.test_password,
			username=self.test_username,
			options=['posix', 'samba', 'kerberos'],
			policy_reference='cn=default-umc-all,cn=UMC,cn=policies,%s' % self.UCR['ldap/base']
		)[0]
		utils.verify_ldap_object(self.test_user_dn)

	def set_userexpiry_None(self):
		"""
		Queries UDM's users/user from UMC
		"""
		return self.modify_object([{"object": {"userexpiry": None, "$dn$": self.test_user_dn}}], 'users/user')

	def set_userexpiry_testval(self):
		"""
		Queries UDM's users/user from UMC
		"""
		return self.modify_object([{"object": {"userexpiry": "2015-02-02", "$dn$": self.test_user_dn}}], 'users/user')

	def set_userexpiry_empty(self):
		"""
		Queries UDM's users/user from UMC
		"""
		return self.modify_object([{"object": {"userexpiry": "", "$dn$": self.test_user_dn}}], 'users/user')

	def authenticate_to_umc(self, username, password):
		"""
		Authenticates to UMC using 'self.Connection' and given
		'password' with 'username'. Updates the cookie.
		Returns 'True' on success and 'False' in any other case.
		"""
		options = {"options": {"username": username, "password": password}}
		try:
			umc_connection = self.Connection.get_connection()
			umc_connection.request('POST', '/umcp/auth', json.dumps(options), self.Connection._headers)

			request_result = umc_connection.getresponse()
			cookie = request_result.getheader('set-cookie')
			status_code = request_result.status

			print "Response Code:", status_code
			print "Response Cookie:", cookie
			print "Response Message:", request_result.read()

			self.Connection._headers['Cookie'] = cookie
			if cookie and status_code == 200:
				return True

			return False
		except Exception as exc:
			utils.fail("An exception while trying to authenticate to UMC "
					   "with a 'username'=%s and 'password'=%s: %r"
					   % (self.test_username, password, exc))

	def main(self):
		"""
		Tests the UMC user authentication and various password change cases.
		"""
		self.test_username = 'umc_test_user_' + random_username(6)
		self.test_password = 'univention'

		self.reload_ucr()
		self.get_ucr_credentials()

		with UCSTestUDM() as self.UDM:
			self.create_user()
			self.Connection = UMCConnection(self.UCR['hostname'])
			self.authenticate_to_umc(self.username, self.password)

			self.set_userexpiry_testval()
			response = self.get_object([self.test_user_dn], 'users/user')
			if response[0]["userexpiry"] != "2015-02-02":
				utils.fail("userexpiry not initialized properly")

			self.set_userexpiry_empty()
			response = self.get_object([self.test_user_dn], 'users/user')
			if "userexpiry" in response[0]:
				utils.fail("unset of userexpiry via empty string failed")
			else:
				print "OK: unset of userexpiry via empty string succeeded"

			self.set_userexpiry_testval()
			response = self.get_object([self.test_user_dn], 'users/user')
			if response[0]["userexpiry"] != "2015-02-02":
				utils.fail("userexpiry not initialized properly")

			self.set_userexpiry_None()
			response = self.get_object([self.test_user_dn], 'users/user')
			if "userexpiry" in response[0]:
				utils.fail("unset of userexpiry via None failed")
			else:
				print "OK: unset of userexpiry via None succeeded"


if __name__ == '__main__':
	TestUMC = TestUMCUserAuthentication()
	sys.exit(TestUMC.main())
