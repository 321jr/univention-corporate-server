#!/usr/share/ucs-test/runner python
## desc: Univention-s4-connector dns aaaa record syncronisation
## exposure: dangerous
## packages:
##   - univention-config
##   - univention-directory-manager-tools
##   - univention-s4-connector
##   - dnsutils
## versions:
##  4.0-2: skip

import univention.testing.udm as udm_test
from univention.testing.utils import fail, wait_for_replication_and_postrun
import dnstests
import s4connector
import subprocess
import sys

if __name__ == '__main__':
	with udm_test.UCSTestUDM() as udm:
		print("========== create DNS zone in UDM ==========")
		sys.stdout.flush()
		s4connector.exit_if_connector_not_running()
		random_zone = dnstests.random_zone()
		host = dnstests.get_hostname()
		ip = dnstests.make_random_ipv6()
		test_zone_dn = udm.create_object('dns/forward_zone', zone = random_zone, nameserver = host, a = ip)
		dnstests.check_ldap_object(test_zone_dn, 'AAAA Record', 'aAAARecord', ip)
		s4connector.wait_for_sync(30)
		## Adding a DNS zone triggers bind reload in postrun
		wait_for_replication_and_postrun()
		dnstests.test_dns_aaaa_record(random_zone, ip)
		dnstests.check_ldap_object(test_zone_dn, 'AAAA Record', 'aAAARecord', ip)

		print("========== modify address in Samba ==========")
		sys.stdout.flush()
		p = subprocess.Popen(["kdestroy"])
		rc = p.wait()

		principal_for_nsupdate = "%s$" % dnstests.ucr["hostname"].upper()
		p = subprocess.Popen(["kinit", "-t", "/etc/krb5.keytab", principal_for_nsupdate])
		rc = p.wait()
		if rc != 0:
			fail("kinit for %s failed" % principal_for_nsupdate)

		## Adding a DNS zone triggers bind reload in postrun, better check:
		dnstests.fail_if_cant_resolve_own_hostname()	## wait up to 17 seconds

		ip2 = dnstests.make_random_ipv6()
		nsupdate_request='''server %(hostname)s.%(domainname)s
zone %(zonename)s.
; debug yes
; update delete %(zonename)s. AAAA
update add %(zonename)s. %(ttl)s IN AAAA %(ip)s
; show
send
quit''' % {
			"hostname": dnstests.ucr["hostname"],
			"domainname": dnstests.ucr["domainname"],
			"zonename": random_zone,
			"ttl": 1200,
			"ip": ip2,
		}
		print nsupdate_request

		p = subprocess.Popen(["nsupdate", "-v", "-g"], stdin=subprocess.PIPE)
		(stdout, stderr) = p.communicate(input=nsupdate_request)
		if p.returncode != 0:
			fail("nsupdate failed")
		s4connector.wait_for_sync(30)
		dnstests.test_dns_aaaa_record(random_zone, ip2)
		dnstests.check_ldap_object(test_zone_dn, 'AAAA Record', 'aAAARecord', [ip, ip2])

	sys.stdout.flush()

	s4connector.wait_for_sync()
	## Removing a DNS zone triggers bind reload in postrun, better check:
	dnstests.fail_if_cant_resolve_own_hostname()	## wait up to 17 seconds
