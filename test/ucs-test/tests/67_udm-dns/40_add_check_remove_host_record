#!/usr/share/ucs-test/runner python
## desc: Create DNS host record, check if attributes are set correctly and remove it again
## tags: [udm-dns]
## roles: [domaincontroller_master]
## exposure: careful
## packages:
##   - univention-config
##   - univention-directory-manager-tools



import univention.testing as test
import univention.testing.udm as udm_test
import univention.testing.strings as uts
import univention.uldap as uldap


if __name__ == '__main__':
	forwardZoneName = '%s.%s' % (uts.random_name(), uts.random_name())
	hostRecordProperties = {
		'name': uts.random_name(),
		'zonettl': '128',
		'a': '10.20.30.40',
		'mx': '50 %s' % uts.random_string(),
		'txt': uts.random_string()
	}
	ldapMapping = {
		'name': 'relativeDomainName',
		'zonettl': 'dNSTTL',
		'a': 'aRecord',
		'txt': 'tXTRecord',
		'mx': 'mXRecord'
	}

	ldap = uldap.getAdminConnection()
	ldapFilter = '(&(relativeDomainName=%s)(objectClass=dNSZone))' % (hostRecordProperties['name'])

	with udm_test.UCSTestUDM() as udm:
		forwardZone = udm.create_object('dns/forward_zone', zone = forwardZoneName, nameserver = uts.random_string())
		hostRecord = udm.create_object('dns/host_record', superordinate = forwardZone, **hostRecordProperties)

		for dn, attr in ldap.search(base = forwardZone, filter = ldapFilter, attr = ldapMapping.values()):
			if dn == hostRecord:
				for key, value in hostRecordProperties.items():
					if [value] != attr[ldapMapping[key]]:
						test.fail('Expected "%s" of created DNS host record to be %r, but found %r instead' % (ldapMapping[key], [value], attr[ldapMapping[key]]))

				break
		else:
			test.fail('Did not find created DNS host record "%s" in LDAP' % hostRecord)

		udm.remove_object('dns/host_record', dn = hostRecord, superordinate = forwardZone)
		if hostRecord in ldap.searchDn(base = forwardZone, filter = ldapFilter):
			test.fail('Could still find DNS host record "%s" in LDAP after it should have been removed' % hostRecord)
