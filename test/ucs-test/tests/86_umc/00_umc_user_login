#!/usr/share/ucs-test/runner python
# desc: UMC login test
# roles-not: [basesystem]
# exposure: dangerous

from time import sleep
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.remote.errorhandler import NoSuchElementException
import logging
import univention.testing.udm as udm_test
import univention.testing.strings as uts
import univention.testing.umc_selenium as umc_selenium_test

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class SeleniumLoginError(umc_selenium_test.SeleniumError):
	pass


class LoginTester(object):
	def __init__(self):
		self.udm = udm_test.UCSTestUDM()
		self.selenium = umc_selenium_test.UMCSeleniumTest(login=False)

	def __enter__(self):
		self.udm.__enter__()
		self.selenium.__enter__()
		return self

	def __exit__(self, exc_type, exc_value, traceback):
		self.udm.__exit__(exc_type, exc_value, traceback)
		self.selenium.__exit__(exc_type, exc_value, traceback)

	def test_login_scenarios(self):
		logger.info('Testing login scenarios')
		testcases = self.get_testcases()

		for testcase in testcases:
			logger.info('Test case: ' + str(testcase))

			self.go_to_login_page()
			self.enter_credentials(testcase['username'], testcase['password'])
			sleep(3)
			self.check_if_log_in_state_correct(testcase['valid'])

	def get_testcases(self):
		username_user = uts.random_username()
		password_user = uts.random_string()
		self.udm.create_user(username=username_user, password=password_user)[0]

		return [
			{
				'desc': 'invalid_username',
				'username': uts.random_string(),
				'password': self.selenium.umcLoginPassword,
				'valid': False
			},
			{
				'desc': 'invalid_password',
				'username': self.selenium.umcLoginUsername,
				'password': uts.random_string(),
				'valid': False
			},
			{
				'desc': 'both_invalid',
				'username': uts.random_string(),
				'password': uts.random_string(),
				'valid': False
			},
			{
				'desc': 'valid_admin',
				'username': self.selenium.umcLoginUsername,
				'password': self.selenium.umcLoginPassword,
				'valid': True
			},
			{
				'desc': 'empty_password',
				'username': self.selenium.umcLoginUsername,
				'password': '',
				'valid': False
			},
			{
				'desc': 'empty_username',
				'username': '',
				'password': self.selenium.umcLoginPassword,
				'valid': False
			},
			{
				'desc': 'valid_user',
				'username': username_user,
				'password': password_user,
				'valid': True
			}
		]

	def go_to_login_page(self):
		# TODO: end_umc_session() could be skipped if already logged out.
		self.selenium.end_umc_session()
		self.selenium.driver.get(self.selenium.base_url + "univention/login/?lang=en-US")

	def enter_credentials(self, username, password):
		elem = self.selenium.driver.find_element_by_id("umcLoginUsername")
		elem.clear()
		elem.send_keys(username)
		elem = self.selenium.driver.find_element_by_id("umcLoginPassword")
		elem.clear()
		elem.send_keys(password)
		elem.send_keys(Keys.RETURN)

	def check_if_log_in_state_correct(self, expected_log_in_state):
		# TODO: Maybe rather check for Username in source (like in
		# umc_selenium.py).
		try:
			self.selenium.find_element_by_text('The authentication has failed')
			if expected_log_in_state:
				raise SeleniumLoginError("The user wasn't able to log in where he should be")
		except NoSuchElementException:
			if not expected_log_in_state:
				raise SeleniumLoginError("The user was able to log in where he shouldn't be")

if __name__ == '__main__':
	with LoginTester() as login_tester:
		login_tester.test_login_scenarios()
