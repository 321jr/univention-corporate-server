#!/usr/share/ucs-test/runner python
## desc: |
##  Check App-Center Operation failures with broken apps (exit 1 in {pre,post}{inst,rm}) via UMC commands within a local testing appcenter.
## roles-not: [basesystem]
## packages:
##   - univention-management-console-module-appcenter
##   - univention-appcenter-dev
## tags: [appcenter]
from __future__ import print_function

import logging
import appcentertest as app_test


def test_install_traces(self, app_center, application):
	info = app_center.get(application)
	is_installed = app_center.is_installed(application, info=info)
	install_traces = not app_test.CheckOperations.uninstalled(application, info)
	return (is_installed, install_traces)


def test_uninstall_traces(self, app_center, application):
	info = app_center.get(application)
	is_installed = app_center.is_installed(application, info=info)
	uninstall_traces = not app_test.CheckOperations.installed(application, info)
	return (is_installed, uninstall_traces)


@app_test.test_case
def test_install_preinst_error(app_center, application):
	"""
	Try to install an app that contains an error in `preinst` (exit 1)
	(must fail).
	"""

	package = app_test.DebianPackage(name=application)
	package.create_debian_file_from_buffer("preinst", "\nexit 1\n")

	app = app_test.AppPackage.from_package(package)
	app.build_and_publish()
	app.remove_tempdir()

	test = app_test.TestOperations(app_center, app.app_id)
	try: dpkg_errors = test.test_install(test_installed=False)
	except app_test.AppCenterCheckError: pass
	else:
		error = "Install of broken app did not fail."
		(is_installed, install_traces) = test_install_traces(app_center, application)
		if is_installed: error += " And is marked as installed."
		if install_traces: error += " And the installation left traces."
		app_test.fail(error.strip())
	finally:
		#  lets try to be safe and remove the broken app
		if app_center.is_installed(app.app_id):
			app_center.uninstall(app.app_id, force=True)


@app_test.test_case
def test_install_postinst_error(app_center, application):
	"""
	Try to install an app that contains an error in `postinst` (exit 1)
	(must fail).
	"""

	package = app_test.DebianPackage(name=application)
	package.create_debian_file_from_buffer("postinst", "\nexit 1\n")

	app = app_test.AppPackage.from_package(package)
	app.build_and_publish()
	app.remove_tempdir()

	test = app_test.TestOperations(app_center, app.app_id)
	try: dpkg_errors = test.test_install(test_installed=False)
	except app_test.AppCenterCheckError: pass
	else:
		error = "Install of broken app did not fail."
		(is_installed, install_traces) = test_install_traces(app_center, application)
		if is_installed: error += " And is marked as installed."
		if install_traces: error += " And the installation left traces."
		app_test.fail(error.strip())
	finally:
		#  lets try to be safe and remove the broken app
		if app_center.is_installed(app.app_id):
			app_center.uninstall(app.app_id, force=True)


@app_test.test_case
def test_uninstall_prerm_error(app_center, application):
	"""
	Try to uninstall an app that contains an error in `prerm` (exit 1)
	(must fail).
	"""

	package = app_test.DebianPackage(name=application)
	package.create_debian_file_from_buffer("prerm", "\nexit 1\n")

	app = app_test.AppPackage.from_package(package)
	app.build_and_publish()
	app.remove_tempdir()

	test = app_test.TestOperations(app_center, app.app_id)
	with test.test_install_safe():
		try: dpkg_errors = test.test_uninstall(test_uninstalled=False)
		except app_test.AppCenterCheckError: pass
		else:
			error = "Uninstall of broken app did not fail."
			(is_installed, uninstall_traces) = test_uninstall_traces(app_center, application)
			if not is_installed: error += " And was marked as not installed."
			if uninstall_traces: error += " And not all install traces are still present."
			app_test.fail(error.strip())


@app_test.test_case
def test_uninstall_postrm_error(app_center, application):
	"""
	Try to uninstall an app that contains an error in `postrm` (exit 1)
	(must fail).
	"""

	package = app_test.DebianPackage(name=application)
	package.create_debian_file_from_buffer("postrm", "\nexit 1\n")

	app = app_test.AppPackage.from_package(package)
	app.build_and_publish()
	app.remove_tempdir()

	test = app_test.TestOperations(app_center, app.app_id)
	with test.test_install_safe():
		try: dpkg_errors = test.test_uninstall(test_uninstalled=False)
		except app_test.AppCenterCheckError: pass
		else:
			error = "Uninstall of broken app did not fail."
			(is_installed, uninstall_traces) = test_uninstall_traces(app_center, application)
			if not is_installed: error += " And was marked as not installed."
			if uninstall_traces: error += " And not all install traces are still present."
			app_test.fail(error.strip())


def main():
	app_test.app_logger.log_to_stream()
	app_test.app_logger.get_base_logger().setLevel(logging.WARNING)

	with app_test.local_appcenter():
		test_install_preinst_error()
		test_install_postinst_error()
		test_uninstall_prerm_error()
		test_uninstall_postrm_error()

if __name__ == '__main__':
	main()
