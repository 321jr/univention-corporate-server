#!/usr/share/ucs-test/runner python
## desc: |
##  Check App-Center Operation failures with broken apps (exit 1 in {pre,post}{inst,rm}) via UMC commands within a local testing appcenter.
## roles-not: [basesystem]
## packages:
##   - univention-management-console-module-appcenter
##   - univention-appcenter-dev
## tags: [appcenter]
from __future__ import print_function

import logging
import appcentertest as app_test


@app_test.test_case
def test_install_preinst_error(app_center, application):
	"""
	Try to install and uninstall an app that contains an error in `preinst`
	(exit 1). No traces must be left and the app must be reinstallable.
	"""

	package = app_test.DebianPackage(name=application)
	package.create_debian_file_from_buffer("preinst", "\nexit 1\n")

	app = app_test.AppPackage.from_package(package)
	app.build_and_publish()
	app.remove_tempdir()

	test = app_test.TestOperations(app_center, app.app_id)
	with test.test_install_safe(test_installed=False) as dpkg_errors:
		if dpkg_errors:
			print("OK - Errors reported:", *dpkg_errors, sep="\n\t")
		else:
			app_test.fail("Install of broken app did not produce dpkg errors.")

		try:
			test.test_uninstall()
		except app_test.AppCenterCheckError:
			#  FIXME (APPCENTER-SWITCH): Normally we want to remove this
			#  try/except block as the app-center should be able to remove
			#  broken apps. But this test captures the state before the
			#  app-center-switch, so we expect an error and fail otherwise.
			pass
		else:
			app_test.fail("Uninstall of broken app didnt fail (APPCENTER-SWITCH)")

	#  FIXME (APPCENTER-SWITCH): Normally we want to test if the app-center is
	#  in a state where we can reinstall this broken app. But this test
	#  captures the state before the app-center-switch, so we just dont.
	#try:
	#	with test.test_install_safe(test_installed=False):
	#		test.test_uninstall()
	#except app_test.AppCenterCheckError as e:
	#	app_test.fail("Reinstall of broken app failed: " + str(e))


@app_test.test_case
def test_install_postinst_error(app_center, application):
	"""
	Try to install and uninstall an app that contains an error in `postinst`
	(exit 1). No traces must be left and the app must be reinstallable.
	"""

	package = app_test.DebianPackage(name=application)
	package.create_debian_file_from_buffer("postinst", "\nexit 1\n")

	app = app_test.AppPackage.from_package(package)
	app.build_and_publish()
	app.remove_tempdir()

	test = app_test.TestOperations(app_center, app.app_id)
	with test.test_install_safe(test_installed=False) as dpkg_errors:
		if dpkg_errors:
			print("OK - Errors reported:", *dpkg_errors, sep="\n\t")
		else:
			app_test.fail("Install of broken app did not produce dpkg errors.")
		test.test_uninstall()

	try:
		test.test_install(test_installed=False)
	except app_test.AppCenterCheckError as e:
		app_test.fail("Reinstall of broken app failed: " + str(e))
	else:
		test.test_uninstall()


@app_test.test_case
def test_uninstall_prerm_error(app_center, application):
	"""
	Try to install and uninstall an app that contains an error in `prerm`
	(exit 1). No traces must be left and the app must be reinstallable.
	"""

	package = app_test.DebianPackage(name=application)
	package.create_debian_file_from_buffer("prerm", "\nexit 1\n")

	app = app_test.AppPackage.from_package(package)
	app.build_and_publish()
	app.remove_tempdir()

	test = app_test.TestOperations(app_center, app.app_id)
	with test.test_install_safe():
		dpkg_errors = test.test_uninstall(test_uninstalled=False)
		if dpkg_errors:
			print("OK - Errors reported:", *dpkg_errors, sep="\n\t")
		else:
			app_test.fail("Uninstall of broken app did not produce dpkg errors.")

	try:
		test.test_install(test_installed=False)
	except app_test.AppCenterCheckError as e:
		#  FIXME (APPCENTER-SWITCH): Normally we want to fail this test at this
		#  point, as the app-center should be able to reinstall broken apps.
		#  But this test captures the state before the app-center-switch, so we
		#  expect an error and fail otherwise
		#app_test.fail("Reinstall of broken app failed: " + str(e))
		pass
	else:
		#  FIXME (APPCENTER-SWITCH): Uncomment the following statement and
		#  remove the app_test.fail()
		#test.test_uninstall()
		app_test.fail("Reinstall of broken app didnt fail (APPCENTER-SWITCH)")


@app_test.test_case
def test_uninstall_postrm_error(app_center, application):
	"""
	Try to install and uninstall an app that contains an error in `postrm`
	(exit 1). No traces must be left and the app must be reinstallable.
	"""

	package = app_test.DebianPackage(name=application)
	package.create_debian_file_from_buffer("postrm", "\nexit 1\n")

	app = app_test.AppPackage.from_package(package)
	app.build_and_publish()
	app.remove_tempdir()

	test = app_test.TestOperations(app_center, app.app_id)
	with test.test_install_safe():
		dpkg_errors = test.test_uninstall(test_uninstalled=False)
		if dpkg_errors:
			print("OK - Errors reported:", *dpkg_errors, sep="\n\t")
		else:
			app_test.fail("Install of broken app did not produce dpkg errors.")

	try:
		test.test_install(test_installed=False)
	except app_test.AppCenterCheckError as e:
		#  FIXME (APPCENTER-SWITCH): Normally we want to fail this test at this
		#  point, as the app-center should be able to reinstall broken apps.
		#  But this test captures the state before the app-center-switch, so we
		#  expect an error and fail otherwise
		#app_test.fail("Reinstall of broken app failed: " + str(e))
		pass
	else:
		#  FIXME (APPCENTER-SWITCH): Uncomment the following statement and
		#  remove the app_test.fail()
		#test.test_uninstall()
		app_test.fail("Reinstall of broken app didnt fail (APPCENTER-SWITCH)")


def main():
	app_test.app_logger.log_to_stream()
	app_test.app_logger.get_base_logger().setLevel(logging.WARNING)

	with app_test.local_appcenter():
		test_install_preinst_error()
		test_install_postinst_error()
		test_uninstall_prerm_error()
		test_uninstall_postrm_error()


if __name__ == '__main__':
	main()
