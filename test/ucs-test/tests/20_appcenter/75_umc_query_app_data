#!/usr/share/ucs-test/runner python
## desc: |
##  Check the UMC query command with a custom INI file.
## roles-not: [basesystem]

## packages:
##   - univention-management-console-module-appcenter
## tags: [appcenter]
## exposure: safe

import os
import sys
import random
import string
from univention.appcenter import AppManager
from univention.testing import umc
import univention.testing.ucr as ucr_test
from univention import config_registry


opened_files = []

def open_file(prefix, suffix):
	path = '%s.%s' % (prefix, suffix)
	opened_files.append(path)
	return open(path, 'w')


def cleanup():
	print ''
	print 'Removing temporarily created files...'
	for ipath in opened_files:
		if os.path.exists(ipath):
			os.unlink(ipath)


def get_temp_app_prefix():
	random_str = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(10))
	return '/var/cache/univention-appcenter/testapp_%s' % random_str


def write_ini_file(app_prefix):
	print 'Writing INI file: %s.ini' % os.path.basename(app_prefix)
	with open_file(app_prefix, 'ini') as ini_file:
		ini_file.write('''
[Application]
ID=test_app
Code=00
Name=Test App
Version=11
License=freemium
Description=Test App [EN]

[de]
Description=Test App [DE]
''')


def test_ini_data(umc_data, lang):
	sys.stdout.write('Testing INI file entries for correctnes... ')
	sys.stdout.flush()
	expected_data = {
		'id': 'test_app',
		'code': '00',
		'name': 'Test App',
		'version': '11',
		'license': 'freemium',
		'description': 'Test App [%s]' % lang,
	}
	for ikey, ival in expected_data.iteritems():
		expected_val = expected_data[ikey]
		assert umc_data[ikey] == ival, 'Entry %s=%s does not match expected value %s!' % (ikey, ival, expected_val)
	print 'SUCCESS'


README_TYPES = (
	'README',
	'README_INSTALL',
	'README_POST_INSTALL',
	'README_UPDATE',
	'README_POST_UPDATE',
	'README_UNINSTALL',
	'README_POST_UNINSTALL',
)

def write_readme_file(app_prefix, readme_filename):
	with open_file(app_prefix, readme_filename) as readme_file:
		readme_file.write('--%s--' % readme_filename)


def write_readme_files(app_prefix):
	print 'Writing README files:'
	for readme in README_TYPES:
		for lang in ('EN', 'DE'):
			filename = '%s_%s' % (readme, lang)
			print '  %s' % filename
			write_readme_file(app_prefix, filename)


def test_readme_files(umc_data, lang):
	sys.stdout.write('Testing README file entries for correctnes... ')
	sys.stdout.flush()
	for readme in README_TYPES:
		expected_val = '--%s_%s--' % (readme, lang)
		val = umc_data[readme.lower()] 
		assert val == expected_val, 'Entry %s=%s does not match expected value %s!' % (readme, val, expected_val)
	print 'SUCCESS'

def test_umc_query():
	# test English and German localization
	for lang in ('en_US', 'de_DE'):
		lang_suffix = lang.split('_')[0].upper()
		print ''
		print 'Testing language: %s' % lang_suffix

		# UMC query
		connection = umc.UMCTestConnection()
		connection.request('set', {'locale': lang}, command='set')
		apps = connection.request('appcenter/query', print_response=False, print_request_data=False)

		# pick our test app from the list of all apps
		matches = [iapp for iapp in apps if iapp['id'] == 'test_app']
		assert len(matches) > 0, 'The test app does not occur in the list of queried apps!'
		# test INI and README file data
		test_ini_data(matches[0], lang_suffix)
		test_readme_files(matches[0], lang_suffix)


if __name__ == '__main__':
	with ucr_test.UCSTestConfigRegistry() as ucr:
		# make sure that the app center cache dir is not resynced during the test
		# ... this allows us to add our test app data directly to the cache dir
		config_registry.handler_set(['appcenter/umc/update/always=false'])
		try:
			AppManager.clear_cache()
			app_prefix = get_temp_app_prefix()
			write_ini_file(app_prefix)
			write_readme_files(app_prefix)
			test_umc_query()
		finally:
			cleanup()


