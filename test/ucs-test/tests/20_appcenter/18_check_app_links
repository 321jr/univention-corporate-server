#!/usr/share/ucs-test/runner python
## desc: Check that links in the .ini files do not return errors when accessed.
## roles: [domaincontroller_master]
## tags: [basic, apptest]
## bugs: [37717, 37950]
## packages: [univention-management-console-module-appcenter]
## exposure: careful

from os import path
from glob import glob
from re import findall
from urllib2 import urlopen, URLError, HTTPError
from multiprocessing import Process, Pipe as m_Pipe

import univention.testing.utils as utils
from univention.testing.codes import TestCodes
from univention.management.console.modules.appcenter.app_center import Application, CACHE_DIR

import re

APPCENTER_FILE = "/var/cache/appcenter-installed.txt"  # installed apps
check_installed_apps = []  # list of installed apps (from APPCENTER_FILE)

re_pattern = 'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'  # link extraction pattern
failures_counter = 0  # errors counter
bad_links = []  # list of problematic links


def fail_the_test(bad_link):
    """
    Increases the global failures counter and makes a list of bad links.
    """
    global failures_counter, bad_links
    failures_counter += 1
    bad_links.append(bad_link)


def get_installed_apps():
    """
    Populates the global 'check_installed_apps' with ids from the
    'APPCENTER_FILE'. Skips when the 'APPCENTER_FILE' does not exist.
    """
    try:
        if not path.exists(APPCENTER_FILE):
            print("The '%s' file with a list of installed Apps cannot "
                  "be found." % APPCENTER_FILE)
            exit(TestCodes.RESULT_SKIP)

        AppsFile = open(APPCENTER_FILE)
        global check_installed_apps
        for app_id in AppsFile:
            check_installed_apps.append(app_id.strip())

        AppsFile.close()
        print "Installed Apps are:", check_installed_apps
    except (IOError, OSError) as exc:
        utils.fail("An error occured while trying to open the '%s' file: %r"
                   % (APPCENTER_FILE, exc))


def check_link_by_request(proc_connection, link):
    """
    Opens the given 'link' using urllib2 and returns HTTP code/reason.
    """
    response_code = reason = ''
    try:
        url = urlopen(link, timeout=60)
        response_code = url.getcode()

    except (URLError, HTTPError, ValueError) as exc:
        print "\n ERROR while checking the URL '%s': %r" % (link, exc)
        if isinstance(exc, HTTPError):
            response_code = exc.code
            reason = exc.reason
        elif isinstance(exc, URLError):
            reason = exc.reason

    proc_connection.send((response_code, reason))
    proc_connection.close()


def findall_urls(filename):
    """
    Returns a set of 'http:' and 'https:' URLs found in the given 'filename'.
    Lines starting with '#' are ignored.
    """
    all_urls = []

    try:
        with open(filename, 'r') as ini_file:
            for line in ini_file:
                if not line.startswith('#'):
                    url = findall(re_pattern, line)
                    for u in url:
                        all_urls.append(re.sub(r'<[^>]+>', '', u))

    except (IOError, OSError) as exc:
        utils.fail("An %r error occured while working with %s"
                   % (exc, filename))

    return set(all_urls)


def collect_links():
    """
    Looks for all .ini files in CACHE_DIR;
    Opens the .inis of installed Apps and looks for links;
    Adds links found to a set and returns it when done.
    """
    test_path = glob(path.join(CACHE_DIR, '*.ini'))
    links_to_check = set()

    for app in check_installed_apps:
        print "\nChecking App:", app
        app = "/" + app  # .ini filename starts with Application name

        for filename in test_path:
            if app in filename:
                print "\nGetting links from file '%s':" % filename
                # determine links to be checked (duplicates are ignored):
                links_to_check.update(findall_urls(filename))

    return links_to_check


def check_ini_files():
    """
    Collects all links from .inis of installed Apps;
    Tries to open each URL found using urlopen with a timeout.
    """
    print "\nThe path to Appcenter .ini files is:", CACHE_DIR
    if not path.exists(CACHE_DIR):
        utils.fail("The path to App center .ini files does not exist.")

    for link in collect_links():
        print "\nChecking link:", link

        # a separate Process is run with a timeout to make sure
        # that test does not hang forever with "waiting" links:
        parent_conn, child_conn = m_Pipe()
        proc = Process(target=check_link_by_request, args=(child_conn, link))

        proc.start()
        proc.join(timeout=70)

        if proc.is_alive():  # terminate if did not terminate in a timeout
            proc.terminate()
            print "Failed to get any response in time when checking the link."
            print " ERROR: The link '%s' seems to be inaccessible\n" % link
            fail_the_test(link)

        else:
            # get HTTP response code and reason if any
            response_code, reason = parent_conn.recv()
            if not response_code:
                print "No HTTP response code in response."
                fail_the_test(link)  # when ValueError or URLError happens
            else:
                print "The HTTP response code is:", response_code
                # fail if HTTP response code startswith 4xx or 5xx:
                if str(response_code).startswith(('4', '5')):
                    print "Response code indicates a problem."
                    fail_the_test(link)

            if reason:
                print "Reason is '%s'." % reason


if __name__ == '__main__':
    # skip the test if there are no Apps (in 'APPCENTER_FILE'):
    get_installed_apps()
    Application.sync_with_server()

    # find and check only .ini files of the 'check_installed_apps':
    check_ini_files()

    if failures_counter:
        utils.fail(" %d link error(s) were detected, please "
                   "check a complete test output.\n Problematic links are: %s"
                   % (failures_counter, bad_links))
    else:
        print "\nNo errors were detected.\n"
