#!/usr/share/ucs-test/runner python
## desc: Check that links in the .ini files do not return errors when accessed.
## roles-not: [basesystem]
## tags: [basic, apptest]
## bugs: [37717, 37950]
## packages: [univention-management-console-module-appcenter, linkchecker]
## exposure: careful

from os import path
from glob import glob
from re import findall, search as re_search
from subprocess import Popen, PIPE
from multiprocessing import Process, Pipe as m_Pipe

import univention.testing.utils as utils
from univention.testing.codes import TestCodes
from univention.management.console.modules.appcenter.app_center import Application, CACHE_DIR


APPCENTER_FILE = "/var/cache/appcenter-installed.txt"  # installed apps
FAIL_CODES = (404,)  # HTTP response codes that make the test fail
FAIL_MESSAGES = ('Name or service not known',)  # Messages that make the test fail
CHECK_LEVEL = '0'  # level of recursion when checking links:
                   # ('0' to check only current link)
                   # ('1' or higher may lead to a very-very long checks)
check_installed_apps = []  # list of installed apps (from APPCENTER_FILE)
failures_counter = 0  # errors counter


def fail_the_test():
    """
    Simply increases the global failures counter.
    """
    global failures_counter
    failures_counter += 1


def get_installed_apps():
    """
    Populates the global 'check_installed_apps' with ids from the
    'APPCENTER_FILE'. Skips when the 'APPCENTER_FILE' does not exist.
    """
    try:
        if not path.exists(APPCENTER_FILE):
            print("The '%s' file with a list of installed Apps cannot "
                  "be found." % APPCENTER_FILE)
            exit(TestCodes.RESULT_SKIP)

        AppsFile = open(APPCENTER_FILE)
        global check_installed_apps
        for app_id in AppsFile:
            check_installed_apps.append(app_id.strip())

        AppsFile.close()
        print "Installed Apps are:", check_installed_apps
    except (IOError, OSError) as exc:
        utils.fail("An error occured while trying to open the '%s' file: %r"
                   % (APPCENTER_FILE, exc))


def create_and_run_process(proc_connection, cmd):
    """
    Puts the stdout and stderr of the created and executed 'cmd'
    into 'proc_connection'.
    """
    proc = Popen(cmd, stdout=PIPE, stderr=PIPE, env={'LANG': 'C'})
    proc_connection.send(proc.communicate())
    proc_connection.close()


def findall_urls(ini_content):
    """
    Returns all the 'http:' and 'https:' URLs found in the given 'ini_content'.
    """
    re_pattern = 'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
    return set(findall(re_pattern, ini_content))


def collect_links():
    """
    Looks for all .ini files in CACHE_DIR;
    Opens the .inis of installed Apps and looks for links;
    Adds links found to a set and returns it when done.
    """
    test_path = glob(path.join(CACHE_DIR, '*.ini'))
    links_to_check = set()

    for app in check_installed_apps:
        print "\nChecking App:", app
        app = "/" + app  # .ini filename starts with Application name

        for filename in test_path:
            if app in filename:
                print "\nGetting links from file '%s':" % filename

                # determine links to be checked (duplicates are ignored):
                try:
                    with open(filename, 'r') as ini_file:
                        links_to_check.update(findall_urls(ini_file.read()))
                except (IOError, OSError) as exc:
                    utils.fail("An %r error occured while working with %s"
                               % (exc, filename))

    return links_to_check


def check_stdout_for_error_codes_messages(stdout, link):
    """
    Searches for the 'FAIL_CODES' + 'FAIL_MESSAGES' in the given 'stdout'.
    """
    all_errors = FAIL_CODES + FAIL_MESSAGES
    for error in all_errors:
        fail_re = ("(Ergebnis|Result).*\s%s\s" % error)
        if bool(re_search(fail_re, stdout)):
            print ("\n ERROR: Fail code or message '%s' "
                   "was found when checking the link '%s'."
                   "\nSee linkchecker output below:"
                   % (error, link))

            print "STDOUT:", stdout
            fail_the_test()


def check_ini_files():
    """
    Collects all links from .inis of installed Apps;
    Checks all links found using 'linkchecker';
    Checks the stdout of 'linkchecker' for FAIL_CODES.
    """
    print "\nThe path to Appcenter .ini files is:", CACHE_DIR
    if not path.exists(CACHE_DIR):
        utils.fail("The path to App center .ini files does not exist.")

    # check links using linkchecker:
    for link in collect_links():
        print "\nChecking link:", link
        cmd = ('linkchecker', '-r', CHECK_LEVEL, '-v', '--timeout=60', link)
        print "Executing:", cmd

        # a separate Process is run with a timeout to make sure
        # that test does not hang with "waiting" links:
        parent_conn, child_conn = m_Pipe()
        proc = Process(target=create_and_run_process, args=(child_conn, cmd))
        proc.start()
        proc.join(90)

        if proc.is_alive():  # did not terminate in a timeout
            proc.terminate()
            stdout = ''
        else:
            stdout, stderr = parent_conn.recv()  # receive output
            if stderr:
                print "STDERR:", stderr

        if not stdout:
            print "Failed to get any stdout from linkchecker..."
            print "\n ERROR: The link '%s' seems to be inaccessible\n" % link
            fail_the_test()
        else:
            check_stdout_for_error_codes_messages(stdout, link)


if __name__ == '__main__':
    # skip the test if there are no Apps (in 'APPCENTER_FILE'):
    get_installed_apps()
    Application.sync_with_server()

    # find and check only .ini files of the 'check_installed_apps':
    check_ini_files()

    if failures_counter:
        utils.fail("\nThere were %d link error(s) were detected, please "
                   "check a complete test output." % failures_counter)
    else:
        print "\nNo errors were detected.\n"
