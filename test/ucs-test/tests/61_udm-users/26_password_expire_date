#!/usr/share/ucs-test/runner python
## desc: Check UDM users/user --set userexpiry
## roles: [domaincontroller_master, domaincontroller_backup, domaincontroller_slave]
## exposure: dangerous
## packages: [python-univention-directory-manager]
## bugs: [36330]

from univention.uldap import getMachineConnection
import univention.testing.strings as uts
import univention.testing.udm as udm_test
import univention.testing.utils as utils

def ldap_obj_search(dn = None, ldapfilter = '(objectClass=*)'):
	lo = getMachineConnection()
	if dn:
		result = lo.search(base=dn, scope='base', filter=ldapfilter)
	else:
		result = lo.search(filter=ldapfilter)

	if not result:
		utils.fail("No Objects found with filter: %s" % (ldapfilter,))
	elif len(result) != 1:
		utils.fail("Too many objects (%d) found for filter '%s'" % (len(result), ldapfilter))

	(dn, obj) = result[0]
	return obj

def dictdiff(first, second):
	diff = {}
	for key in first.keys()+second.keys():
		try:
			x = first[key]
		except KeyError:
			diff[key] = (None, second[key])
			continue

		try:
			y = second[key]
		except KeyError:
			diff[key] = (x, None)
			continue

		if x != y:
			diff[key] = (x, y)
	return diff

def check_dict_values(obj, expectation):
	for attribute, value in expectation.items():
		if value == None:
			if attribute in obj:
				utils.fail("Attribute '%s' found with value '%s', expected to be unset" % (attribute, obj[attribute]))
		else:
			if not attribute in obj:
				utils.fail("Attribute '%s' not found. Expected value: '%s'" % (attribute, value))
			elif value == []:
				return
			elif obj[attribute] != value:
				utils.fail("Attribute '%s' found with value '%s'. Expected value: '%s'" % (attribute, obj[attribute], value))


def modify_and_diff(udm, **kwargs):
	before = ldap_obj_search(dn=kwargs['dn'])
	udm.modify_object('users/user', **kwargs)
	after = ldap_obj_search(dn=kwargs['dn'])
	return dictdiff(before, after)


def modify_and_check_expectation(udm, expected_diff = None, **kwargs):
		if expected_diff:
			diff = modify_and_diff(udm, **kwargs)
			ddiff = dictdiff(diff, expected_diff)
			if ddiff:
				utils.fail("Unexpected diff: %s" % ddiff)
		else:
			try:
				diff = modify_and_diff(udm, **kwargs)
			except udm_test.UCSTestUDM_NoModification:
				pass
			else:
				ddiff = dictdiff(diff, {})
				if ddiff:
					utils.fail("Unexpected diff: %s" % ddiff)

def run():
	with udm_test.UCSTestUDM() as udm:
		passwd =  uts.random_string()
		username =  uts.random_name()

		## Prepare user and check
		userdn, username = udm.create_user(password=passwd, disabled="none")
		after = ldap_obj_search(dn=userdn)
		check_dict_values(after, {
			'sambaAcctFlags': ['[U          ]'],
			'krb5KDCFlags': ['126'],
			'sambaKickoffTime': None,
			'krb5ValidEnd': None,
			'shadowExpire': None,
			})

		## Modify and check
		expected_before = {
			'sambaAcctFlags': ['[U          ]'],
			'sambaKickoffTime': None,
			'krb5KDCFlags': ['126'],
			'krb5ValidEnd': None,
			'shadowExpire': None,
			}
		expected_after = {
			'sambaAcctFlags': ['[U          ]'],
			'sambaKickoffTime': ['1422831600'],
			'krb5KDCFlags': ['126'],
			'krb5ValidEnd': ['20150202000000Z'],
			'shadowExpire': ['16468'],
			}
		expected_diff = dictdiff(expected_before, expected_after)
		modify_and_check_expectation(udm, expected_diff, dn=userdn, userexpiry="02.02.15")

		## Modify and check
		expected_before = expected_after
		expected_after = {
			'sambaAcctFlags': ['[U          ]'],
			'sambaKickoffTime': ['1388530800'],
			'krb5ValidEnd': ['20140101000000Z'],
			'krb5KDCFlags': ['126'],
			'shadowExpire': ['16071'],
			}
		expected_diff = dictdiff(expected_before, expected_after)
		modify_and_check_expectation(udm, expected_diff, dn=userdn, userexpiry="2014-01-01")

		## Modify and check
		expected_before = expected_after
		expected_after = {
			'sambaAcctFlags': ['[UD         ]'],
			'sambaKickoffTime': ['1388530800'],
			'krb5ValidEnd': ['20140101000000Z'],
			'krb5KDCFlags': ['254'],
			'shadowExpire': ['1'],
			}
		expected_diff = dictdiff(expected_before, expected_after)
		modify_and_check_expectation(udm, expected_diff, dn=userdn, disabled="all")

		## Modify and check
		expected_before = expected_after
		expected_after = {
			'sambaAcctFlags': ['[UD         ]'],
			'sambaKickoffTime': ['1422831600'],
			'krb5ValidEnd': ['20150202000000Z'],
			'krb5KDCFlags': ['254'],
			'shadowExpire': ['16468'],
			}
		expected_diff = dictdiff(expected_before, expected_after)
		modify_and_check_expectation(udm, expected_diff, dn=userdn, userexpiry="2015-02-02")

		## Modify and check
		expected_before = expected_after
		expected_after = {
			'sambaAcctFlags': ['[UD         ]'],
			'krb5KDCFlags': ['254'],
			'sambaKickoffTime': ['1388530800'],
			'krb5ValidEnd': ['20140101000000Z'],
			'shadowExpire': ['16071'],
			}
		expected_diff = dictdiff(expected_before, expected_after)
		modify_and_check_expectation(udm, expected_diff, dn=userdn, userexpiry="01.01.14", disabled="all")

		## Modify and check
		expected_before = expected_after
		expected_after = {
			'sambaAcctFlags': ['[U          ]'],
			'krb5KDCFlags': ['126'],
			'sambaKickoffTime': ['1422831600'],
			'krb5ValidEnd': ['20150202000000Z'],
			'shadowExpire': ['16468'],
			}
		expected_diff = dictdiff(expected_before, expected_after)
		modify_and_check_expectation(udm, expected_diff, dn=userdn, userexpiry="02.02.15", disabled="none")

		## Modify and check
		modify_and_check_expectation(udm, {}, dn=userdn, disabled="none")

		## Modify and check
		modify_and_check_expectation(udm, {}, dn=userdn, userexpiry="")

if __name__ == '__main__':
	run()
