#!/usr/share/ucs-test/runner /usr/share/ucs-test/selenium
## desc: UMC create a user with module
## roles: [domaincontroller_master]
## exposure: dangerous


from selenium import webdriver
import traceback
import univention.testing.utils as utils
import univention.testing.udm as udm_test
import univention.testing.umc_selenium as umc_selenium_test
import univention.testing.strings as uts

usersurl = '#module=udm:users/user'
number_exception_raise = 0

#each testcase has a name and a set of values (lastname, username, password_1, valid and optional title, firstname). Value 'valid' should be 'True' if data is valid.
testcases = {'valid': {
				'title': uts.random_string(),
				'firstname': uts.random_string(),
				'lastname': uts.random_string(),
				'username': uts.random_username(),
				'password_1': uts.random_string(),
				'valid': True},
			'whitespace_username': {
				'title': uts.random_string(),
				'firstname': uts.random_string(),
				'lastname': uts.random_string(),
				'username': '%s %s' % (uts.random_username(3), uts.random_username(3)),
				'password_1': uts.random_string(),
				'valid': False},
			'whitespace_lastname': {
				'lastname': ' ',
				'username': uts.random_username(),
				'password_1': uts.random_string(),
				'valid': False},
			'whitespace_lastname_with_firstname': {
				'firstname': uts.random_string(),
				'lastname': ' ',
				'username': uts.random_username(),
				'password_1': uts.random_string(),
				'valid': False},
			'password_too_short': {
				'title': uts.random_string(),
				'firstname': uts.random_string(),
				'lastname': uts.random_string(),
				'username': uts.random_username(),
				'password_1': uts.random_string(7),
				'valid': False}
	}

if __name__ == '__main__':
	with udm_test.UCSTestUDM() as udm:
		with umc_selenium_test.UMCSeleniumTest() as selenium:
			for testcase_set in testcases:
				try:
					selenium.driver.get(selenium.base_url + usersurl)
					selenium.wait_for_pageload()
					assert "Management of domain users" in selenium.driver.page_source

					print('Testcase %s: %s' % (testcase_set, str(testcases[testcase_set])))
					testcase = testcases[testcase_set]

					print('click add')
					selenium.click_button('Add')

					print('click advanced')
					selenium.click_button('Advanced')

					if 'title' in testcase:
						selenium.enter_input('title', testcase['title'])

					if 'firstname' in testcase:
						selenium.enter_input('firstname', testcase['firstname'])

					elem = selenium.enter_input('lastname', testcase['lastname'])

					selenium.enter_input('username', testcase['username'])

					selenium.enter_input('password_1', testcase['password_1'])

					selenium.enter_input('password_2', testcase['password_1'])

					print('click create user')
					selenium.click_button('Create user')

					# when user already exist do not add to cleanup
					if "username is already in use" not in selenium.driver.page_source:
						udm._cleanup.setdefault('users/user', []).append('uid='+ testcase['username'] +',cn=users,'+selenium.ldap_base)

					# verify
					print('verify expected page')
					if testcase['valid']:
						assert "The LDAP object could not be saved" not in selenium.driver.page_source
						assert "The following properties could not be validated" not in selenium.driver.page_source
						assert "LDAP Error Object" not in selenium.driver.page_source

						if 'title' in testcase and 'firstname' in testcase:
							utils.verify_ldap_object('uid=' + testcase['username'] + ',cn=users,' + selenium.ldap_base, {'uid': [testcase['username']], 'givenName': [testcase['firstname']], 'sn': [testcase['lastname']], 'title': [testcase['title']]})
						elif 'title' in testcase:
							utils.verify_ldap_object('uid=' + testcase['username'] + ',cn=users,' + selenium.ldap_base, {'uid': [testcase['username']], 'sn': [testcase['lastname']], 'title': [testcase['title']]})
						elif 'firstname' in testcase:
							utils.verify_ldap_object('uid=' + testcase['username'] + ',cn=users,' + selenium.ldap_base, {'uid': [testcase['username']], 'givenName': [testcase['firstname']], 'sn': [testcase['lastname']]})
						else:
							utils.verify_ldap_object('uid=' + testcase['username'] + ',cn=users,' + selenium.ldap_base, {'uid': [testcase['username']], 'sn': [testcase['lastname']]})
					else:
						assert "Notification" in selenium.driver.page_source
						assert "LDAP Error Object" not in selenium.driver.page_source
						if "The LDAP object could not be saved" not in selenium.driver.page_source:
							assert "The following properties could not be validated" in selenium.driver.page_source
						else:
							assert "The LDAP object could not be saved" in selenium.driver.page_source
				except Exception:
					selenium.save_screenshot('create_user')
					print('EXCEPTION: %s' % (traceback.format_exc()))
					if number_exception_raise < selenium.max_exceptions:
						number_exception_raise += 1
					else:
						print('Test cases creating user terminated. Too many exceptions!')
						break
			if number_exception_raise > 0:
				print(str(number_exception_raise) + ' of ' + str(len(testcases)) + ' tests failed')
				raise SeleniumSeeErrorDescriptionBehindFailingTestcase
