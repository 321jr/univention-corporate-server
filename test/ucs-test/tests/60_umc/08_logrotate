#!/usr/share/ucs-test/runner python
## desc: Logrotation should trigger UMC components to reopen their logfiles
## roles:
##  - domaincontroller_master
## packages:
##  - univention-management-console
##  - univention-management-console-frontend
## exposure: dangerous

import os
import os.path
from time import sleep
from subprocess import call, Popen, PIPE

from univention.testing.utils import fail

class LogrotateError(Exception):
	pass


class LogrotateService(object):
	def __init__(self, service, logfile_pattern):
		self.service = service
		self.logfile_pattern = logfile_pattern

	@property
	def pgrep_pattern(self):
		return r'^/usr/bin/python.*%s.*' % (self.service,)

	@property
	def pid(self):
		process = Popen(['pgrep', '-x', '-f', self.pgrep_pattern], stdout=PIPE)
		stdout, stderr = process.communicate()
		if process.returncode:
			raise LogrotateError('pgrep %s failed with returncode %s' % (self.service, process.returncode))
		pids = [int(pid) for pid in stdout.splitlines() if pid.strip()]
		if not pid:
			raise LogrotateError('service %s is not started.' % (self.service,))
		if len(pids) != 1:
			raise LogrotateError('multiple services of %s are started: pids=%s' % (self.service, pids))
		return pids[0]

	@property
	def logfile(self):
		pid = self.pid
		logfile = None
		for file_ in os.listdir('/proc/%d/fd/' % (pid,)):
			file_ = os.path.join('/proc/%d/fd/' % (pid,), file_)
			if os.path.islink(file_) and os.readlink(file_).startswith(self.logfile_pattern):
				logfile = file_
				break
		return logfile

	def service_restart(self):
		call(['invoke-rc.d', os.path.basename(self.service), 'restart'])
		sleep(0.2)  # give time to restart

	def logrotate(self):
		if call(['logrotate', '-f', '/etc/logrotate.d/univention-management-console']):
			raise LogrotateError('logrotate failed')

	def main(self):
		self.service_restart()

		logfile = self.logfile
		if not logfile:
			raise LogrotateError('No logfile for service %s found.' % (self.service,))
		if not os.path.exists(os.readlink(logfile)):  # readlink -> "/var/log/univention/management-console-server.log"
			raise LogrotateError('%s does not exists (before logrotating) (service=%s)' % (logfile, self.service))

		self.logrotate()

		if not os.path.exists(os.readlink(logfile)):  # readlink -> "/var/log/univention/management-console-server.log (deleted)"
			raise LogrotateError('Logrotate was executed, the service %s did not reopen the logfile.' % (self.service,))


class UmcServer(LogrotateService):

	def __init__(self):
		super(UmcServer, self).__init__('/usr/sbin/univention-management-console-server', '/var/log/univention/management-console-server.log')


class UmcWebServer(LogrotateService):

	def __init__(self):
		super(UmcWebServer, self).__init__('/usr/sbin/univention-management-console-web-server', '/var/log/univention/management-console-web-server.log')


def main():
	for ServiceClass in (UmcServer, UmcWebServer):
		service = ServiceClass()
		try:
			service.main()
		except LogrotateError as exc:
			fail('ERROR: %s' % (exc,))

if __name__ == '__main__':
	main()
