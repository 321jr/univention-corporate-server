#!/usr/share/ucs-test/runner python
## desc: Check if requests are answered with an error code after killing ucstest module
## roles:
##  - domaincontroller_master
## packages:
##  - univention-management-console
##  - univention-management-console-frontend
##  - ucs-test-umc-module
## exposure: dangerous


import ssl
import time
import psutil
import httplib
import subprocess

from univention.testing.umc import Client
import univention.testing.utils as utils

from univention.management.console.modules.ucstest import joinscript, unjoinscript

NUMBER_OF_CONNECTIONS = 8
RESPONSE_STATUS_CODE = 510


def kill_ucstest():
	search_mask = set(['/usr/sbin/univention-management-console-module', '-m', 'ucstest'])
	for process in psutil.process_iter():
		if not (search_mask - set(process.cmdline())):
			print 'Found module process and killing it ...'
			process.kill()
	for process in psutil.process_iter():
		if not (search_mask - set(process.cmdline())):
			assert False, 'ERROR: ... module process ist still there, this should not happen!'


def restart_web_server():
	subprocess.Popen(['/etc/init.d/univention-management-console-web-server', 'restart'])


class AsyncClient(Client):

	def async_request(self, path):
		cookie = '; '.join(['='.join(x) for x in self.cookies.iteritems()])
		headers = dict(self._headers, **{'Cookie': cookie, 'Content-Type': 'application/json'})
		connection = httplib.HTTPSConnection(self.hostname, timeout=10)
		connection.request('POST', '/univention/%s' % path, '{}', headers=headers)
		return connection


def main():
	print 'Setting up the connections and sending requests...'
	connections = [
		AsyncClient.get_test_connection(timeout=10).async_request('ucstest/norespond')
		for i in range(NUMBER_OF_CONNECTIONS)
	]
	time.sleep(2)

	print 'Killing module process...'
	kill_ucstest()
	time.sleep(2)

	print 'Verfying that requests are answered with an error code...'
	success = True
	for i_connection in connections:
		try:
			response = i_connection.getresponse()
			if response.status != RESPONSE_STATUS_CODE:
				print 'ERROR: Unexpected status of response %s (expected was %s)' % (response.status, RESPONSE_STATUS_CODE)
				success = False
		except ssl.SSLError:
			print 'ERROR: request timed out'

	restart_web_server()
	if not success:
		utils.fail('ERROR: Requests are not answered with an error code')


if __name__ == '__main__':
	joinscript()
	try:
		main()
	finally:
		unjoinscript()
