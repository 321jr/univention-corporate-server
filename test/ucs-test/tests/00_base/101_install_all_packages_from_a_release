#!/usr/share/ucs-test/runner python
## desc: install all packages from a release
## roles: [domaincontroller_master]
## tags: [apptest]
## exposure: careful
## packages: []

import glob
import re
import subprocess

def run_command(cmd):
	"""Runs cmd command in terminal"""
	print ' ** %r' % cmd
	popen_obj = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	out, err = popen_obj.communicate()
	ret = popen_obj.returncode
	if ret != 0:
		print 'Return code = %s,\nOut= %s' % (ret, out)
		return 1

def apt_update():
	"""Performs apt-get update"""
	cmd = ['apt-get', 'update']
	return run_command(cmd)

def test_install(pkg_name):
	"""Simulate packages installation"""
	cmd = ['apt-get', '-s', 'install','--no-install-recommends', pkg_name]
	return run_command(cmd)

def main():
	if not apt_update():
		files = glob.glob('/var/lib/apt/lists/*Packages')
		broken_pkgs = []
		for filename in files:
			with open(filename) as f:
				# get (package, maintainer) list of tuples
				pkgs_list = re.findall(
						re.compile(r'Package: (.*)\n[^<]*Maintainer: (.*) \<'),
						f.read()
						)
				# check only packages whose maintainer is not 'Debian Install System Team'
				pkgs = [x[0] for x in pkgs_list if x[1] != 'Debian Install System Team']
				for pkg in pkgs:
					if test_install(pkg):
						broken_pkgs.append(pkg)
		print 'Broken Packages:', broken_pkgs
	else:
		print 'apt-get update failed'


if __name__ == '__main__':
	main()
