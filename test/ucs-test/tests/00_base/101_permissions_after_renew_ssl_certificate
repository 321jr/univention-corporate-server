#!/usr/share/ucs-test/runner python
## desc: Permissions after renewing complete certificate chain
## tags: apttest
## roles: [domaincontroller_master, domaincontroller_slave, domaincontroller_backup]
## exposure: dangerous
## bugs: [31941, 34082, 34080, 32988]

import datetime
import glob
import grp
import os
import pwd
import shutil
import stat
import subprocess
import tempfile
import univention.testing.ucr as ucr_test
import univention.testing.utils as utils

UNIVENTION_DIR = '/etc/univention'
SSLDIR = '/etc/univention/ssl'
CYRUS_DIR = '/var/lib/cyrus/'
ADCONNECTOR_DIR = '/var/www/univention-ad-connector/'
FREERADIUS_DIR = '/etc/freeradius/ssl/'

def backup_existing_certificate():
	current_date = datetime.datetime.now().strftime("%d%m%Y")
	cmd = ['cp', '-a', SSLDIR, os.path.join(UNIVENTION_DIR, 'ssl_%s' % current_date)]
	print ' > %r' % ' '.join(cmd)
	subprocess.call(cmd)

def renew_root_certificate():
	# On UCS-Systems < 2.0 the "ucsCA" was named "udsCA"
	caCert = os.path.join(SSLDIR, 'ucsCA', 'CAcert.pem')
	newCACert = os.path.join(SSLDIR, 'ucsCA', 'NewCAcert.pem')
	cmd = [
			'openssl', 'x509',
			'-in', caCert,
			'-out',	newCACert,
			'-days', '1000',
			'-passin', 'file:/%s' % os.path.join(SSLDIR, 'password'),
			'-signkey', os.path.join(SSLDIR, 'ucsCA', 'private', 'CAkey.pem')
			]
	print ' > %r' % ' '.join(cmd)
	subprocess.call(cmd)
	os.rename(newCACert, caCert)

def get_computers():
	with ucr_test.UCSTestConfigRegistry() as ucr:
		files_path = glob.glob('/etc/univention/ssl/*%s' % ucr.get('domainname'))
		return [os.path.basename(x) for x in files_path]

def copy_dir(pass_file, src, dist):
	for _file in glob.glob('%s/*' % src):
		cmd = ['univention-scp', pass_file, _file, dist]
		print ' > %r' % ' '.join(cmd)
		out, err = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
		print out, err

def renew_all_computer_certificate(passwd='univention'):
	with ucr_test.UCSTestConfigRegistry() as ucr:
		for pc in get_computers():
			if pc != '%s.%s' % (ucr.get('hostname'), ucr.get('domainname')):
				host = pc.split('.',1)[0]
				cmd = ['univention-certificate', 'renew', '-name', pc, '-days', '730']
				subprocess.call(cmd)
				fi = tempfile.NamedTemporaryFile(dir='/tmp', suffix='.pwd')
				fi.write(passwd)
				fi.flush()
				cmd = [
						'univention-scp',
						os.path.join('tmp', fi.name),
						os.path.join(SSLDIR, 'ucsCA', 'CAcert.pm'),
						'root@%s:%s' % (host, os.path.join(SSLDIR, 'ucsCA'))
						]
				print ' > %r' % ' '.join(cmd)
				out, err = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
				print out, err
				copy_dir(
						os.path.join('tmp', fi.name),
						os.path.join(SSLDIR,'%s' % pc),
						'root@%s:%s/' % (host, SSLDIR)
						)
				copy_dir(
						os.path.join('tmp', fi.name),
						os.path.join(SSLDIR, '%s' % pc),
						'root@%s:%s/%s' % (host, SSLDIR, host)
						)

def copy_to_admin_website():
	caCert = os.path.join(SSLDIR, 'ucsCA', 'CAcert.pem')
	shutil.copy2(caCert, '/var/www/ucs-root-ca.crt')

def check_cert_validity():
	cmd = ['/usr/sbin/univention-certificate-check-validity']
	print ' > %r' % ' '.join(cmd)
	subprocess.Popen(cmd, stdin=subprocess.PIPE).communicate()

def set_owner(path, owner, group):
	uid = pwd.getpwnam(owner).pw_uid
	gid = grp.getgrnam(group).gr_gid
	os.chown(path, uid, gid)

def using_cyrus():
	return os.path.exists(CYRUS_DIR)

def update_cyrus_cert():
	with ucr_test.UCSTestConfigRegistry() as ucr:
		shutil.copy2(os.path.join(SSLDIR, ucr.get('hostname'), 'cert.pem'), CYRUS_DIR)
		shutil.copy2(os.path.join(SSLDIR, ucr.get('hostname'), 'private.key'), CYRUS_DIR)
		set_owner(os.path.join(CYRUS_DIR, 'cert.pem'), 'cyrus', 'mail')
		set_owner(os.path.join(CYRUS_DIR, 'private.key'), 'cyrus', 'mail')

def using_adconnector():
	return os.path.exists(ADCONNECTOR_DIR)

def update_adconnector_cert():
	with ucr_test.UCSTestConfigRegistry() as ucr:
		shutil.copy2(os.path.join(SSLDIR, ucr.get('hostname'), 'cert.pem'), ADCONNECTOR_DIR)
		shutil.copy2(os.path.join(SSLDIR, ucr.get('hostname'), 'private.key'), ADCONNECTOR_DIR)
		owner = get_owner(os.path.join(ADCONNECTOR_DIR, 'cert.pem'))
		set_owner(os.path.join(ADCONNECTOR_DIR, 'cert.pem'), owner, 'www-data')
		set_owner(os.path.join(ADCONNECTOR_DIR, 'private.key'), owner, 'www-data')

def using_freeradius():
	return os.path.exists(FREERADIUS_DIR)

def update_freeradius_cert():
	with ucr_test.UCSTestConfigRegistry() as ucr:
		shutil.copy2(os.path.join(SSLDIR, ucr.get('hostname'), 'cert.pem'), FREERADIUS_DIR)
		shutil.copy2(os.path.join(SSLDIR, ucr.get('hostname'), 'private.key'), FREERADIUS_DIR)
		set_owner(os.path.join(FREERADIUS_DIR, 'cert.pem'), 'root', 'freerad')
		set_owner(os.path.join(FREERADIUS_DIR, 'private.key'), 'root', 'freerad')

def get_dir_files(dir_path, recursive=False):
	result = []
	for f in glob.glob('%s/*' % dir_path):
		if not os.path.islink(f):
			result.append(f)
			if os.path.isdir(f) and	recursive:
				result.extend(get_dir_files(f))
	return result

def get_permissions_info(dir_path):
	"""Returns a dict = { file_path(str): ( permissions(octal), owner, group ) }"""
	result = {}
	for f in glob.glob('%s/*' % dir_path):
		if not os.path.islink(f):
			st = os.stat(f)
			result[f] = (oct(st.st_mode), pwd.getpwuid(st.st_uid)[0], grp.getgrgid(st.st_gid)[0])
			if os.path.isdir(f):
				sub_result = get_permissions_info(f)
				result = dict(result.items() + sub_result.items())
	return result

def get_owner(file_path):
	st = os.stat(file_path)
	return pwd.getpwuid(st.st_uid)[0]

def is_owned_by(file_path, owner):
	st = os.stat(file_path)
	return pwd.getpwuid(st.st_uid)[0] == owner

def is_group_readable(file_path, group_name):
	st = os.stat(file_path)
	if grp.getgrgid(st.st_gid)[0] == group_name:
		return bool(st.st_mode & stat.S_IRGRP)
	else:
		return bool(st.st_mode & stat.S_IROTH)

def is_group_writable(file_path, group_name):
	st = os.stat(file_path)
	if grp.getgrgid(st.st_gid)[0] == group_name:
		return bool(st.st_mode & stat.S_IWGRP)
	else:
		return bool(st.st_mode & stat.S_IWOTH)

def main():
	before = get_permissions_info(SSLDIR)
	backup_existing_certificate()

	renew_root_certificate()
	
	after = get_permissions_info(SSLDIR)
	bda = [(k, before[k]) for k in before if after.get(k) != before.get(k)]
	adb = [(k, after[k]) for k in after if after.get(k) != before.get(k)]
	if before != after:
		utils.fail('Permissions are different before and after certificate renewal:\nAfter differs with:%r\nBefore:%r\n' % (
			adb, bda))


if __name__ == '__main__':
	main()
