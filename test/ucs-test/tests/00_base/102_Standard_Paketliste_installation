#!/usr/share/ucs-test/runner python
## desc: install all packages from standard packet list
## roles: [domaincontroller_master]
## tags: [apptest]
## exposure: careful
## packages: []

import re
import subprocess

def run_command(cmd):
	"""Runs cmd command in terminal"""
	print ' ** %r' % cmd
	popen_obj = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	out, err = popen_obj.communicate()
	ret = popen_obj.returncode
	if ret != 0:
		print 'Return code = %s,\nOut= %s' % (ret, out)
		return 1
	else:
		return out

def apt_update():
	"""Performs apt-get update"""
	cmd = ['apt-get', 'update']
	return run_command(cmd)

def test_install(pkg_name):
	"""Simulate packages installation"""
	cmd = ['apt-get', '-s', 'install', pkg_name]
	return run_command(cmd)

def get_packets_list():
	"""Returns Packet list"""
	cmd = [
			'univention-ldapsearch',
			'-x',
			'univentionPackageDefinition=*',
			'univentionPackageDefinition'
			]
	search_result = run_command(cmd)
	return re.findall(re.compile(r'univentionPackageDefinition: (\w*)\n'), search_result)

def cups_exists(packet_list):
	"""Returns True if packet cups exist"""
	return ('cups' in packet_list)

def main():
	packets = get_packets_list()
	if cups_exists(packets):
		return 1
	else:
		if apt_update() != 1:
			broken_pkgs = []
			for packet in packets:
				if test_install(packet) == 1:
					broken_pkgs.append(packet)
			print 'Broken Packages:', broken_pkgs
		else:
			print 'apt-get update failed'


if __name__ == '__main__':
	main()
