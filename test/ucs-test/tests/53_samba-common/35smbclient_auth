#!/usr/share/ucs-test/runner python
## desc: Check whether several parallel smbclient authentifications are possible
## roles:
##  - domaincontroller_master
##  - domaincontroller_backup
##  - domaincontroller_slave
## packages:
##  - univention-samba | univention-samba4
##  - python-pexpect
## exposure: safe
## tags:
##  - basic
##  - apptest

import os
import pexpect
import string
import sys
import atexit
import univention.config_registry
import random
import subprocess
import time
import univention.testing.udm as udm_test
import univention.testing.strings as uts
import univention.testing.utils as utils
try:
	from univention.testing.ucs_samba import wait_for_drs_replication, force_drs_replication
	python_samba4=True
except:
	python_samba4=False
ucr = univention.config_registry.ConfigRegistry()
ucr.load()

def initValues():
	
	try:
		totalRounds=int(os.getenv('smbauth_totalRounds'))
	except Exception, e:
		totalRounds=3
	try:
		amountPerRound=int(os.getenv('smbauth_amountPerRound'))
	except Exception, e:
		amountPerRound=8
	try:
		roundTime=int(os.getenv('smbauth_roundTime'))
	except Exception, e:
		roundTime=5
	try:
		delay=int(os.getenv('smbauth_delay'))
	except Exception, e:
		delay=5


	parameter=(totalRounds,amountPerRound,roundTime,delay)
	return parameter

def cleanup(homedir_mount):
	if homedir_mount == "None":
                univention.config_registry.handler_unset(['homedir/mount'])
	else:
                univention.config_registry.handler_set(['homedir/mount=%s' % homedir_mount])

def smbclient(username,password,number,innerDelay):
	for i in range(number):
		subprocess.Popen(["/usr/bin/smbclient", "-U%s%%%s" % (username,password), "//localhost/netlogon"], stdin=subprocess.PIPE)
		time.sleep(innerDelay[i])

def calculateInnerDelay(roundTime,amountPerRound):
	delayArray=[]
	sum1=0
	sum2=0

	#create a random number for every authentification at startup
	for i in range(amountPerRound):
		randomNumber=random.randrange(1,1000,1)
		delayArray.append(randomNumber)
		sum1=sum1+randomNumber

	#adjust numbers so that the sum of them equals $startTime,
	#hence authentifications start in this time interval 
	for i in range(amountPerRound):
		delayArray[i]=float(delayArray[i])/sum1*roundTime
		sum2=sum2+delayArray[i]
	return delayArray

def checkResult(expectedResult):
	for i in range(20):

		output = pexpect.run('/bin/bash -c "smbstatus 2>&1 | grep -c netlogon"')
		try:
			output_int=int(output)
		except Exception, e:
			print "Result was not an integer!"
			sys.exit(1)
		if output_int == expectedResult:
			return output_int
		time.sleep(1)
		
	return output_int


if __name__ == "__main__":
	with udm_test.UCSTestUDM() as udm:
		username = uts.random_username()
		password = uts.random_string()
		user = udm.create_user(username=username, password=password)

		if python_samba4:
			# DRS replication
			# force_drs_replication()
			wait_for_drs_replication("(sAMAccountName=%s)" % (username, ), attrs="objectSid")

		homedir_mount = "%s" % (ucr["homedir/mount"])
		univention.config_registry.handler_set(['homedir/mount=false'])
		atexit.register(cleanup, homedir_mount)

		(totalRounds,amountPerRound,roundTime,delay)=initValues()
		innerDelay=calculateInnerDelay(roundTime,amountPerRound)

		for index in range(totalRounds):
			smbclient(username,password,amountPerRound,innerDelay)
		expectedResult=amountPerRound*totalRounds
		result=checkResult(expectedResult)
		print "%s of %s have been successfull." % (result,expectedResult)
		if result == expectedResult:
			sys.exit(0)
		else:
			utils.fail()

