#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

from optparse import OptionParser
import os
import sys
import boto
from boto.ec2 import regions
from boto.vpc import VPCConnection

def main():
	# option parser
	usage = '''%s [options] ''' % sys.argv[0]
	parser = OptionParser(usage=usage)
	parser.add_option("-r", "--region", action="store",
			dest="region", default='eu-west-1', help="EC region")
	parser.add_option("-a", "--ami", action="store",
			dest="amis", help="Comma-separated ist of AMIs to terminate")
	parser.add_option("-f", "--force", action="store_true",
			dest="force", default=False, help="Don't ask")

	(options, args) = parser.parse_args()

	if not options.amis:
		print 'At least one AMI is required, use -a X-XXXXXXXX'
		sys.exit(2)
		
	# config parser
	aws_cfg = {}

	for region in regions(**aws_cfg):
		if region.name == options.region:
			aws_cfg['region'] = region
			break

	ec2 = boto.connect_ec2(**aws_cfg)
	reservations = ec2.get_all_instances(instance_ids=options.amis.split(','))
	instances = [i for r in reservations for i in r.instances]
	for instance in instances:
		name = instance.tags.get('Name')
		print 'Name:   %s' % instance.tags.get('Name')
		print 'IP:     %s' % instance.ip_address
		print 'AMI:    %s' % instance.id
		print 'Status: %s' % instance.state
		print 'Key:    %s' % instance.key_name
		res = raw_input(' : Terminate this instance (Y|n)? ')
		if options.force or not res or res in ['Y', 'y']:
			instance.terminate()
		else:
			print 'Skipping ...'


if __name__ == '__main__':
	main()

