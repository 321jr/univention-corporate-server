#!/usr/bin/python
# -*- coding: utf-8 -*-
# vim:set shiftwidth=4 tabstop=4:
"""
Run ucs-test in cloud.
"""
#
# Copyright 2013 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

from optparse import OptionParser
import os
import logging

try:
	import python.ec2.lib as univention_ec2_lib
	from python.ec2.lib import _print_done, _print_process
except ImportError:
	import univention.ec2.lib as univention_ec2_lib
	from univention.ec2.lib import _print_done, _print_process

def main():
	"""
	Create EC2 instances for testing.
	"""

	usage = '''%prog% [options] -c config_file '''
	parser = OptionParser(usage=usage)
	parser.add_option("-c", "--conf", action="store",
			dest="config_file", help="Config file")

	(options, _args) = parser.parse_args()

	if not options.config_file:
		parser.error('fail: -c config_file is required')
	if not os.path.exists(options.config_file):
		parser.error('fail: "%s" does not exist' % options.config_file)

	# config parser
	_print_process('Parse options and config files')
	config = univention_ec2_lib.Parser()
	config.set_filename(options.config_file)
	config.read(options.config_file)
	_print_done()

	# The paramiko module uses the logging module
	logging.basicConfig(level=logging.WARNING)

	_print_process('Checking for ~/.boto')
	if os.path.exists(os.path.expanduser('~/.boto')):
		_print_done()
	else:
		_print_done('fail: See http://code.google.com/p/boto/wiki/BotoConfig or https://hutten.knut.univention.de/mediawiki/index.php/UCS_EC2_Tools#.boto_Datei)')

	vms = []
	for host in config.hosts():
		_print_process('Creating VM [%s]' % host)
		vms.append( univention_ec2_lib.VM_EC2(host, config) )
		_print_done()

	# start instances
	for vm in vms:
		_print_process('Starting VM %s' % vm.get_name())
		vm.start()
		_print_done('done (IP: %s)' % vm.get_ip())

	# conenct to instances
	for vm in vms:
		_print_process('Connect to VM %s' % vm.get_name())
		vm.connect()
		_print_done()

	# replace profile variables and commands
	replace_list = [('[%s_IP]' % (vm.section,), vm.get_ip()) for vm in vms]
	for vm in vms:
		if vm.profile:
			for (host_str, ip) in replace_list:
				vm.profile = vm.profile.replace(host_str, ip)
		for i in range(len(vm.commands)):
			for (host_str, ip) in replace_list:
				vm.commands[i] = [cmd.replace(host_str, ip) for cmd in vm.commands[i]]

	# create profiles
	for vm in vms:
		_print_process('Create profile for VM %s' % vm.get_name())
		vm.create_profiles()
		_print_done()

	# copy files
	for vm in vms:
		_print_process('Copy files to VM %s' % vm.get_name())
		vm.copy_files()
		_print_done()

	# run commands
	max_command = max((_.command_count() for _ in vms))
	for phase in range(max_command):
		for vm in vms:
			print 'Running command phase (%d/%d) on VM %s' % (phase + 1, max_command, vm.get_name())
			vm.run_commands(phase)

if __name__ == '__main__':
	main()
