#!/usr/bin/python
# -*- coding: utf-8 -*-
# vim:set shiftwidth=4 tabstop=4:
"""
Run ucs-test in local KVM test environment.
"""
#
# Copyright 2013-2015 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

from optparse import OptionParser
import os
import sys
import logging

try:
	import python.ec2.lib as univention_ec2_lib
	from python.ec2.lib import _print_done, _print_process, check_missing_files, each_vm
except ImportError:
	import univention.ec2.lib as univention_ec2_lib
	from univention.ec2.lib import _print_done, _print_process, check_missing_files, each_vm


def main():
	"""
	Create KVM instances for testing.
	"""

	usage = '''%prog [options] [-c] config_file'''
	description = sys.modules[__name__].__doc__
	parser = OptionParser(usage=usage, description=description)
	parser.add_option("-c", "--conf", action="store",
			dest="config_file", help="Config file")
	parser.add_option(
		"-p", "--parallel", action="store_true",
		dest="parallel", help="Run commands in parallel")
	parser.add_option(
		"-d", "--debug", action="store_true",
		dest="debug", help="Enable debug output")
	parser.add_option(
		"-t", "--terminate", action="store_true",
		dest="terminate", help="Terminate VMs after run")

	(options, args) = parser.parse_args()

	try:
		config_file, = [options.config_file] if options.config_file else args
	except ValueError:
		parser.error('-c config_file is required')
	if not os.path.exists(config_file):
		parser.error('"%s" does not exist' % config_file)

	# config parser
	_print_process('Parse options and config files')
	config = univention_ec2_lib.Parser()
	config.set_filename(config_file)
	config.read(config_file)
	_print_done()

	# The paramiko module uses the logging module
	logging.basicConfig(stream=sys.stderr, level=logging.DEBUG if options.debug else logging.WARNING)

	vms = []
	for host in config.hosts():
		_print_process('Creating VM [%s]' % host)
		vms.append( univention_ec2_lib.VM_KVM(host, config) )
		_print_done()

	check_missing_files(vms)

	def start_vm(vm):
		_print_process('Starting VM %s' % vm.get_name())
		vm.start()
		_print_done('done (IP: %s)' % vm.get_ip())
	each_vm(vms, False, start_vm)

	def connect_vm(vm):
		_print_process('Connect to VM %s' % vm.get_name())
		vm.connect()
		_print_done()
	each_vm(vms, options.parallel, connect_vm)

	# replace profile variables and commands
	replace_list = [('[%s_IP]' % (vm.section,), vm.get_ip()) for vm in vms]
	replace_list += [('[ENV:%s]' % (key,), value) for (key, value) in os.environ.iteritems()]
	subst = lambda cmd, (old, new): cmd.replace(old, new)
	for vm in vms:
		if vm.profile:
			vm.profile = reduce(subst, replace_list, vm.profile)
		vm.commands = dict(
			(phase, [reduce(subst, replace_list, cmd) for cmd in commands])
			for phase, commands in vm.commands.iteritems()
		)

	def create_profile(vm):
		_print_process('Create profile for VM %s' % vm.get_name())
		vm.create_profiles()
		_print_done()
	each_vm(vms, options.parallel, create_profile)

	def copy_files(vm):
		_print_process('Copy files to VM %s' % vm.get_name())
		vm.copy_files()
		_print_done()
	each_vm(vms, options.parallel, copy_files)

	max_command = max((_.command_count() for _ in vms))
	for phase in range(1, max_command + 1):
		def run_command(vm):
			print 'Running command phase (%d/%d) on VM %s' % (phase, max_command, vm.get_name())
			vm.run_commands(phase)
		each_vm(vms, options.parallel, run_command)

	def terminate_vm(vm):
		_print_process('Terminating VM %s' % vm.get_name())
		vm.terminate()
		_print_done()
	if options.terminate:
		each_vm(vms, options.parallel, terminate_vm)


if __name__ == '__main__':
	main()
