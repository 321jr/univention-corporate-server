[Global]
kvm_server: KVM_BUILD_SERVER
kvm_user: build
kvm_architecture: amd64
kvm_ucsversion: 4.2-0
kvm_template: generic-unsafe
kvm_interface: eth0

[installer-controller]
logfile: ucs-installer-test-controller.log
profile:
    hostname="installer-controller"
    domainname="installertest.local"
    ldap/base="dc=installertest,dc=local"
    root_password="univention"
    server/role="domaincontroller_master"
    interfaces/eth0/address="10.200.36.200"
    interfaces/eth0/netmask="255.255.255.0"
    gateway="10.200.36.1"
    nameserver1="192.168.0.3"
command1:
    ip -4 addr flush dev eth0
    ip addr replace "10.200.36.200/24" dev eth0
    ip route replace default via 10.200.36.1
    . utils.sh; basic_setup
command2:
    ssh frosta "touch I_did_it"
#    . utils.sh; run_setup_join
#    ucr set repository/online/unmaintained='yes' update/secure_apt='no'
#    echo "deb http://192.168.0.10/build2/ ucs_4.1-0-internal/all/" >> /etc/apt/sources.list
#    echo "deb http://192.168.0.10/build2/ ucs_4.1-0-internal/\$(ARCH)/" >> /etc/apt/sources.list
#    univention-install python-vnc-automate
#command3:
#    # Tell Jenkins to create the target VM now.
#    echo "JENKINS TRIGGER: start target"
#    # Wait until target VM started and it's VNC connection is available.
#    # Copy the VNC connection from the target VM.
#command4:
#    # Run the control script, passing the connection to it.
#    # TODO: save result (success or fail)
#    python 00_master-de.py "$(cat vnc_connection)"
#command5:
#    # Terminate controlled VM
#    # If the control script ran through:
#    #     - Exit with 1.
#    # Else:
#    #     - Exit with 0.
files:
    examples/jenkins/utils/utils.sh /root/
    installer_test/vminstall/*py /root/vminstall
    installer_test/00_master-de.py /root/
