#!/usr/bin/python
import argparse
import sys
from time import time, localtime, strftime
from os import path
from univention.testing.codes import TestCodes
from univention.testing.license_client import TestLicenseClient, CredentialsMissing


def parse_args():
    parser = argparse.ArgumentParser(description='Create an UCS license file.')
    parser.add_argument('ldap_base', help='The LDAP-base which the license file is generated for.')
    parser.add_argument('--license-file', dest='license_file', required=True, help='Path to place the generated license file at.')
    parser.add_argument('--secret-file', dest='secret_file', default='/var/lib/jenkins/ec2/license/license.secret', help='Path to the file containing the password.')
    parser.add_argument('--force-renewal', dest='force_renewal', action='store_true', help='Generate a new license file, even if there is already a valid one.')
    return parser.parse_args()


class JenkinsTestLicenseClient(TestLicenseClient, object):
    def __init__(self, secret_file, ArgParser=None):
        super(JenkinsTestLicenseClient, self).__init__(ArgParser)
        self.secret_file = secret_file

    def get_server_password(self, secret_file='legacy'):
        """
        Opens and reads the 'secret_file'. Saves the result to a
        'self.server_password'
        """
        self.log.debug("In 'get_server_password': secret_file='%s'"
                       % self.secret_file)
        if not path.exists(self.secret_file):
            self.log.critical("The '%s' secret file does not exist, cannot "
                              "proceed without password" % secret_file)
            raise CredentialsMissing("The '%s' secret file does not exist"
                                     % self.secret_file)
        try:
            with open(self.secret_file, 'r') as password:
                self.server_password = password.read()
        except (IOError, ValueError) as exc:
            self.log.exception("Failed to get the password from the '%s', "
                               "an error occured: %r"
                               % (self.secret_file, exc))
            exit(1)
        if not self.server_password:
            self.log.critical("The password to access the license service "
                              "cannot be empty")
            exit(1)


def get_valid_license(ldap_base, secret_file, license_file):
    """
    Gets a valid test-license by ordering and downloading it from the
    licensing server via LicenseClient tool
    """
    print("\nObtaining a valid license for the test:")
    end_date = time()
    end_date += 2630000  # approx. amount of seconds in 1 month
    end_date = strftime('%d.%m.%Y', localtime(end_date))

    LicenseClient = JenkinsTestLicenseClient(secret_file)
    try:
        LicenseClient.main(base_dn=ldap_base,
                           end_date=end_date,
                           license_file=license_file)
    except CredentialsMissing as exc:
        print("\nMissing a secret file with password to order a license: "
              "%r" % exc)
        sys.exit(TestCodes.REASON_INSTALL)

if __name__ == '__main__':
    args = parse_args()
    # if args.force_renewal or not does_valid_license_exist(args.license_file):
    get_valid_license(
        ldap_base=args.ldap_base,
        secret_file=args.secret_file,
        license_file=args.license_file
    )
