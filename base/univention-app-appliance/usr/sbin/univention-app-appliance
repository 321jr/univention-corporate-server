#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
#
# Univention App Appliance
#   Apply App Appliance specific configuration and branding to different parts of UCS.
#
# Copyright 2016 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

import sys
import os
import shutil
import requests
from glob import glob
from subprocess import call
from univention.app_appliance import AppManager, get_luminance
from univention.config_registry.frontend import ucr_update
from univention.config_registry import ConfigRegistry

UCR = ConfigRegistry()


def branding_resources_base_url(app_id, version):
	protocol = 'https://'
	if '://' in UCR.get('repository/app_center/server'):
		protocol = ''
	return '{protocol}{server}/meta-inf/{version}/{app}'.format(
		protocol=protocol,
		server=UCR.get('repository/app_center/server'),
		version=UCR.get('version/version'),
		app=app_id
	)


def download_resource(app, resource, dest_path):
	resource_url = "{app_url}/{res_name}".format(
		app_url=branding_resources_base_url(app.id, app.version),
		res_name=resource)
	try:
		req = requests.head(resource_url, timeout=5)
		if req.status_code < 400:
			req = requests.get(resource_url)
			with open(dest_path, 'wb') as handle:
				for block in req.iter_content(8192):
					handle.write(block)
			print 'Successfully downloaded %s' % resource_url
	except (IOError, requests.HTTPError, requests.ConnectionError, requests.Timeout):
			print 'WARNING: Failed to download %s' % resource_url


def print_status(message):
	print('univention-app-appliance: %s' % message)


def set_appliance_ucr_values(app):
	UCR.load()
	ucr_update(UCR, {
		'system/setup/boot/pages/blacklist': app.appliance_pages_blacklist,
		'system/setup/boot/fields/blacklist': app.appliance_fields_blacklist,
		'repository/app_center/blacklist': app.appliance_blacklist,
		'repository/app_center/whitelist': app.appliance_whitelist,
		'umc/web/appliance/id': app.id,
		'umc/web/appliance/name': app.name,
		'umc/web/appliance/fast_setup_mode': str(app.appliance_allow_preconfigured_setup).lower(), # convert bool value to ('true', 'false')
		'grub/title': "Start %s Univention App" % app.name,
		'appliance/apps/%s/version' % app.id: app.version,
		'appliance/apps/%s/notifyVendor' % app.id: str(app.notify_vendor),
	})


def main(app_id):
	# query app information
	app = AppManager.find(app_id)
	if not app:
		return

	set_appliance_ucr_values(app)

	# query color information
	css_background = app.appliance_css_background
	primary_color = app.appliance_primary_color
	secondary_color = app.appliance_secondary_color
	theme = 'light'
	if primary_color and get_luminance(primary_color) < .5:
		theme = 'dark'
	category_logo = app.appliance_umc_category_logo or app.appliance_welcome_screen_logo

	# adjust colors in SVG images via search and replace
	print_status('Adjusting colors of UMC images.')
	for src_path in glob('/usr/share/univention-app-appliance/images/*.svg'):
		filename = os.path.basename(src_path)
		dest_path = os.path.join('/usr/share/univention-management-console-frontend/js/umc/modules/setup/', filename)
		if secondary_color:
			with open(src_path, 'r') as in_file:
				with open(dest_path, 'w') as out_file:
					for line in in_file:
						out_file.write(line.replace('#ff00ff', secondary_color))
		else:
			# use original SVG files as fallback
			src_path = '%s.real' % dest_path
			shutil.copy(src_path, dest_path)

	def symlink_first_steps():
		for lang in ['', '_DE']:
			source = '/var/cache/univention-appcenter/%s.README%s' % (app.component_id, lang)
			target = '/var/www/univention-management-console/js/umc/modules/appliance/appliance_first_steps.README%s' % (lang,)
			if os.path.exists(target):
				print("Remove old first steps symlink")
				try:
					os.remove(target)
				except OSError:
					pass
			print("Symlink first steps from %s to %s" % (source, target,))
			if os.path.exists(source):
				os.symlink(source, target)

	def set_grub_theme():
		ucr_vars = {
			'grub/backgroundimage': '/boot/grub/uniboot.png',
			'grub/color/highlight': 'white/green',
			'grub/color/normal': 'black/black',
			'grub/menu/color/highlight': 'white/green',
			'grub/menu/color/normal': 'black/black',
			'bootsplash/theme': 'ucs',
		}
		if primary_color and css_background and app.appliance_umc_header_logo and app.appliance_welcome_screen_logo and app.appliance_bootsplash_logo:
			# only set branded grub theme if all necessary images are specified
			call(['/usr/share/univention-app-appliance/render-css-background', '1600x1200', css_background, '/usr/share/plymouth/themes/ucs-appliance-%s/bg.png' % theme])
			if theme == 'dark':
				grub_color = 'white/black'
			elif theme == 'light':
				grub_color = 'black/black'
			ucr_vars = {
				'grub/backgroundimage': '/usr/share/plymouth/themes/ucs-appliance-%s/bg.png' % (theme,),
				'grub/color/highlight': grub_color,
				'grub/color/normal': grub_color,
				'grub/menu/color/highlight': grub_color,
				'grub/menu/color/normal': grub_color,
				'bootsplash/theme': 'ucs-appliance-%s' % (theme,),
			}
		ucr_update(UCR, ucr_vars)

	def _svg_to_png(source, dest, params, res='800x600'):
		css_background = 'url(file:///{source}) {params}'.format(source=source, params=params)
		call(['/usr/share/univention-app-appliance/render-css-background', res, css_background, dest])

	symlink_first_steps()

	# download image files for the app appliance
	print_status('Downloading images.')
	if app.appliance_logo:
		logo = '/usr/share/univention-management-console-frontend/js/umc/modules/setup/welcome.svg'
		download_resource(app, app.appliance_logo, logo)
		logo_copy = '/var/www/icon/%s' % app.appliance_logo
		shutil.copy(logo, logo_copy)
		os.chmod(logo_copy, 0644)
		ucr_update(UCR, {'umc/web/appliance/logo': '/icon/%s' % app.appliance_logo})

	if app.appliance_umc_header_logo:
		# UMC
		umc_header = '/usr/share/univention-management-console-frontend/js/dijit/themes/umc/images/appliance_header_logo.svg'
		download_resource(app, app.appliance_umc_header_logo, umc_header)

		# system-activation needs that resource too
		shutil.copy(umc_header, '/usr/share/univention-system-activation/www/css/icons/appliance_header_logo.svg')

		# welcome-screen (plymouth) needs it as png
		params = 'no-repeat; background-size: auto 28px; background-position: left center;'
		_svg_to_png(umc_header,
				'/usr/share/plymouth/themes/ucs-appliance-%s/logo_header_welcome_screen.svg.png' % theme,
				params,
				'400x30')

	if app.appliance_welcome_screen_logo:
		img = '/usr/share/plymouth/themes/ucs-appliance-%s/logo_welcome_screen.svg' % theme
		download_resource(app, app.appliance_welcome_screen_logo, img)
		params = 'no-repeat; background-size: contain; background-position: center center;'
		_svg_to_png(img, img + '.png', params, '120x120')

	if app.appliance_bootsplash_logo:
		img = '/usr/share/plymouth/themes/ucs-appliance-%s/logo_bootsplash.svg' % theme
		download_resource(app, app.appliance_bootsplash_logo, img)
		params = 'no-repeat; background-size: contain; background-position: center center;'
		_svg_to_png(img, img + '.png', params)

	if category_logo:
		download_resource(app, category_logo,
			'/usr/share/univention-management-console-frontend/js/dijit/themes/umc/icons/scalable/category-appliance.svg')

	print_status("Applying branded boot splash and grub theme.")
	set_grub_theme()

if __name__ == '__main__':
	if '-h' in sys.argv[1:] or '--help' in sys.argv[1:]:
		print("Apply initial settings for Univention App Appliances.")
		print("")
		print("usage: univention-app-appliance [App ID]")
		sys.exit()

	main(sys.argv[1])
