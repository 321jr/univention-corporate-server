#!/usr/bin/python2.6
#
# Univention Quota
#  read default quota-settings and write into quota-table
#
# Copyright 2004-2013 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.


import sys
import os
import re
import subprocess
import pwd
import copy
import time
import univention.config_registry
import univention.uldap
import univention.lib.policy_result

def get_blocks(size):
	size = size.upper()

	if size.endswith('KB'):
		return int(size.strip('KB'))
	if size.endswith('MB'):
		return int(size.strip('MB')) * 1024
	if size.endswith('GB'):
		return int(size.strip('GB')) * 1024 * 1024
	if size.endswith('B'):
		return int(size.strip('B')) / 1024
	if int(size[-1]) in range(0, 10):
		return int(size) / 1024

def get_shares():
	lo = univention.uldap.getMachineConnection(ldap_master=False)
	shares = {}
	for dn, attrs in lo.search( filter='(&(objectClass=univentionShare)(univentionShareHost=%s.%s))' % (ucr.get('hostname', ''), ucr.get('domainname', '')), attr=['univentionSharePath'] ):
		policy_result = univention.lib.policy_result.policy_result(dn)[0]
		shares[ attrs['univentionSharePath'][0] ] = {
				'inodeSoftLimit': int( policy_result.get('univentionQuotaSoftLimitInodes', ['0'])[0] ),
				'inodeHardLimit': int( policy_result.get('univentionQuotaHardLimitInodes', ['0'])[0] ),
				'spaceSoftLimit': get_blocks( policy_result.get('univentionQuotaSoftLimitSpace', ['0'])[0] ),
				'spaceHardLimit': get_blocks( policy_result.get('univentionQuotaHardLimitSpace', ['0'])[0] )
			}
	return shares

def get_quota_mountpoints(user):
	mountpoints = {}
	quota = subprocess.Popen(['quota', '-v', '-w', '-u', user], stdout=subprocess.PIPE)
	quota.wait()
	quota = quota.stdout.readlines()
	whitespace =  re.compile('\s+')
	with open('/etc/mtab') as mtab:
		for line in mtab:
			if 'usrquota' in line:
				try:
					filesystem = whitespace.split(line)[0]
					quota_re = re.compile(r'^\s*%s\s+[0-9]+\s+0\s+0\s+[0-9]+\s+0\s+0\s*$' % filesystem)
					for quota_line in quota:
						if re.match(quota_re, quota_line):
							mountpoints[whitespace.split(line)[1]] = {
								'inodeSoftLimit': 0,
								'inodeHardLimit': 0,
								'spaceSoftLimit': 0,
								'spaceHardLimit': 0,
							}
							break
					else:
						log.write('quota for fs %s already set\n' % filesystem)
				except IndexError:
					pass
	return mountpoints




if __name__ == '__main__':
	if '-h' in sys.argv or '--help' in sys.argv:
		print '%s - write user quota from shares into quota-table' % sys.argv[0]
		print 'Usage: %s [username]' % sys.argv[0]
		print '    username defaults to $USER\n'
		print 'Example:'
		print '  %s someuser' % sys.argv[0]
		print '     set up quota for someuser'
		print '  %s' % sys.argv[0]
		print '     set up quota for $USER'
		sys.exit(0)

	ucr = univention.config_registry.ConfigRegistry()
	ucr.load()
	log = open(ucr.get('quota/logfile', '/dev/null'), 'a+')
	TIMEFORMAT = '%a %b %d %H:%M:%S %Z %Y'
	user = sys.argv[1] if len(sys.argv) > 1 else os.environ['USER']
	uid = pwd.getpwnam(user)[2]

	log.write('-------------------------------------------------------- start\n')
	log.write('%s\n' % time.strftime(TIMEFORMAT))
	if uid < 1000:
		log.write('won\'t set quota for system-users (%s has UID %i)\n' % (user, uid))
		sys.exit(1)
	log.write('set default quota for %s\n' % user)
	log.write( 'host is %s.%s\n' % (ucr.get('hostname', ''), ucr.get('domainname', '')) )

	mountpoints = get_quota_mountpoints(user)
	shares = get_shares()
	if not mountpoints:
		log.write('all quotas are already set\n')
	elif not shares:
		log.write('no shares found\n')
	else:
		log.write( 'found %i shares and %i mountpoints\n' % (len(shares), len(mountpoints)) )
		for mountpoint_path, mountpoint in mountpoints.items():
			# find corresponding share for that mount point
			corresponding_share = ''
			for share_path in shares:
				if share_path.startswith(mountpoint_path) and len(share_path.split('/')) > len(corresponding_share.split('/')):
					corresponding_share = share_path

			if corresponding_share:
				log.write('use %s for mointpoint %s\n' % (corresponding_share, mountpoint_path))
				mp = copy.deepcopy(mountpoint)

				# only use shares settings for mountpoint if they're more restrictive than the mountpoint ones
				for limit in mp:
					if mp[limit] == 0 or shares[corresponding_share][limit] < mp[limit]:
						mp[limit] = shares[corresponding_share][limit]

				if mp['spaceSoftLimit'] != 0 or mp['spaceHardLimit'] != 0 or mp['inodeSoftLimit'] != 0 or mp['inodeHardLimit'] != 0:
					log.write('/usr/sbin/setquota -u %s %i %i %i %i %s\n' % (user, mp['spaceSoftLimit'], mp['spaceHardLimit'], mp['inodeSoftLimit'], mp['inodeHardLimit'], mountpoint_path))
					set_quota = subprocess.Popen(['/usr/sbin/setquota', '-u', user, str(mp['spaceSoftLimit']), str(mp['spaceHardLimit']), str(mp['inodeSoftLimit']), str(mp['inodeHardLimit']), mountpoint_path])
					set_quota.wait()
				else:
					log.write('no quota for %s\n') % mountpoint_path

	log.write('-------------------------------------------------------- exit\n')
