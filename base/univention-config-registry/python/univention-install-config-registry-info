#!/usr/bin/python2.4
# -*- coding: utf-8 -*-
#
# Univention Configuration Registry
#  install configuration registry information files
#
# Copyright (C) 2007-2010 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# Binary versions of this file provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

import os, sys, string
import univention.config_registry_info as ucr_info

def doIt(argv):
	print '%s' % string.join(argv, ' ')
	os.spawnvp(os.P_WAIT, argv[0], argv)

def binary_packages():
	_prefix = 'Package: '
	packages = []
	fp = open( 'debian/control' )
	for line in fp.readlines():
		if not line.startswith( _prefix ):
			continue
		packages.append( line[ len( _prefix ) :  -1 ] )
	fp.close()
	return packages

if __name__ == '__main__':
	info = ucr_info.ConfigRegistryInfo( install_mode = True )
	for package in binary_packages():
		# package's conffiles
		conffilename = os.path.join( 'debian', package + '.conffiles' )
		try:
			current_conffiles = open( conffilename ).readlines()
		except IOError:
			current_conffiles = []

		conffiles = open( conffilename, 'a' )

		# categories
		source = os.path.join( 'debian', package + '.univention-config-registry-categories' )
		if os.path.exists( source ):
			info.read_categories( source )
			failed = info.check_categories()
			if failed:
				print >>sys.stderr, 'The following category definitions are invalid: %s' % \
					  ', '.join( failed )
				sys.exit( 1 )
			dest_path = os.path.join( 'debian', package, ucr_info.ConfigRegistryInfo.BASE_DIR[ 1 : ],
									  ucr_info.ConfigRegistryInfo.CATEGORIES )
			dest = os.path.join( dest_path, package + '.cfg' )

			doIt(['install', '-m', '755', '-d', dest_path])
			doIt(['install', '-m', '644', source, dest])

			real_conffile = os.path.join( ucr_info.ConfigRegistryInfo.BASE_DIR,
										  ucr_info.ConfigRegistryInfo.CATEGORIES,
										  package + '.cfg' )
			if not real_conffile + '\n' in current_conffiles:
				conffiles.write( real_conffile + '\n' )

		# variables
		source = os.path.join( 'debian', package + '.univention-config-registry-variables' )
		if not os.path.exists( source ):
			continue

		info.read_variables( source )
		failed = info.check_variables()
		if failed:
			print >>sys.stderr, 'The following variable definition are invalid: %s' % \
				  ', '.join( failed )
			sys.exit( 1 )
		dest_path = os.path.join( 'debian', package, ucr_info.ConfigRegistryInfo.BASE_DIR[ 1 : ],
								  ucr_info.ConfigRegistryInfo.VARIABLES )
		dest = os.path.join( dest_path, package + '.cfg' )

		doIt(['install', '-m', '755', '-d', dest_path])
		doIt(['install', '-m', '644', source, dest])

		real_conffile = os.path.join( ucr_info.ConfigRegistryInfo.BASE_DIR,
									  ucr_info.ConfigRegistryInfo.VARIABLES,
									  package + '.cfg' )
		if not real_conffile + '\n' in current_conffiles:
			conffiles.write( real_conffile + '\n' )

		# close files
		conffiles.close()
