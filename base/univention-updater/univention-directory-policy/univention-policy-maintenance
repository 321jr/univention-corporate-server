#!/usr/bin/python2.4
#
# Univention Updater
#  read the maintenance settings
#
# Copyright 2004-2010 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

import os, string, sys
import tempfile
import univention_baseconfig

# Name of the cron.d file
CRON_D='/etc/cron.d/univention-maintenance'

def write_cron_job(baseConfig, cron, updateto, reboot):
	file=open(CRON_D, 'w')
	file.write('# cron job for update\n')
	if cron != '* * * * * ':
		file.write('%s root ' % cron)
		if baseConfig.get( 'local/repository', 'no' ).lower() in ( 'yes', 'true' ):
			target='local'
		else:
			target='net'
		if updateto:
			updateto='--updateto=%s' % updateto
		if reboot:
			reboot='--reboot=%s' % reboot
		file.write('/usr/sbin/jitter 600 /usr/sbin/univention-updater %s %s %s --silent; ' % (target, updateto, reboot))
		file.write('/usr/sbin/jitter 600 /usr/sbin/univention-actualise --dist-upgrade --silent; ')
		file.write('/usr/sbin/jitter 600 /usr/sbin/univention-security-update %s --silent\n' % target)
	file.close()


baseConfig=univention_baseconfig.baseConfig()
baseConfig.load()

if os.path.exists(CRON_D):
	os.unlink(CRON_D)

if baseConfig.has_key('ldap/hostdn') and baseConfig['ldap/hostdn']:
	tempfile=tempfile.mktemp()

	result=os.system('univention_policy_result -s "%s" >>%s' %  (baseConfig['ldap/hostdn'], tempfile))

	if result != 0:
		print 'failed to execute univention_policy_result'
		sys.exit(result)

	file=open(tempfile, 'r')

	updateto=''
	cron_active=''
	reboot=''
	cron=None

	for line in file.readlines():
		line=line.strip(' ').strip('\n')
		if line.startswith('univentionCronActive='):
			cron_active=line.replace('univentionCronActive=', '').replace('"','')
		elif line.startswith('univentionCron='):
			cron=line.replace('univentionCron=', '').replace('"','')
		elif line.startswith('univentionUpdateVersion='):
			updateto=line.replace('univentionUpdateVersion=', '').replace('"','')
		elif line.startswith('univentionInstallationReboot='):
			reboot=line.replace('univentionInstallationReboot=', '').replace('"','')

	file.close()

	if cron_active and cron_active == '1':
		if cron:
			write_cron_job(baseConfig, cron, updateto, reboot)

	os.remove(tempfile)

sys.exit(0)
