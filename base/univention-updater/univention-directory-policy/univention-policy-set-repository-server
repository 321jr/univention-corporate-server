#!/usr/bin/python2.4
#
# Univention Updater
#  read the repository server
#
# Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# Binary versions of this file provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

import os
import sys
import univention_baseconfig

baseConfig=univention_baseconfig.baseConfig()
baseConfig.load()

def exit(result, message = None):
	script = os.path.basename(sys.argv[0])
	if message:
		print '%s: %s' % (script, message)
	sys.exit(result)

def query_policy(dn, update):
	server = None
	policy = 'univention_policy_result'
	pipe = os.popen('%s -s "%s"' % (policy, dn))
	for line in pipe:
		line = line.strip()
		if line.startswith('univentionRepositoryServer='):
			server = line.split('=', 1)[1].split('"',2)[1]
		elif line.startswith('univentionUpdateVersion='):
			update = line.split('=', 1)[1].split('"',2)[1]
	result = pipe.close()
	if result is not None:
		exit(result, "FAIL: failed to execute `%s'" % policy)
	if server and server.startswith('http://'):
		server = server.replace('http://', '', 1)
	return (server, update)

def main():
	restore_server = None
	hostdn = baseConfig.get( 'ldap/hostdn', None )
	online_server = baseConfig.get( 'repository/online/server', None )
	mirror_server = baseConfig.get( 'repository/mirror/server', None )
	local_repo = baseConfig.get( 'local/repository', None ) in ('yes', 'true')
	fqdn  = '%s.%s' % (baseConfig['hostname'], baseConfig['domainname'])
	update = '%s-%s' % (baseConfig['version/version'], baseConfig['version/patchlevel'])
	# ldap_host_dn, old_server, local_server, local_repo, fqdn, update = query_baseconfig()

	ucr_variables = []
	if not hostdn:
		# can't query policy without host-dn
		exit(0)

	new_server, update = query_policy( hostdn, update )
	# without a local repository
	if not local_repo:
		if not new_server or new_server == online_server:
			# no new server specified
			exit(0)
		else:
			ucr_variables.append( [ 'repository/online/server=%s' % new_server ] )
	else:
		# on a repository server
		if not new_server:
			ucr_variables.append( [ 'repository/online/server?%s' % fqdn ] )
		elif new_server != mirror_server:
			ucr_variables.append( [ 'repository/mirror/server=%s' % new_server ] )

	univention_baseconfig.handler_set( ucr_variables )

if __name__ == '__main__':
	main()
