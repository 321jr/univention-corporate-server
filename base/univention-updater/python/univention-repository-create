#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Univention Updater
#  creates a repository
#
# Copyright (C) 2004-2009 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# Binary versions of this file provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

import os
from optparse import OptionParser
import shutil
import subprocess
import sys

import univention.config_registry as ucr
import univention.updater.repository as urepo

configRegistry = ucr.ConfigRegistry()
configRegistry.load()

_mirror_base = configRegistry.get( 'repository/mirror/basepath', '/var/lib/univention-repository' )
_repo_base = os.path.join( _mirror_base, 'mirror', configRegistry.get( 'version/version' ), 'maintained', '%s-0' % configRegistry.get( 'version/version' ) )

def check_preconditions( options ):
	# check directories
	if os.path.exists( os.path.join( _mirror_base, 'mirror' ) ):
		print >> sys.stderr, 'Warning: The path %s/mirror already exists.' % _mirror_base

	if options.interactive:
		print "Are you sure you want to create a local repository? [yN] ",
		sys.stdin.flush()
		if not sys.stdin.readline().startswith( 'y' ):
			print 'Aborted.'
			sys.exit( 1 )

	ret, msg = urepo.is_debmirror_installed()
	if not ret:
		print >> sys.stderr, msg
		sys.exit( 1 )

def  prepare( options ):
	# set local/repository
	if configRegistry.get( 'local/repository', 'no' ) != 'yes':
		ucr.handler_set( [ 'local/repository=yes' ] )
		configRegistry.load()
	else:
		print >> sys.stderr, "Warning: Univention Configuration Registry variable local/repository is already set to yes"

	# create directory structure
	try:
		os.makedirs( _repo_base )
	except OSError, e:
		# already exists -> ignore
		if e.errno != 17:
			raise e
	for arch in urepo.ARCHITECTURES:
		try:
			os.makedirs( os.path.join( _repo_base, arch ) )
		except OSError, e:
			# already exists -> ignore
			if e.errno != 17:
				raise e

def copy_repository( options ):
	print 'Copying data. Please be patient ...'

	print '  copying version information ...',
	try:
		shutil.copy2( os.path.join( options.mount_point, '.univention_install' ), _mirror_base )
	except:
		print 'failed.'
	print 'done.'

	# copy kernel and grub config
	print '  copying kernel and boot configuration ...',
	boot_dest = os.path.join( _mirror_base, 'boot' )
	if os.path.isdir( boot_dest ):
		shutil.rmtree( boot_dest )
	try:
		shutil.copytree( os.path.join( options.mount_point, 'boot' ), boot_dest )
	except shutil.Error, e:
		print "failed (%s)." % str( e )
	else:
		print 'done.'

	# copy profiles
	print '  copying profiles ...',
	profiles_dest = os.path.join( _mirror_base, 'profiles' )
	if os.path.isdir( profiles_dest ):
		shutil.rmtree( profiles_dest )
	try:
		shutil.copytree( os.path.join( options.mount_point, 'profiles' ), profiles_dest )
	except shutil.Error, e:
		print "failed (%s)." % str( e )
	else:
		# everyone should be able to read the profiles
		os.chmod( profiles_dest, 0555 )
		print 'done.'

	# copy packages to new directory structure
	print '  copying packages ...',
	sys.stdout.flush()
	urepo.copy_package_files( os.path.join( options.mount_point, 'packages' ), _repo_base )
	print "done."

	# copy dists directory structure
	print '  copying dists ...',
	dists_dest = os.path.join( _repo_base, 'dists' )
	if os.path.isdir( dists_dest ):
		shutil.rmtree( dists_dest )
	try:
		shutil.copytree( os.path.join( options.mount_point, 'packages', 'dists' ), dists_dest )
	except shutil.Error, e:
		print "failed (%s)." % str( e )
	else:
		print 'done.'

def mount( options ):
	if options.interactive:
		# ask user to insert cdrom
		print 'Please insert a UCS installation medium and press <Enter>',
		sys.stdin.readline()
	if options.mount:
		print "Mounting %s ..." % options.mount_point,
		devnull = open( os.path.devnull, 'w' )
		ret = subprocess.call( [ 'mount', options.mount_point ], stdout = devnull, stderr = subprocess.STDOUT )
		# if exit code is 0 or 32 (already mounted)
		devnull.close()
		if not ret or ret == 32:
			print 'done.'
		else:
			print 'failed.'
			return False

	print "Checking medium in %s ..." % options.mount_point,
	if not os.path.isdir( os.path.join( options.mount_point, 'packages' ) ) or not os.path.isdir( os.path.join( options.mount_point, 'profiles' ) ):
		print 'failed.'
		print >> sys.stderr, 'Error: This is not an UCS installation medium.'
		return False

	print 'ok.'
	return True

def setup_repository( options ):
	urepo.update_indexes( _repo_base, dists = True )

def setup_pxe( options ):
	'''setup network installation (PXE)'''
	isodir = '/var/lib/univention-repository/isolinux'
	bootdir = '/var/lib/univention-repository/boot'
	if not os.path.isdir( isodir ):
		os.mkdir( isodir )
	if not os.path.exists( os.path.join( isodir, 'linux' ) ):
		os.symlink( os.path.join( bootdir, 'linux26' ), os.path.join( isodir, 'linux' ) )
	if not os.path.exists( os.path.join( isodir, 'linux.bin' ) ):
		os.symlink( os.path.join( bootdir, 'linux26.bin' ), os.path.join( isodir, 'linux.bin' ) )
	pass # TDB

if __name__ == '__main__':
	parser = OptionParser( usage = "usage: %prog [options]" )
	parser.add_option( '-n', '--non-interactive', action = 'store_false',
					   dest = 'interactive', default = True,
					   help = 'if given no questions are asked.' )
	parser.add_option( '-N', '--no-mount', action = 'store_false',
					   dest = 'mount', default = True,
					   help = 'mounting the installation media is not required' )
	parser.add_option( '-s', '--silent', action = 'store_true',
					   dest = 'silent', default = False,
					   help = 'do not print any information, just errors and warnings' )
	parser.add_option( '-m', '--mount-point', action = 'store',
					   dest = 'mount_point', default = '/cdrom',
					   help = 'devices mount point for CD-ROM drive' )

	( options, arguments ) = parser.parse_args()

	if options.silent:
		sys.stdout = open( '/dev/null', 'w' )

	check_preconditions( options )
	prepare( options )
	if not mount( options ):
		print >>sys.stderr, "Error: Failed to mount CD-ROM device at %s" % options.mount_point
		sys.exit( 1 )

	copy_repository( options )
	setup_repository( options )
	setup_pxe( options )

	if options.mount:
		subprocess.call( [ 'umount', options.mount_point ] )

	# set repository server to local system
	fqdn = '%s.%s' % ( configRegistry.get( 'hostname' ), configRegistry.get( 'domainname' ) )
	ucr.handler_set( [ 'repository/online/server=%s' % fqdn ] )

	print  "The local repository has been created."
