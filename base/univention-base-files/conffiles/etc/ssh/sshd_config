@%@UCRWARNING=# @%@
#	$OpenBSD: sshd_config,v 1.100 2016/08/15 12:32:04 naddy Exp $

# This is the sshd server system-wide configuration file.  See
# sshd_config(5) for more information.

# This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin

# The strategy used for options in the default sshd_config shipped with
# OpenSSH is to specify options with their default value where
# possible, but leave them commented.  Uncommented options override the
# default value.

Port @%@sshd/port@%@
#AddressFamily any
#ListenAddress 0.0.0.0
#ListenAddress ::

#HostKey /etc/ssh/ssh_host_rsa_key
#HostKey /etc/ssh/ssh_host_ecdsa_key
#HostKey /etc/ssh/ssh_host_ed25519_key
@!@
from os.path import exists
for key in configRegistry.get('sshd/HostKey', 'rsa,ecdsa,ed25519').split(','):
	if '/' in key:
		filename = key
	elif key == 'rsa1':
		if '1' not in protocols:
			continue
		else:
			filename = '/etc/ssh/ssh_host_key'
	else:
		filename = '/etc/ssh/ssh_host_%s_key' % (key,)
	if exists(filename):
		print "HostKey %s" % (filename,)
@!@

# Ciphers and keying
#RekeyLimit default none

# Logging
#SyslogFacility AUTH
#LogLevel INFO

# Authentication:

LoginGraceTime 600
PermitRootLogin @%@sshd/permitroot@%@
#StrictModes yes
#MaxAuthTries 6
#MaxSessions 10

#PubkeyAuthentication yes

# Expect .ssh/authorized_keys2 to be disregarded by default in future.
#AuthorizedKeysFile	.ssh/authorized_keys .ssh/authorized_keys2

#AuthorizedPrincipalsFile none

#AuthorizedKeysCommand none
#AuthorizedKeysCommandUser nobody

# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
#HostbasedAuthentication no
# Change to yes if you don't trust ~/.ssh/known_hosts for
# HostbasedAuthentication
#IgnoreUserKnownHosts no
# Don't read the user's ~/.rhosts and ~/.shosts files
#IgnoreRhosts yes

# To disable tunneled clear text passwords, change to no here!
PasswordAuthentication @%@sshd/passwordauthentication@%@
#PermitEmptyPasswords no

# Change to yes to enable challenge-response passwords (beware issues with
# some PAM modules and threads)
ChallengeResponseAuthentication @%@sshd/challengeresponse@%@

# Kerberos options
#KerberosAuthentication no
#KerberosOrLocalPasswd yes
#KerberosTicketCleanup yes
#KerberosGetAFSToken no

# GSSAPI options
GSSAPIAuthentication yes
#GSSAPICleanupCredentials yes
#GSSAPIStrictAcceptorCheck yes
GSSAPIKeyExchange yes

# Set this to 'yes' to enable PAM authentication, account processing,
# and session processing. If this is enabled, PAM authentication will
# be allowed through the ChallengeResponseAuthentication and
# PasswordAuthentication.  Depending on your PAM configuration,
# PAM authentication via ChallengeResponseAuthentication may bypass
# the setting of "PermitRootLogin without-password".
# If you just want the PAM account and session checks to run without
# PAM authentication, then enable this but set PasswordAuthentication
# and ChallengeResponseAuthentication to 'no'.
UsePAM yes

#AllowAgentForwarding yes
#AllowTcpForwarding yes
#GatewayPorts no
X11Forwarding @%@sshd/xforwarding@%@
@!@
if configRegistry.get('sshd/xdisplayoffset'):
	print "X11DisplayOffset %s" % configRegistry['sshd/xdisplayoffset']
if configRegistry.get('sshd/xuselocalhost'):
	print "X11UseLocalhost %s" % configRegistry['sshd/xuselocalhost']
@!@
#PermitTTY yes
PrintMotd no
#PrintLastLog yes
@!@
if configRegistry.get('sshd/TCPKeepAlive'):
	print "TCPKeepAlive %(sshd/TCPKeepAlive)s" % configRegistry
@!@
#UseLogin no
#UsePrivilegeSeparation sandbox
#PermitUserEnvironment no
#Compression delayed
#ClientAliveInterval 0
#ClientAliveCountMax 3
#UseDNS no
#PidFile /var/run/sshd.pid
#MaxStartups 10:30:100
#PermitTunnel no
#ChrootDirectory none
#VersionAddendum none

# no default banner path
@!@
if configRegistry.get('sshd/banner'):
	print "Banner %s" % configRegistry['sshd/banner']
@!@

# Allow client to pass locale environment variables
AcceptEnv LANG LC_*

# override default of no subsystems
Subsystem	sftp	/usr/lib/openssh/sftp-server

# Example of overriding settings on a per-user basis
#Match User anoncvs
#	X11Forwarding no
#	AllowTcpForwarding no
#	PermitTTY no
#	ForceCommand cvs server

@!@
if configRegistry.get('sshd/MACs'):
	print "MACs %(sshd/MACs)s" % configRegistry
if configRegistry.get('sshd/Ciphers'):
	print "Ciphers %(sshd/Ciphers)s" % configRegistry
if configRegistry.get('sshd/KexAlgorithms'):
	print "KexAlgorithms %(sshd/KexAlgorithms)s" % configRegistry

PREFIX = 'sshd/config/'
DIGITS = '0123456789'
config = [
	'%s %s' % (key[len(PREFIX):], value)
	for (key, value) in configRegistry.items()
	if key.startswith(PREFIX)
]
if config:
	print '\n'.join(line.lstrip(DIGITS) for line in sorted(config))
@!@
