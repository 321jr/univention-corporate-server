@%@UCRWARNING=# @%@

@!@
protocols = configRegistry.get('sshd/Protocol', '2').split(',')
print "Protocol %s" % (','.join(protocols),)

from os.path import exists
for key in configRegistry.get('sshd/HostKey', 'rsa,ecdsa').split(','):
	if '/' in key:
		filename = key
	elif key == 'rsa1':
		if '1' not in protocols:
			continue
		else:
			filename = '/etc/ssh/ssh_host_key'
	else:
		filename = '/etc/ssh/ssh_host_%s_key' % (key,)
	if exists(filename):
		print "HostKey %s" % (filename,)

if '1' in protocols:
	print 'ServerKeyBits %s' % (configRegistry.get('ssh/ServerKeyBits', 1024),)

if configRegistry.get('sshd/TCPKeepAlive'):
	print "TCPKeepAlive %(sshd/TCPKeepAlive)s" % configRegistry
@!@
UsePrivilegeSeparation yes
KeyRegenerationInterval 3600
SyslogFacility AUTH
LogLevel INFO
LoginGraceTime 600
StrictModes yes
RSAAuthentication yes
PubkeyAuthentication yes
IgnoreRhosts yes
RhostsRSAAuthentication no
HostbasedAuthentication no
PermitEmptyPasswords no

# Change to yes to enable challenge-response passwords (beware issues with
# some PAM modules and threads)
ChallengeResponseAuthentication @%@sshd/challengeresponse@%@
PasswordAuthentication @%@sshd/passwordauthentication@%@

# Kerberos options
KerberosAuthentication no
KerberosTicketCleanup yes
GSSAPIAuthentication yes
GSSAPIKeyExchange yes
X11DisplayOffset 10
PrintMotd no
PrintLastLog yes
Subsystem       sftp    /usr/lib/sftp-server
UsePAM yes

# Allow client to pass locale environment variables
AcceptEnv LANG LC_*

Port @%@sshd/port@%@
PermitRootLogin @%@sshd/permitroot@%@
X11Forwarding @%@sshd/xforwarding@%@
@!@
if configRegistry.get('sshd/xdisplayoffset'):
	print "X11DisplayOffset %s" % configRegistry['sshd/xdisplayoffset']
if configRegistry.get('sshd/xuselocalhost'):
	print "X11UseLocalhost %s" % configRegistry['sshd/xuselocalhost']
if configRegistry.get('sshd/banner') and len(str(configRegistry.get('sshd/banner')) > 0):
	print "Banner %s" % configRegistry['sshd/banner']

if configRegistry.get('sshd/MACs'):
	print "MACs %(sshd/MACs)s" % configRegistry
if configRegistry.get('sshd/Ciphers'):
	print "MACs %(sshd/Ciphers)s" % configRegistry
if configRegistry.get('sshd/KexAlgorithms'):
	print "MACs %(sshd/KexAlgorithms)s" % configRegistry
@!@
