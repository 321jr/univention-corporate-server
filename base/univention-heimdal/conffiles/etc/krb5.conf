# Warning: This file is auto-generated and might be overwritten by
#          univention-config-registry.
#          Please edit the following file instead:
# Warnung: Diese Datei wurde automatisch generiert und kann durch
#          univention-config-registry Ã¼berschrieben werden.
#          Bitte bearbeiten Sie an Stelle dessen die folgende Datei:
#
# 	/etc/univention/templates/files/etc/krb5.conf
#


[libdefaults]
@!@
kerberos_realm = configRegistry.get('kerberos/realm')
if kerberos_realm:
	print '\tdefault_realm = %s' % kerberos_realm
print '\tdefault_tgs_enctypes = %s' % configRegistry.get('kerberos/defaults/enctypes/tgs', 'des3-hmac-sha1 des-cbc-crc des-cbc-md4 des-cbc-md5 des3-cbc-sha1 arcfour-hmac-md5 aes128-cts-hmac-sha1-96 aes256-cts-hmac-sha1-96')
print '\tdefault_tkt_enctypes = %s' % configRegistry.get('kerberos/defaults/enctypes/tkt', 'arcfour-hmac-md5 des-cbc-md5 des3-hmac-sha1 des-cbc-crc des-cbc-md4 des3-cbc-sha1 aes128-cts-hmac-sha1-96 aes256-cts-hmac-sha1-96')
print '\tpermitted_enctypes = %s'   % configRegistry.get('kerberos/defaults/enctypes/permitted', 'des3-hmac-sha1 des-cbc-crc des-cbc-md4 des-cbc-md5 des3-cbc-sha1 arcfour-hmac-md5 aes128-cts-hmac-sha1-96 aes256-cts-hmac-sha1-96')
print '\tkrb4_get_tickets=%s' % configRegistry.get('kerberos/v4tickets', 'no')
if not configRegistry.is_false('kerberos/allow/weak/crypto'):
	print '\tallow_weak_crypto=true'
print '\tdns_lookup_kdc = %s' % configRegistry.get('kerberos/defaults/dns_lookup_kdc', 'true')
print '\tdns_lookup_realm = %s' % configRegistry.get('kerberos/defaults/dns_lookup_realm', 'false')
print '\tforwardable = %s' % configRegistry.get('kerberos/defaults/forwardable', 'true')
print '\tproxiable = %s' % configRegistry.get('kerberos/defaults/proxiable', 'true')
print '\tkdc_timesync = %s' % configRegistry.get('kerberos/defaults/kdc_timesync', '1')
print '\tdebug = %s' % configRegistry.get('kerberos/defaults/debug', 'false')
@!@

@!@
def is_samba4_dc():
	import os.path
	if not configRegistry.get('server/role') in ['domaincontroller_master', 'domaincontroller_backup', 'domaincontroller_slave']:
		return False
	if not os.path.exists('/usr/sbin/univention-s4search'):
		return False
	return True

if configRegistry.get('kerberos/domain_realms'):
	print '[domain_realm]'
	domain_realms = configRegistry.get('kerberos/domain_realms').split(',')
	for i in domain_realms:
		print i

kerberos_realm = configRegistry.get('kerberos/realm')
kerberos_kdc = configRegistry.get('kerberos/kdc')
kerberos_adminserver = configRegistry.get('kerberos/adminserver')
kerberos_kpasswdserver = configRegistry.get('kerberos/kpasswdserver')
if kerberos_realm:
	print '[realms]'
	print '%s = { ' % kerberos_realm
	print '\tacl_file = /var/lib/heimdal-kdc/kadmind.acl'
	if kerberos_kdc:
		print '\tkdc = %s' % kerberos_kdc
	if kerberos_adminserver:
		print '\tadmin_server = %s' % kerberos_adminserver
	if kerberos_kpasswdserver:
		print '\tkpasswd_server = %s' % kerberos_kpasswdserver
	print '}'

windows_domain = configRegistry.get('windows/domain')
if windows_domain and windows_domain != kerberos_realm and is_samba4_dc():
	if kerberos_realm:
		print ''
	else:
		print '[realms]'
	print '%s = { ' % windows_domain
	print '\tkdc = %s' % (kerberos_kdc or "127.0.0.1:88")
	print '\tadmin_server = %s' % (kerberos_adminserver or "127.0.0.1:88")
	print '\tdefault_domain = %s' % configRegistry['domainname']
	print '}'
@!@

[kdc]
hdb-ldap-create-base = cn=kerberos,@%@ldap/base@%@
@!@
if configRegistry.get('kerberos/realm'):
	print 'v4-realm = %s' % configRegistry.get('kerberos/realm')

print ''

if configRegistry.get('kerberos/kadmin/default/keys') or configRegistry.get('kerberos/afscell') or configRegistry.get('kerberos/realm'):
	print '[kadmin]'
	if configRegistry.get('kerberos/kadmin/default/keys'):
		print '\tdefault_keys = %s' % configRegistry.get('kerberos/kadmin/default/keys')
	if configRegistry.get('kerberos/realm'):
		print '\tv4-realm = %s' % configRegistry.get('kerberos/realm')
	if configRegistry.get('kerberos/afscell'):
		print '\tafs-cell = %s' % configRegistry.get('kerberos/afscell')
@!@

database = {
	label = {
		acl_file = /var/lib/heimdal-kdc/kadmind.acl
		dbname = ldap:@%@ldap/base@%@
@!@
if configRegistry.get('kerberos/realm'):
	print '\t\trealm = %s ' % configRegistry.get('kerberos/realm')
@!@
		log_file = /var/log/heimdal-database.log
		mkey_file = /var/heimdal/m-key
	}
}
