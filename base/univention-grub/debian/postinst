#!/bin/sh

eval $(univention-baseconfig shell)

if [ "$1" = configure -a -z "$2" ] && [ -z "$grub_append" ]; then

        vars="grub/timeout=5 "

        if [ -n "$lilo_vga" ]; then
                vars="$vars grub/vga=$lilo_vga "
        fi

		if [ -n "$lilo_boot" ]; then
			vars="$vars grub/boot=$lilo_boot"
		fi

        if [ -n "$lilo_append" ]; then
                if [ -n "$grub_append" ]; then
                        grub_append="$grub_append $lilo_append"
                else
                        grub_append="$lilo_append"
                fi
	else
		grub_append="$grub_append splash=silent"
        fi

        if [ -n "$lilo_root" ]; then
				vars="$vars grub/root=$lilo_root"
                if [ -n "$grub_append" ]; then
                        grub_append="$grub_append root=$lilo_root"
                else
                        grub_append="root=$lilo_root"
                fi
		else
        	rootdevice=$(grep -w / /etc/fstab | awk '{print $1}')
			vars="$vars grub/root=$rootdevice"
        fi

        if [ -n "$lilo_append_acpi" ] && [ "$lilo_append_acpi" = "off" ]; then
                if [ -n "$grub_append" ]; then
                        grub_append="$grub_append acpi=off "
                else
                        grub_append="acpi=off "
                fi
        fi

        if [ -n "$lilo_append_pci_acpi" ] && [ "$lilo_append_pci_acpi" = "off" ]; then
                if [ -n "$grub_append" ]; then
                        grub_append="$grub_append pci=noacpi "
                else
                        grub_append="pci=noacpi "
                fi
        fi

        root2fstype=$(grep -w / /etc/fstab | awk '{print $3}')
        if [ -n "$root2fstype" ]; then
                if [ -n "$grub_append" ]; then
                        grub_append="$grub_append root2fstype=$root2fstype "
                else
                        grub_append="root2fstype=$root2fstype "
                fi
        fi

        if [ -n "$grub_append" ]; then
                univention-baseconfig set grub/append="$grub_append"
        fi

        univention-baseconfig set $vars grub/memtest86=true

        univention-baseconfig unset lilo/append/acpi \
                                lilo/append/pci_acpi \
                                lilo/append \
                                lilo/boot \
                                lilo/compact \
                                lilo/default \
                                lilo/root \
                                lilo/vga

elif [ -z "$2" ]; then
        # root fs type for quota support on xfs
        root2fstype=$(grep -w / /etc/fstab | awk '{print $3}')
        if [ -n "$root2fstype" ]; then
                append="$append root2fstype=$root2fstype "
        fi

        rootdevice=$(grep -w / /etc/fstab | awk '{print $1}')
        if [ -n "$root2fstype" ]; then
                append="$append root=$rootdevice "
        fi

        univention-baseconfig set grub/timeout?5 \
								grub/append="$append" \
								grub/root="$rootdevice" \
								grub/vga=785 \
								grub/memtest86=true

fi


# Usage: convert os_device
# Convert an OS device to the corresponding GRUB drive.
# This part is OS-specific.
# HINT: This code is borrowed from /usr/sbin/update-grub
convert () {
    # First, check if the device file exists.
    if test -e "$1"; then
		:
    else
		echo "$1: Not found or not a block device." 1>&2
		echo ""
		return 0
    fi

	host_os=`uname -s | tr '[[:upper:]]' '[[:lower:]]'`

    # Break the device name into the disk part and the partition part.
    case "$host_os" in
    linux)
		tmp_disk=`echo "$1" | sed -e 's%\([sh]d[[:lower:]]\)[0-9]*$%\1%' \
				  -e 's%\(fd[0-9]*\)$%\1%' \
				  -e 's%/part[0-9]*$%/disc%' \
				  -e 's%\(c[0-7]d[0-9]*\).*$%\1%'`
		tmp_part=`echo "$1" | sed -e 's%.*/[sh]d[[:lower:]]\([0-9]*\)$%\1%' \
				  -e 's%.*/fd[0-9]*$%%' \
				  -e 's%.*/floppy/[0-9]*$%%' \
				  -e 's%.*/\(disc\|part\([0-9]*\)\)$%\2%' \
				  -e 's%.*c[0-7]d[0-9]*p*%%'`
	;;
# HINT: handling other operating systems has been deleted 
    *)
		echo "update-grub does not support your OS yet." 1>&2
		echo ""
		return 0
    esac

	device_map="/boot/grub/device.map"

    # Get the drive name.
    tmp_drive=`grep -v '^#' $device_map | grep "$tmp_disk *$" \
			| sed 's%.*\(([hf]d[0-9][a-z0-9,]*)\).*%\1%'`

    # If not found, print an error message and exit.
    if test "x$tmp_drive" = x; then
		echo "$1 does not have any corresponding BIOS drive." 1>&2
		echo ""
		return 0
    fi

    if test "x$tmp_part" != x; then
		# If a partition is specified, we need to translate it into the
		# GRUB's syntax.
		case "$host_os" in
		linux)
	    	  echo "$tmp_drive" | sed "s%)$%,`expr $tmp_part - 1`)%" ;;
# HINT: handling other operating systems has been deleted 
		esac
    else
		# If no partition is specified, just print the drive name.
		echo "$tmp_drive"
    fi
}

grepcnt=$(grep -c "^dm-mod$" /etc/initramfs-tools/modules)
if [ "$grepcnt" = "0" ] ; then
	echo "LVM kernel module 'dm-mod' is missing in initrd - recreating initrd"
	echo "dm-mod" >> /etc/initramfs-tools/modules
	echo "dm-mirror" >> /etc/initramfs-tools/modules
	echo "dm-snapshot" >> /etc/initramfs-tools/modules
	filelist=$(ls -1 /boot/initrd.img-* 2>/dev/null)
	if [ -n "$filelist" ] ; then
		for fn in $filelist ; do
			kernelversion=${fn/\/boot\/initrd.img-}
			update-initramfs -u -t -k "$kernelversion"
		done
	fi
fi

eval $(univention-baseconfig shell)

#DEBHELPER#


if [ "$1" = configure -a -z "$2" ]; then
	# source the update-grub file, so we could use the grub helper functions
	if [ -n "$grub_boot" ]; then
		grub-install --no-floppy $grub_boot
	fi
	update-grub -y
fi

# determine grubdevice
# needs to be called after grub-install: devices.map is created by grub-install
if [ -z "$grub_groot" ] ; then
	grubdev=$(mount | grep " on /boot " | cut -d' ' -f1)
	if [ -z "$grubdev" ] ; then
		grubdev=$(mount | grep " on / " | cut -d' ' -f1)
	fi
	groot=$(convert $grubdev)
	univention-baseconfig set grub/groot="$groot"
fi

univention-baseconfig set kernel/postinst_hook?"/usr/sbin/update-grub"

exit 0

