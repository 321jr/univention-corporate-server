#!/bin/bash
#
# Univention Grub
#  postinst script
#
# Copyright 2004-2011 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

#DEBHELPER#

eval "$(univention-config-registry shell)"

# Remove now obsolete UCR variables previously used for lilo
univention-config-registry unset lilo/vga lilo/boot lilo/append lilo/root lilo/append/acpi 1> /dev/null 
univention-config-registry unset lilo/append/pci/acpi lilo/compact lilo/default lilo/append 1> /dev/null 

univention-config-registry set grub/memtest86=true
univention-config-registry set grub/timeout?5
univention-config-registry set kernel/postinst_hook?"/usr/sbin/update-grub"
univention-config-registry set grub/quiet?"no"
univention-config-registry set grub/loglevel?"0"

# New installation, the 
if [ "$1" = configure -a -z "$2" ];  then

#	rootdevice=$(awk '$2=="/" {print $1}' /etc/fstab)
#        univention-config-registry set grub/root=$rootdevice

#        root2fstype=$(awk '$2=="/" {print $3}' /etc/fstab)

#        if [ -n "$root2fstype" ]; then
#                if [ -n "$grub_append" ]; then
#                        grub_append="$grub_append root2fstype=$root2fstype "
#                else
#                        grub_append="root2fstype=$root2fstype "
#                fi
#        fi

#        if [ -n "$grub_append" ]; then
#                univention-config-registry set grub/append="$grub_append"
#        fi

	# invoke grub-mkdevicemap (required for KVM machines
	grub-mkdevicemap $grub_boot
	# source the update-grub file, so we could use the grub helper functions
	if [ -n "$grub_boot" ]; then
		/usr/sbin/grub-install --no-floppy "$grub_boot"
	fi
	update-grub

# # Upgrade from an earlier version
# elif [ -z "$2" ]; then
#         # root fs type for quota support on xfs
#         root2fstype=$(awk '$2=="/" {print $3}' /etc/fstab)
#         if [ -n "$root2fstype" ]; then
#                 append="$append root2fstype=$root2fstype "
#         fi
#         univention-config-registry set grub/append="$append splash=silent"

#         rootdevice=$(awk '$2=="/" {print $1}' /etc/fstab)
# 	univention-config-registry set grub/root="$rootdevice"

# 	univention-config-registry set grub/vga=791
# fi


# Usage: convert os_device
# Convert an OS device to the corresponding GRUB drive.
# This part is OS-specific.
# HINT: This code is borrowed from /usr/sbin/update-grub
convert () {
    # First, check if the device file exists.
    if test -e "$1"; then
		:
    else
		echo "$1: Not found or not a block device." 1>&2
		echo ""
		return 0
    fi

	host_os=`uname -s | tr '[[:upper:]]' '[[:lower:]]'`

    # Break the device name into the disk part and the partition part.
    case "$host_os" in
    linux)
		tmp_disk=`echo "$1" | sed -e 's%\([sh]d[[:lower:]]\)[0-9]*$%\1%' \
				  -e 's%\(fd[0-9]*\)$%\1%' \
				  -e 's%/part[0-9]*$%/disc%' \
				  -e 's%\(c[0-7]d[0-9]*\).*$%\1%'`
		tmp_part=`echo "$1" | sed -e 's%.*/[sh]d[[:lower:]]\([0-9]*\)$%\1%' \
				  -e 's%.*/fd[0-9]*$%%' \
				  -e 's%.*/floppy/[0-9]*$%%' \
				  -e 's%.*/\(disc\|part\([0-9]*\)\)$%\2%' \
				  -e 's%.*c[0-7]d[0-9]*p*%%'`
	;;
# HINT: handling other operating systems has been deleted 
    *)
		echo "update-grub does not support your OS yet." 1>&2
		echo ""
		return 0
    esac

	device_map="/boot/grub/device.map"

    # Get the drive name.
    tmp_drive=`grep -v '^#' $device_map | grep "$tmp_disk *$" \
			| sed 's%.*\(([hf]d[0-9][a-z0-9,]*)\).*%\1%'`

    # If not found, print an error message and exit.
    if test "x$tmp_drive" = x; then
		echo "$1 does not have any corresponding BIOS drive." 1>&2
		echo ""
		return 0
    fi

    if test "x$tmp_part" != x; then
		# If a partition is specified, we need to translate it into the
		# GRUB's syntax.
		case "$host_os" in
		linux)
	    	  echo "$tmp_drive" | sed "s%)$%,`expr $tmp_part - 1`)%" ;;
# HINT: handling other operating systems has been deleted 
		esac
    else
		# If no partition is specified, just print the drive name.
		echo "$tmp_drive"
    fi
}

grepcnt=$(grep -c "^dm-mod$" /etc/initramfs-tools/modules)
if [ "$grepcnt" = "0" ] ; then
	echo "LVM kernel module 'dm-mod' is missing in initrd - recreating initrd"
	echo "dm-mod" >> /etc/initramfs-tools/modules
	echo "dm-mirror" >> /etc/initramfs-tools/modules
	echo "dm-snapshot" >> /etc/initramfs-tools/modules
	filelist=$(ls -1 /boot/initrd.img-* 2>/dev/null)
	if [ -n "$filelist" ] ; then
		for fn in $filelist ; do
			kernelversion=${fn/\/boot\/initrd.img-}
			update-initramfs -u -t -k "$kernelversion"
		done
	fi
fi

eval "$(univention-config-registry shell)"

# determine grubdevice
# needs to be called after grub-install: devices.map is created by grub-install
if [ -z "$grub_groot" ] ; then
	grubdev=$(df -P /boot | sed -ne '$s% .*%%p')
	groot=$(convert "$grubdev")
	if [ -n "$groot" ]
	then
		univention-config-registry set grub/groot="$groot"
	fi
fi


exit 0
