#!/bin/bash
#
# Univention Grub
#  postinst script
#
# Copyright 2004-2013 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

. /usr/share/debconf/confmodule.sh

#DEBHELPER#

eval "$(univention-config-registry shell)"

. /usr/share/univention-lib/ucr.sh

# Bug #24858: xen-4.1 needs 800x600
univention-config-registry set grub/timeout?5 \
	kernel/postinst_hook?"/usr/sbin/update-grub" \
	grub/quiet?"yes"  \
	grub/loglevel?"0" \
	grub/vga?"789"\
	grub/gfxmode?"1024x768@32" \
	grub/backgroundimage?"/boot/grub/uniboot.png" \
	grub/color/normal?"dark-gray/black" \
	grub/color/highlight?"dark-gray/black" \
	grub/menu/color/normal?"dark-gray/black" \
	grub/menu/color/highlight?"white/green" \
	grub/generate-menu-lst?"yes"

# grub needs to read the file unicode.pf2 for gfxmode,
# /usr/share/grub/unicode.pf2 is the default, but /
# can be on a fs grub can't read (cryptsetup), so 
# /boot/grub/unicode.pf2 is better
if [ ! -f /boot/grub/unicode.pf2 -a -f /usr/share/grub/unicode.pf2 ]; then
	cp /usr/share/grub/unicode.pf2 /boot/grub/unicode.pf2
fi

# switch color depth from 788 (800x600x16) to 789 (800x600x24) during update from UCS 3.1-1 to 3.2-0 (Bug #32634)
# this block may be removed after UCS 3.2-0
if [ "$1" = "configure" ] && dpkg --compare-versions "$2" lt-nl 7.0.1-1; then
	if [ "$grub_vga" = "788" -a ! "$update32_grub_changecolordepth" = "no" ] ; then
		ucr set grub/vga=789
	fi
fi

# Bug #33123:
# dpkg tries to use symlinks during package extraction which fails usually on FAT32.
# /boot/grub may be FAT32, so the following files are extracted somewhere else and
# copied back to /boot/grub.
cp -f /usr/share/univention-grub/uniboot.{xpm.gz,png} /boot/grub/

# Install grub on new installation
if [ "$1" = configure -a -z "$2" ];  then

	# invoke grub-mkdevicemap (required for KVM machines)
	grub-mkdevicemap $grub_boot
	# if EFI is enabled
	if is_ucr_true grub/efi ; then
		# EFI activated
		modprobe efivars
		# install grub
		if stat -f /boot/grub/ -c "%T" | egrep -qi "FAT|MSDOS" ; then
			/usr/sbin/grub-install --target=x86_64-efi --efi-directory=/boot/grub
		else
			/usr/sbin/grub-install --target=x86_64-efi
		fi
	else
		# no EFI found
		if [ -n "$grub_boot" ]; then
			/usr/sbin/grub-install --no-floppy "$grub_boot"
		fi
	fi
	update-grub
fi

if [ "$1" = configure ] && dpkg-query -W -f '${Status}' grub-pc | grep -qs '^install'
then # Bug 40654, 41497
	mountpoint_to_disk_device () {
		devicemajor="$(mountpoint -d "$1" | cut -d':' -f1)"
		devicemajor_hex="$(printf '%x' "$devicemajor")"
		deviceminor="$(mountpoint -d "$1" | cut -d':' -f2)"
		deviceminor_hex="$(printf '%x' "$deviceminor")"
		# disc device is partition device AND 0xf0
		deviceminor_low16_hex="$(echo "$deviceminor_hex" | sed 's/.$/0/')"
		find /dev -mindepth 1 -maxdepth 1 -type b -exec stat -c '%n %t %T' {} \; \
			| grep "^.* $devicemajor_hex $deviceminor_low16_hex$" \
			| cut -d' ' -f 1
	}

	echo "Checking grub-pc/install_devices for errors..."
	boot_device="$(mountpoint_to_disk_device '/boot')"
	echo "Boot device guessed as '$boot_device'."
	case "$boot_device" in
		/dev/md*)
			echo "Boot device '$boot_device' is a RAID device, detection is wrong."
			boot_device=""
		;;
		/dev/dm-*)
			echo "Boot device '$boot_device' is a LVM device, detection is wrong."
			boot_device=""
		;;
	esac
	output_devices=""
	missing_devices=0 # are any devices in grub-pc/install_devices missing/wrong?
	have_no_devices=1 # are there no devices in grub-pc/install_devices at all?
	boot_device_missing=1 # is the $boot_device in grub-pc/install_devices?
	db_get "grub-pc/install_devices"
	echo "Currently grub-pc/install_devices is set to '$RET'"
	for i in `echo $RET | sed -e 's/, / /g'` ; do # from grub-pc.postinst
	    real_device="$(readlink -f "$i")"         # from grub-pc.postinst
		echo "Checking '$real_device'..."
		if [ "$real_device" = "$boot_device" ]
		then
			echo "This is the boot device '$boot_device'."
			boot_device_missing=0
		fi
		if [ -b "$real_device" ] # exists and is block special
		then
			echo "The device '$real_device' exists."
			if [ -n "$output_devices" ]
			then
				output_devices="$output_devices, $real_device"
			else
				output_devices="$real_device"
			fi
		else
			echo "The device '$real_device' is MISSING, removing."
			missing_devices=1
		fi
		have_no_devices=0
	done
	if [ "$have_no_devices" -ne 0 ]
	then
		echo "There are no devices at all in grub-pc/install_devices."
	fi
	if [ "$boot_device" = '' ]
	then
		echo "The boot device is unknown."
	else
		if [ "$boot_device_missing" -ne 0 ]
		then
			echo "The boot device '$boot_device' is NOT in grub-pc/install_devices."
			if [ "$have_no_devices" -ne 0 ]
			then
				echo "Adding boot device '$boot_device' because there are no devices at all."
				if [ -n "$output_devices" ]
				then
					output_devices="$output_devices, $boot_device"
				else
					output_devices="$boot_device"
				fi
			fi
			if [ "$missing_devices" -ne 0 ]
			then
				echo "Adding boot device '$boot_device' because there were some wrong devices."
				if [ -n "$output_devices" ]
				then
					output_devices="$output_devices, $boot_device"
				else
					output_devices="$boot_device"
				fi
			fi
		else
			echo "The boot device IS in grub-pc/install_devices."
		fi
	fi
	db_get "grub-pc/install_devices"
	echo "Currently grub-pc/install_devices is set to '$RET'"
	if [ "$RET" = "$output_devices" ]
	then
		echo "No changes were made."
		echo "grub-pc/install_devices will not be changed."
		echo "Will not run grub-install."
	else
		echo "Some changes were made."
		if [ "$output_devices" = '' ]
		then
			echo "grub-pc/install_devices will NOT be set to '$output_devices'."
		else
			echo "grub-pc/install_devices will be set to '$output_devices'."
			echo "Running grub-install..."
			db_set "grub-pc/install_devices" "$output_devices"
			db_get "grub-pc/install_devices"
			echo "Currently grub-pc/install_devices is set to '$RET'"
			for i in `echo $RET | sed -e 's/, / /g'` ; do # from grub-pc.postinst
				real_device="$(readlink -f "$i")"         # from grub-pc.postinst
				echo "Running grub-install on '$real_device'"
				grub-install "$real_device"
			done
		fi
	fi
	echo "Done checking grub-pc/install_devices for errors."
fi

if ! [ -e /boot/grub/menu.lst ] ; then
    /usr/sbin/univention-grub-generate-menu-lst
fi

grepcnt=$(grep -c "^dm-mod$" /etc/initramfs-tools/modules)
if [ "$grepcnt" = "0" ] ; then
	echo "LVM kernel module 'dm-mod' is missing in initrd - recreating initrd"
	echo "dm-mod" >> /etc/initramfs-tools/modules
	echo "dm-mirror" >> /etc/initramfs-tools/modules
	echo "dm-snapshot" >> /etc/initramfs-tools/modules
	filelist=$(ls -1 /boot/initrd.img-* 2>/dev/null)
	if [ -n "$filelist" ] ; then
		for fn in $filelist ; do
			kernelversion=${fn/\/boot\/initrd.img-}
			update-initramfs -u -t -k "$kernelversion"
		done
	fi
fi

exit 0
