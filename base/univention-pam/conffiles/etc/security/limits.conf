# /etc/security/limits.conf
@%@UCRWARNING=# @%@
#
#Each line describes a limit for a user in the form:
#
#<domain>        <type>  <item>  <value>
#
#Where:
#<domain> can be:
#        - a user name
#        - a group name, with @group syntax
#        - the wildcard *, for default entry
#        - the wildcard %, can be also used with %group syntax,
#                 for maxlogin limit
#        - NOTE: group and wildcard limits are not applied to root.
#          To apply a limit to the root user, <domain> must be
#          the literal username root.
#
#<type> can have the two values:
#        - "soft" for enforcing the soft limits
#        - "hard" for enforcing hard limits
#
#<item> can be one of the following:
#        - core - limits the core file size (KB)
#        - data - max data size (KB)
#        - fsize - maximum filesize (KB)
#        - memlock - max locked-in-memory address space (KB)
#        - nofile - max number of open files
#        - rss - max resident set size (KB)
#        - stack - max stack size (KB)
#        - cpu - max CPU time (MIN)
#        - nproc - max number of processes
#        - as - address space limit (KB)
#        - maxlogins - max number of logins for this user
#        - maxsyslogins - max number of logins on the system
#        - priority - the priority to run user process with
#        - locks - max number of file locks the user can hold
#        - sigpending - max number of pending signals
#        - msgqueue - max memory used by POSIX message queues (bytes)
#        - nice - max nice priority allowed to raise to values: [-20, 19]
#        - rtprio - max realtime priority
#        - chroot - change root to directory (Debian-specific)
#
#<domain>      <type>  <item>         <value>
#
# You can set limits by setting univention-config-registry variables of the following format:
#   security/limits/<scope>/<name>/<type>/<item>=<value>
# where <scope> is either 'user' or 'group',
# <name> is the name of the user or group to be affected, or '*' to define the default,
# <type> is either 'hard' or 'soft' or '-' for both,
# and <item> is what is to be limited.
#
# Examples:
#   $ univention-config-registry set 'security/limits/group/Domain Users/hard/nproc'=1000
#   $ univention-config-registry set 'security/limits/default/user/hard/nice'=-5

@!@
from univention.lib.misc import custom_username, custom_groupname

PREFIX = 'security/limits/'
output = [('# <domain>', '<type>', '<item>', '<value>')]
for key, value in configRegistry.iteritems():
	if not key.startswith(PREFIX):
		continue
	parts = key[len(PREFIX):]
	parts = parts.split('/')
	try:
		(scope, name, type, item) = parts
	except ValueError:
		print '# Invalid UCR variable name: %s' % (key,)
		continue
	if scope == 'user':
		domain = custom_username(name)
	elif scope == 'group':
		domain = '@' + custom_groupname(name)
	elif scope == 'default':
		if name == 'user':
			domain = '*'
		else:
			print '# Invalid variable "%s"\n# <name> must be "user" for "default" <scope>, not "%s"\n#' % (key, type)
			continue
	else:
		print '# Illegal variable "%s"\n# <scope> must be "user", "group" or "default", not "%s"\n#' % (key, type)
		continue
	if type not in ('soft', 'hard', '-'):
		print '# Illegal variable "%s"\n# <type> must be "soft", "hard" or "-", not "%s"\n#' % (key, type)
		continue
	# TODO: Validate item?
	# TODO: Validate value?
	# TODO: What about '"' in name?
	if ' ' in name or '\t' in domain:
		domain = '"%s"' % domain
	output.append((domain, type, item, value))

lengths = [max(len(val) for val in col) for col in zip(*output)]
for entry in output:
	print '  '.join(val.ljust(col) for val, col in zip(entry, lengths))
@!@
# End of file
