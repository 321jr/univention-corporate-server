@%@UCRWARNING=# @%@
#
# /etc/nscd.conf
#
# An example Name Service Cache config file.  This file is needed by nscd.
#
# Legal entries are:
#
#	logfile			<file>
#	debug-level		<level>
#	threads			<initial #threads to use>
#	max-threads		<maximum #threads to use>
#	server-user             <user to run server as instead of root>
#		server-user is ignored if nscd is started with -S parameters
#       stat-user               <user who is allowed to request statistics>
#	reload-count		unlimited|<number>
#	paranoia		<yes|no>
#	restart-interval	<time in seconds>
#
#       enable-cache		<service> <yes|no>
#	positive-time-to-live	<service> <time in seconds>
#	negative-time-to-live   <service> <time in seconds>
#       suggested-size		<service> <prime number>
#	check-files		<service> <yes|no>
#	persistent		<service> <yes|no>
#	shared			<service> <yes|no>
#	max-db-size		<service> <number bytes>
#	auto-propagate		<service> <yes|no>
#
# Currently supported cache names (services): passwd, group, hosts, services
#


#	max-threads		32
#	server-user		nobody
#	stat-user		somebody
#	reload-count		5
@!@
## debug-level
debuglevel = configRegistry.get('nscd/debug/level', '0')
try:
	print '\tdebug-level\t\t%s' % int(debuglevel)
except ValueError:
	print '\tdebug-level\t\t0'

## logfile
logfile = configRegistry.get('nscd/logfile')
if logfile:
	print '\tlogfile\t\t\t%s' % logfile
else:
	try:
		if int(debuglevel) > 0:
			print '\tlogfile\t\t\t/var/log/nscd.log'
		else:
			print '#\tlogfile\t\t\t/var/log/nscd.log'
	except ValueError:
		print '#\tlogfile\t\t\t/var/log/nscd.log'

## threads
threads = configRegistry.get('nscd/threads')
if threads:
	try:
		print '\tthreads\t\t\t%s' % int(threads)
	except ValueError:
		print '#\tthreads\t\t\t5'
else:
	print '#\tthreads\t\t\t5'

print '\tparanoia\t\t%s' % ('yes' if configRegistry.is_true('nscd/restart', False) else 'no',)

## restart-interval
interval = configRegistry.get('nscd/restart/interval')
if interval:
	try:
		print '\trestart-interval\t%s' % int(interval)
	except ValueError:
		pass

## type specific options
for dbtype in ('passwd', 'group', 'hosts'):
	print
	if configRegistry.is_true('nscd/%s/enabled' % dbtype, True):
		pttl = configRegistry.get('nscd/%s/positive_time_to_live' % dbtype,
			{'passwd': 600, 'group': 3600, 'hosts': 3600}[dbtype])
		nttl = configRegistry.get('nscd/%s/negative_time_to_live' % dbtype,
			{'passwd': 20, 'group': 60, 'hosts': 20}[dbtype])
		ssize = configRegistry.get('nscd/%s/size' % dbtype, '211')
		maxdb = configRegistry.get( 'nscd/%s/maxdbsize' % dbtype, None)
		print '\tenable-cache\t\t%s\t\tyes' % (dbtype,)
		print '\tpositive-time-to-live\t%s\t\t%s' % (dbtype, pttl)
		print '\tnegative-time-to-live\t%s\t\t%s' % (dbtype, nttl)
		print '\tsuggested-size\t\t%s\t\t%s' % (dbtype, ssize)
		print '\tcheck-files\t\t%s\t\tyes' % (dbtype,)
		if configRegistry.is_true('nscd/%s/persistent' % dbtype, False):
			print '\tpersistent\t\t%s\t\tyes' % (dbtype, )
		if maxdb:
			print '\tmax-db-size\t\t%s\t\t%s' % (dbtype, maxdb)
		if dbtype in ('passwd', 'group'):
			print '\tauto-propagate\t\t%s\tyes' % (dbtype,)
	else:
		print '\tenable-cache\t\t%s\t\tno' % (dbtype,)
@!@

	enable-cache		services	yes
	positive-time-to-live	services	28800
	negative-time-to-live	services	20
	suggested-size		services	211
	check-files		services	yes
	persistent		services	yes
	shared			services	yes
	max-db-size		services	33554432

	enable-cache		netgroup	yes
	positive-time-to-live	netgroup	28800
	negative-time-to-live	netgroup	20
	suggested-size		netgroup	211
	check-files		netgroup	yes
	persistent		netgroup	yes
	shared			netgroup	yes
	max-db-size		netgroup	33554432
