# This is the Univention Corporate Server 4 plymouth plugin script

# background image
bg.image = Image("bg.png");
bg.sprite = Sprite(bg.image);
resized.bg.image = bg.image.Scale(Window.GetWidth(), Window.GetHeight());
bg.sprite.SetImage(resized.bg.image);

# univention logo
univention.image = Image("univention-logo.png");
univention.sprite = Sprite(univention.image);
univention.sprite.SetImage(univention.image);


# box image
box.image = Image("logo-box.png").Scale(Window.GetWidth() / 4, Window.GetWidth() / 4);
box.sprite = Sprite(box.image);
box.sprite.SetOpacity(0.0);
box.sprite.SetX(Window.GetX() + Window.GetWidth()  / 2 - box.image.GetWidth()  / 2);
box.sprite.SetY(Window.GetY() + Window.GetHeight() / 2 - box.image.GetHeight() / 2);

# animantion
for (i=0; i<=47; i++) {
	logo[i].image = Image("logo" + i + ".png").Scale(Window.GetWidth() / 4, Window.GetWidth() / 4);
}
logo.sprite = Sprite(logo[0].image);
logo.sprite.SetOpacity(1.0);
logo.sprite.SetX(Window.GetX() + Window.GetWidth()  / 2 - logo[0].image.GetWidth()  / 2);
logo.sprite.SetY(Window.GetY() + Window.GetHeight() / 2 - logo[0].image.GetHeight() / 2);
logo.count = 1;


# internal status
status = "normal";

line_height = Image.Text("AfpqtM").GetHeight();

# to determine the mode of operation plymouth was started in use Plymouth.GetMode
# which returns a string of one of: "boot", "shutdown", "suspend", "resume" or unknown.
#status = Plymouth.GetMode ();

##########
# helper #
##########

# remove spaces on the beginning of string
fun trim(string) {

	local.str = String(string);
	local.ret = "";
	local.index = 0;
	local.beginning = 1;

	while (str.CharAt(index)) {
		if (str.CharAt(index) == " " && beginning) {
			beginning = 1;
		}
		else {
			ret = ret + str.CharAt(index);
			beginning = 0;
		}
		index++;
	}

	return ret;
}

# wrap line to list of lines with maxChar
fun StringToList(string, maxChar) {

	if (!maxChar) maxChar = 10;
	local.index = 0;
	local.str = String(string);
	local.list = [];
	local.listPos = 0;
	local.substring = "";
	local.length = 0;
	local.split = 0;

	while (str.CharAt(index)) {

		length = StringLength(substring);

		# respect \n
		if (str.CharAt(index) == "\\" && str.CharAt(index + 1) && str.CharAt(index + 1) == "n") {
			index++;
			split = 1;
		}
		if (str.CharAt(index) == "\n") {
			split = 1;
		}


		if (length > maxChar - 4 && str.CharAt(index) == " ")
			split = 1;

		if (split) {
			list[listPos] = trim(substring);
			listPos++;
			substring = "";
			split = 0;
		}
		else {
			substring = substring + str.CharAt(index);
		}
		index++;
	}

	list[listPos] = trim(substring);
	return list;
}

# return the length of a string
fun StringLength(string) {
	local.index = 0;
	str = String(string);
	while(str.CharAt(index)) index++;
	return index;
}

# This is the equivalent for strstr()
fun StringString(string, substring) {
	start = 0;
	while (String(string).CharAt (start)) {
		walk = 0;
		while (String(substring).CharAt (walk) == String(string).CharAt (start + walk) ) {
			walk++;
			if (!String(substring).CharAt (walk)) return start;
		}
		start++;
	}
	return NULL;
}

fun StringCopy (source, beginning, end) {
	local.destination = "";
	for (index = beginning; ( ( (end == NULL) || (index <= end) ) && (String(source).CharAt(index)) ); index++) {
		local.destination += String(source).CharAt(index);
	}
	return local.destination;
}

# it makes sense to use it only for
# numbers up to 150
fun StringToInteger (str) {
	int = -1;
	for (i=0; i<=150; i++) {
		if (i+"" == str) {
			int = i;
			break;
		}
	}
	return int;
}

# ask-question dialog
ASK_PROMPT_LINES = 15;
question.font = "Sans 13";
fun ask_dialog() {

	local.text;
	local.prompt = [];

	for (i=0; i < ASK_PROMPT_LINES; i++) {
		prompt[i].sprite = Sprite();
		prompt[i].sprite.SetPosition(10, 50 + (20 * i), 10000);
	}

	prompt.setText = fun (string) {
		if (!string) string = "";
		local.prompt = global.ask.prompt;
		local.list = StringToList(string, 80);
		local.msg;
		for (i=0; i < ASK_PROMPT_LINES; i++) {
			if (list[i]) {
				prompt[i].image = Image.Text(list[i], 0.4, 0.4, 0.4, 1, question.font);
				prompt[i].sprite.SetImage(prompt[i].image);
				prompt.x = prompt[i].sprite.GetX();
				prompt.y = prompt[i].sprite.GetY();
			}
			else {
				prompt[i].image = Image.Text("", 0, 0, 0, 1, question.font);
				prompt[i].sprite.SetImage(prompt[i].image);
			}
		}
	};

	text.sprite = Sprite();
	text.setText = fun (string) {
		if (!string) string = "";
		local.prompt = global.ask.prompt;
		string = "-> " + string;
		local.text = global.ask.text;
		text.image = Image.Text(string, 0.4, 0.4, 0.4, 1, question.font);
		text.sprite.SetImage(text.image);
		text.sprite.SetOpacity(0.75);
		text.sprite.SetPosition(
			prompt.x,
			prompt.y + 20,
			10000
		);
	};	

	global.ask.prompt = prompt;
	global.ask.text = text;
	ask_opacity(1);
}

# ask password dialog
PASSWORD_PROMPT_LINES = 6;
password.font = "Sans 13";
fun dialog_setup() {

	local.lock;
	local.entry;
	local.prompt;

	lock.image = Image("lock.png");
	entry.image = Image("entry.png");

	lock.sprite = Sprite(lock.image);
	lock.x = Window.GetX() + Window.GetWidth()  / 2 - lock.image.GetWidth() / 2;
	lock.y = Window.GetY() + Window.GetHeight() / 2 - global.box.image.GetHeight() / 3;
	lock.z = 10000;
	lock.sprite.SetPosition(lock.x, lock.y, lock.z);

	entry.sprite = Sprite(entry.image);
	entry.x = Window.GetX() + Window.GetWidth()  / 2 - entry.image.GetWidth() / 2;
	entry.y = Window.GetY() + Window.GetHeight() / 2 - entry.image.GetHeight() / 2;
	entry.z = lock.z + 1;
	entry.sprite.SetPosition(entry.x, entry.y, entry.z);

	for (i=0; i < PASSWORD_PROMPT_LINES; i++) {
		prompt[i] = Sprite();
		prompt[i].SetPosition(10, 50 + (20 * i), 10000);
	}

	prompt.setText = fun (string) {
		if (!string) string = "";
		local.prompt = global.dialog.prompt;
		local.list = StringToList(string, 80);
		local.msg;
		for (i=0; i < PASSWORD_PROMPT_LINES; i++) {
			if (!list[i]) list[i] = "";
			msg = Image.Text(list[i], 0.4, 0.4, 0.4, 1, password.font);
			prompt[i].SetImage(msg);
		}
	};
	
	global.dialog.lock = lock;
	global.dialog.entry = entry;
	global.dialog.prompt = prompt;
	global.dialog.bullet_image = Image("bullet.png");
	dialog_opacity (1);
}

# disable|enable password dialog
fun dialog_opacity(opacity) {

	global.box.sprite.SetOpacity(opacity);
	dialog.lock.sprite.SetOpacity(opacity);
	dialog.entry.sprite.SetOpacity(opacity);
	for (index = 0; dialog.bullet[index]; index++) {
		dialog.bullet[index].sprite.SetOpacity(opacity);
	}
	for (i=0; i < PASSWORD_PROMPT_LINES; i++) {
		global.dialog.prompt[i].SetOpacity (opacity);
	}
}

# disable|enable ask question dialog
fun ask_opacity(opacity) {

	global.ask.text.sprite.SetOpacity(opacity);
	for (i=0; i < ASK_PROMPT_LINES; i++) {
		global.ask.prompt[i].sprite.SetOpacity(opacity);
	}
}

#############
# callbacks #
#############

##########
# normal #
##########

fun display_normal_callback () {
	global.status = "normal";

	# disbale password|question dialog
	if (global.dialog) dialog_opacity (0);
	if (global.ask) ask_opacity (0);

	# display logo
	global.logo.sprite.SetOpacity(1.0);
}

# the callback function is called when the display should return to normal
Plymouth.SetDisplayNormalFunction(display_normal_callback);

############
# password #
############

fun display_password_callback (prompt, bullets) {

	global.status = "password";
	if (!prompt) prompt = "";
	local.list = StringToList(prompt);
	local.msg;

	# disbale logo
	global.logo.sprite.SetOpacity(0.0);
	global.box.sprite.SetOpacity(1.0);

	# set up dialog
	if (!global.dialog) dialog_setup();
	else dialog_opacity(1);

	# prompt
	global.dialog.prompt.setText(prompt);

	# bullets
	for (index = 0; dialog.bullet[index] || index < bullets; index++) {
		if (!dialog.bullet[index]) {
			dialog.bullet[index].sprite = Sprite(dialog.bullet_image);
			dialog.bullet[index].x = dialog.entry.x + 5 + index * dialog.bullet_image.GetWidth();
			dialog.bullet[index].y = dialog.entry.y + dialog.entry.image.GetHeight() / 2 - dialog.bullet_image.GetHeight() / 2;
			dialog.bullet[index].z = dialog.entry.z + 1;
			dialog.bullet[index].sprite.SetPosition(dialog.bullet[index].x, dialog.bullet[index].y, dialog.bullet[index].z);
		}
		if (index < bullets)
			dialog.bullet[index].sprite.SetOpacity(1);
		else
			dialog.bullet[index].sprite.SetOpacity(0);
	}
}

# the callback function is called when the display should display a
# password dialogue. First arg is prompt string, the second is the number of bullets.
Plymouth.SetDisplayPasswordFunction(display_password_callback);

##########
# status #
##########

statusmsg.sprite = Sprite();
statusmsg.font = "Sans 13";
statusmsg.sprite.SetX(Window.GetX() + Window.GetWidth()  / 2 - box.image.GetWidth()  / 2 + 5);
statusmsg.sprite.SetY(Window.GetY() + Window.GetHeight() / 2 + box.image.GetHeight() / 2);

fun update_status_callback (text) {
	local.image = Image.Text(text, 0.4, 0.4, 0.4, 1, statusmsg.font);
	string_it = 0;
	update_strings[string_it] = "";
	for (i=0; (String(text).CharAt(i) != ""); i++) {
		local.temp_char = String(text).CharAt(i);
		if (temp_char != ":")
			update_strings[string_it] += temp_char;
		else
			update_strings[++string_it] = "";
	}
	if ((string_it >= 2) && (update_strings[0] == "fsck")) {
		local.device = update_strings[1];
		local.progress = update_strings[2];
		if (StringToInteger(progress) >= 100)
			image = Image.Text("", 0, 0, 0, 1, statusmsg.font);
		else
			image = Image.Text("Checking disk " + device + " (" + progress + "%)", 0.4, 0.4, 0.4, 1, statusmsg.font);
	}
	statusmsg.sprite.SetImage(image);	
}

# the callback function is called with the new boot status string
Plymouth.SetUpdateStatusFunction(update_status_callback);

########
# quit #
########

#fun quit_callback () {
#}

#Plymouth.SetQuitFunction(quit_callback);

############
# question #
############

fun question_callback (prompt, string) {

	global.status = "question";

	# disbale logo
	global.logo.sprite.SetOpacity(0.0);

	# setup dialog
	if (!global.ask) ask_dialog();
	else ask_opacity(1);

	# display prompt
	global.ask.prompt.setText(prompt);

	# display text
	global.ask.text.setText(string);
}

# the callback function is called when the display should display a question
# dialogue. First arg is prompt string, the second is the entry contents.
Plymouth.SetDisplayQuestionFunction(question_callback);

###########
# message #
###########

# message 
message.font = "Sans 13";
message.sprite = Sprite();
message.sprite.SetPosition(10, 12, 10000);
message.maxLength = 80;

# fsck action line
message_action.sprite = Sprite();
message_action.sprite.SetPosition(10, 32, 10000);

fun message_callback (text) {

	local.substring = "keys:";

	# Look for the "keys:" prefix
	local.keys = StringString(text, local.substring);

	if (keys != NULL)
		text = StringCopy(text, keys + StringLength(local.substring), NULL);

	if (StringLength(text) > message.maxLength) {
		text = text.SubString(0, message.maxLength - 3);
		text += "...";
	}

	local.start = Window.GetWidth() - 10 - Image.Text(text, 0, 0, 0, 0, message.font).GetWidth(); 

	if (keys != NULL) {
		message_action.sprite.SetX(local.start);
		local.image = Image.Text(text, 0.4, 0.4, 0.4, 1, message.font);
		message_action.sprite.SetImage(local.image);
	}
	else {
		message.sprite.SetX(local.start);
		local.image = Image.Text(text, 0.4, 0.4, 0.4, 1, message.font);
		message.sprite.SetImage(image);
	}
}

# he callback function is called when new message should be displayed. 
# First arg is message to display.
Plymouth.SetMessageFunction(message_callback);

###########
# refresh #
###########

fun refresh_callback () {

	# logo animation
	global.logo.count = logo.count + 0.2;
	index = Math.Int(logo.count % 48);
	global.logo.sprite.SetImage(logo[index].image);
}

# calling Plymouth.SetRefreshFunction with a function will set that 
# function to be called up to 50 times every second
Plymouth.SetRefreshFunction (refresh_callback);

