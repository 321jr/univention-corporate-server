#!/bin/bash
#
# Univention Welcome Screen
#  start welcome screen
#
# Copyright 2015 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

if [ -z "$1" ]; then
	BROWSERPIDFILE="/var/run/univention-welcome-screen.pid"

	# Add 'hide tab bar' addon for this session
	if [ ! -e /opt/firefox/distribution/bundles ]; then
		mkdir -p /opt/firefox/distribution/bundles
	fi
	ln -s '/usr/lib/univention-welcome-screen/addons/{e5bbc237-c99b-4ced-a061-0be27703295f}' /opt/firefox/distribution/bundles

	#export DISPLAY=:0
	# is KDM running?
	if pidof kdm_greet; then
		# use the x authority of the running KDM
		export $(cat /proc/$(pidof kdm_greet)/environ | tr '\0' '\n' | grep ^XAUTHORITY=)
		AUTHFILE=$(mktemp)
		cp "$XAUTHORITY" "$AUTHFILE"
		chown nobody "$AUTHFILE"
		export XAUTHORITY="$AUTHFILE"
	fi

	default_locale=en_US
	eval "$(/usr/sbin/univention-config-registry shell locale/default)"
	if [ -n "$locale_default" ]; then
		default_locale=${locale_default%%.*}
	fi

	showDesktop="false"
	if dpkg -l univention-kde 2> /dev/null > /dev/null; then
		showDesktop="true"
	fi

	PORT=13337  # TODO: use a random free port between 1024 and 49151
	URL="http://localhost/ucs-overview/welcome.html?lang=$default_locale&showDesktop=$showDesktop&port=$PORT"

	SWITCH_TTY=$(mktemp)

	# start X11 and browser ; script returns pid of browser on fd3
	if xwininfo -root -stats > /dev/null 2>/dev/null ; then
		/bin/su nobody -m --login -c "'$0' '$PORT' '$URL'" -- 3> "$BROWSERPIDFILE" 4> "$SWITCH_TTY"
	else
		/usr/bin/xinit /bin/su nobody -c "'$0' '$PORT' '$URL'" -- 3> "$BROWSERPIDFILE" 4> "$SWITCH_TTY"
	fi

	if [ "$(cat "$SWITCH_TTY")" = "YES" ]; then
		chvt 1
	fi

	# remove pidfile
	rm -f "$BROWSERPIDFILE" "$SWITCH_TTY"

	# Remove 'hide tab bar' addon
	find '/opt/firefox/distribution/bundles/{e5bbc237-c99b-4ced-a061-0be27703295f}' -delete

	exit 0
fi

### this is executed by xinit->su as nobody inside the running X server ###
PORT="$1"
shift 1

# create and export a temporary home directory
HOME=$(mktemp -d)
export HOME
profilePath=$(mktemp -d -p "$HOME")
# do not show the "know your rights" popup
echo 'user_pref("browser.rights.3.shown", true);' >> "$profilePath"/prefs.js
# do not ask for performance reporting
echo 'user_pref("toolkit.telemetry.prompted", 2);' >> "$profilePath"/prefs.js
echo 'user_pref("toolkit.telemetry.rejected", true);' >> "$profilePath"/prefs.js
echo 'user_pref("toolkit.telemetry.enabled", false);' >> "$profilePath"/prefs.js
echo 'user_pref("datareporting.policy.dataSubmissionPolicyAccepted", true);' >> "$profilePath"/prefs.js
echo 'user_pref("datareporting.policy.dataSubmissionPolicyAcceptedVersion", 1);' >> "$profilePath"/prefs.js
echo 'user_pref("datareporting.policy.dataSubmissionPolicyNotifiedTime", "1365509001307");' >> "$profilePath"/prefs.js
echo 'user_pref("datareporting.policy.dataSubmissionPolicyResponseTime", "1365517336671");' >> "$profilePath"/prefs.js
echo 'user_pref("datareporting.policy.dataSubmissionPolicyResponseType", "accepted-info-bar-dismissed");' >> "$profilePath"/prefs.js
# do not store passwords
echo 'user_pref("signon.rememberSignons", false);' >> "$profilePath"/prefs.js
# deactivate firefox autoupdate
echo 'user_pref("app.update.enabled", false);' >> "$profilePath"/prefs.js
echo 'user_pref("app.update.auto", false);' >> "$profilePath"/prefs.js
# deactivate default browser check
echo 'user_pref("browser.shell.checkDefaultBrowser", false);' >> "$profilePath"/prefs.js
# hide nav bar and menu bar
echo '<?xml version="1.0"?><RDF:RDF xmlns:NC="http://home.netscape.com/NC-rdf#" xmlns:RDF="http://www.w3.org/1999/02/22-rdf-syntax-ns#"><RDF:Description RDF:about="chrome://browser/content/browser.xul"><NC:persist RDF:resource="chrome://browser/content/browser.xul#nav-bar"/><NC:persist RDF:resource="chrome://browser/content/browser.xul#toolbar-menubar"/></RDF:Description><RDF:Description RDF:about="chrome://browser/content/browser.xul#nav-bar" collapsed="true" hidden="true" /><RDF:Description RDF:about="chrome://browser/content/browser.xul#toolbar-menubar" autohide="true" /></RDF:RDF>' > "$profilePath"/localstore.rdf
# start window manager so that firefox' menus work correctly

openbox --config-file /etc/xdg/openbox/rc_no_shortcuts.xml &
windowManager=$!
# start browser
firefox -profile "$profilePath" "$@" &
# send pid of browser to root instance of this script
FFPID=$!
echo "$FFPID" >&3

code=$(cat <<EOF
# -*- coding: UTF-8 -*-
import sys
import os
import subprocess
import SimpleHTTPServer
import SocketServer

PPID = int(sys.argv[1])
PORT = int(sys.argv[2])


class Handler(SimpleHTTPServer.SimpleHTTPRequestHandler):
	def do_OPTIONS(self):
		self.send_header("Access-Control-Allow-Origin", "*")
		self.send_response(200)
		self.end_headers()

	def do_GET(self):
		self.send_header("Access-Control-Allow-Origin", "*")
		try:
				ip, port = self.request.getpeername()
				if ip not in ('::1', '0.0.0.0', '127.0.0.1'):
						raise ValueError
		except IOError:
				return  # client disconnect
		except ValueError:
				self.send_response(403)
				return

		if self.path.startswith('/switch-cli'):
			cmd = self._switch_cli
		elif self.path.startswith('/switch-desktop'):
			cmd = self._switch_desktop
		else:
			self.send_response(404)
			self.end_headers()

		self.send_response(202)
		self.end_headers()
		httpd.server_close()
		cmd()
	do_OPTIONS = do_GET  # FIXME: Firefox doesnt evaluate ACAO

	def _switch_cli(self):
		subprocess.call('echo "YES">&4', shell=True)
		self._switch_desktop()

	def _switch_desktop(self):
		os.kill(PPID, 9)
		os._exit(0)

httpd = SocketServer.TCPServer(("", PORT), Handler)
httpd.serve_forever()
httpd.server_close()
EOF
)
python -c "$code" "$FFPID" "$PORT" 4>&4 &
http=$!

# wait for browser
wait "$FFPID"
kill "$windowManager"
kill "$http"
wait
find "$profilePath" -delete
find "$HOME" -delete
