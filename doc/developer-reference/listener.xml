<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
	<!ENTITY % entities SYSTEM "../stylesheets/macros-en.ent" >
	%entities;
]>
<chapter id="chap:listener">
	<title>Univention Directory Listener
		<indexterm><primary>Directory Listener</primary></indexterm>
		<indexterm><primary>Listener</primary><see>Directory Listener</see></indexterm>
		<indexterm><primary>Univention Directory Listener</primary><see>Directory Listener</see></indexterm>
	</title>

	<remark>PMH: Bug #29420</remark>

	<para>
	  Replication of the directory data within a UCS domain occurs via the Univention
	  Directory Listener/Notifier mechanism: 

	  <itemizedlist>
		<listitem> <simpara>
		  The &ucsUDL; service runs on all UCS systems.
		</simpara></listitem>

		<listitem><simpara>
		  On the &ucsMaster; (and possibly existing &ucsBackup; systems) the <emphasis>&ucsUDN;</emphasis> service monitors
		  changes in the LDAP directory and makes the selected changes available to the &ucsUDL;
		  services on the other UCS systems.
		</simpara></listitem>
	  </itemizedlist>

	</para>

	<para>
	  The active &ucsUDL; instances in the domain connect to a &ucsUDN;
	  service. If an LDAP change is performed on the &ucsMaster; (all other LDAP
	  servers in the domain are read-only), this is registered by the &ucsUDN;
	  and notified to the listener instances.
	</para>

	<para>
	  Each &ucsUDL; instance uses a range of &ucsUDL;
	  modules. These modules are shipped by the installed applications; the print server package
	  includes, for example, listener modules which generate the CUPS configuration.
	</para>

	<para>
	  &ucsUDL; modules can be used to communicate domain changes to services which are not
	  LDAP-compatible. The print server CUPS is an example of this: The printer definitions are not
	  read from the LDAP, but instead from the <filename>/etc/cups/printers.conf</filename>
	  file. Now, if a printer is saved in the printer management of the &ucsUMC;, it is stored
	  in the LDAP directory. This change is detected by the &ucsUDL; module
	  <emphasis>cups-printers</emphasis> and an entry added to, modified or deleted in
	  <filename>/etc/cups/printers.conf</filename> based on the data in the LDAP.
	</para>

	<section id="listener:handler">
		<title>How to write a Listener module</title>

		<para>
			Header
		</para>
		<programlisting><![CDATA[
name = "module_name"
description = "Module description"
filter = "(objectClass=*)"
attribute = ["objectClass"]
modrdn = "1"
		]]></programlisting>
		<variablelist>
			<varlistentry>
				<term><varname>name</varname></term>
				<listitem>
					<para>
						This name is used to uniquely identify the module.
						This should match with the filename containing this listener module without the <literal>.py</literal> suffix.
						The name is used to keep track of the module state in <filename class="directory">/var/lib/univention-directory-listener/handlers/</filename>.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><varname>description</varname></term>
				<listitem>
					<para>
						A short description.
						<remark>PMH: is displayed nowhere!</remark>
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><varname>filter</varname></term>
				<listitem>
					<para>
						Defines a LDAP filter which is used to match the objects the listener is interested in.
						This filter is similar to the LDAP search filter as defined in <biblioref linkend="RFC2254"/>, but more restricted:
					</para>
					<itemizedlist>
						<listitem><simpara>it is case sensitive</simpara></listitem>
						<listitem><simpara>it only support equal matches</simpara></listitem>
					</itemizedlist>
					<note>
						<para>
							The name was historically poorly chosen, since it overwrite the built-in Python function <function>filter()</function>.
						</para>
					</note>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><varname>attributes</varname></term>
				<listitem>
					<para>
						A Python list of attribute names as string, which further filters the condition, when the Listener module should be called.
						By default the empty list invokes the module on all changes.
						Otherwise the module is only invoked, when at least one attribute mentioned in the list is changed.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><varname>modrdn</varname></term>
				<listitem>
					<para>
						Setting this variable to the string <literal>1</literal> changes the signature of the function <function>handler()</function>.
						It receives an additional 4th argument, which specifies the LDAP operation triggering the change.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>

		<!-- <para> -->
		<!-- 	Handle additions. -->
		<!-- </para> -->
		<!-- <para> -->
		<!-- 	Handle removal. -->
		<!-- </para> -->
		<!-- <para> -->
		<!-- 	Handle changes. -->
		<!-- </para> -->
		<!-- <para> -->
		<!-- 	Handle renames. -->
		<!-- </para> -->
</section>

	<!-- <section id="listener:packaging"> -->
	<!-- 	<title>How to package a Listener module</title> -->
	<!-- 	<para> -->
	<!-- 		invoke-rc.d univention-directory-listener reload -->
	<!-- 	</para> -->
	<!-- </section> -->

	<section id="listener:example">
	  <title>Example</title>
	  <para>
		An example module can be found here (currently only available in German):
		<ulink url="http://wiki.univention.de/index.php?title=Entwicklung_von_Univention_Directory_Listener-Modulen"/>
	  </para>
	</section>

	<!-- <section id="listener:internal"> -->
	<!-- 	<title>Internals</title> -->
	<!-- 	<para> -->
	<!-- 		<filename class="directory">/var/lib/univention-directory-listener/</filename> -->
	<!-- 	</para> -->
	<!-- 	<para> -->
	<!-- 		<ulink url="https://hutten.knut.univention.de/mediawiki/index.php/Arvid_memo/Listener"/> -->
	<!-- 	</para> -->
	<!-- </section> -->

</chapter>
<!-- vim:set ts=2 sw=2 noet ft=docbk:-->
