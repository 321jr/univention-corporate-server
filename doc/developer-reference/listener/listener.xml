<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
	<!ENTITY % entities SYSTEM "../../stylesheets/macros-en.ent" >
	%entities;
]>
<chapter id="chap:listener">
	<title>Univention Directory Listener
		<indexterm><primary>Directory Listener</primary></indexterm>
		<indexterm><primary>Listener</primary><see>Directory Listener</see></indexterm>
		<indexterm><primary>Univention Directory Listener</primary><see>Directory Listener</see></indexterm>
	</title>

	<remark>PMH: Bug #29420</remark>

	<para>
		Replication of the directory data within a UCS domain occurs via the Univention
		Directory Listener/Notifier mechanism:

		<itemizedlist>
			<listitem><simpara>
					The &ucsUDL; service runs on all UCS systems.
			</simpara></listitem>

			<listitem><simpara>
				On the &ucsMaster; (and possibly existing &ucsBackup; systems) the <emphasis>&ucsUDN;</emphasis> service monitors
				changes in the LDAP directory and makes the selected changes available to the &ucsUDL;
				services on the other UCS systems.
			</simpara></listitem>
		</itemizedlist>
	</para>

	<para>
		The active &ucsUDL; instances in the domain connect to a &ucsUDN;
		service. If an LDAP change is performed on the &ucsMaster; (all other LDAP
		servers in the domain are read-only), this is registered by the &ucsUDN;
		and notified to the listener instances.
	</para>

	<para>
		Each &ucsUDL; instance uses a range of &ucsUDL;
		modules. These modules are shipped by the installed applications; the print server package
		includes, for example, listener modules which generate the CUPS configuration.
	</para>

	<para>
		&ucsUDL; modules can be used to communicate domain changes to services which are not
		LDAP-aware. The print server CUPS is an example of this: The printer definitions are not
		read from the LDAP, but instead from the file <filename>/etc/cups/printers.conf</filename>.
		Now, if a printer is saved in the printer management of the &ucsUMC;, it is stored
		in the LDAP directory. This change is detected by the &ucsUDL; module
		<emphasis>cups-printers</emphasis> and an entry added to, modified or deleted in
		<filename>/etc/cups/printers.conf</filename> based on the data in the LDAP.
	</para>

	<section id="listener:handler">
		<title>Structure of Listener modules</title>

		<para>
			Each listener module must declare several string constants.
			They are required by the &ucsUDL; to handle and process each module.
			They should be defined in the header at the beginning of the module.
		</para>
		<programlisting language="python"><![CDATA[
name = "module_name"
description = "Module description"
filter = "(objectClass=*)"
attribute = ["objectClass"]
modrdn = "1"
		]]></programlisting>
		<variablelist>
			<varlistentry>
				<term><varname>name</varname></term>
				<listitem>
					<para>
						This name is used to uniquely identify the module.
						This should match with the filename containing this listener module without the <literal>.py</literal> suffix.
						The name is used to keep track of the module state in <filename class="directory">/var/lib/univention-directory-listener/handlers/</filename>.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><varname>description</varname></term>
				<listitem>
					<para>
						A short description.
						It is currently unused and displayed nowhere.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><varname>filter</varname></term>
				<listitem>
					<para>
						Defines a LDAP filter which is used to match the objects the listener is interested in.
						This filter is similar to the LDAP search filter as defined in <biblioref linkend="RFC2254"/>, but more restricted:
					</para>
					<itemizedlist>
						<listitem><simpara>it is case sensitive</simpara></listitem>
						<listitem><simpara>it only support equal matches</simpara></listitem>
					</itemizedlist>
					<note>
						<para>
							The name <literal>filter</literal> was historically poorly chosen, since it overwrite the built-in Python function <function>filter()</function>.
							If that function is required for implementing the listener module, a alias-reference must be defined before overwriting the reference or <programlisting language="python">sys.modules["__builtin__"].filter</programlisting> can be used to reference the function.
						</para>
					</note>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><varname>attributes</varname></term>
				<listitem>
					<para>
						A Python list of attribute names as string, which further filters the condition, when the Listener module should be called.
						By default the empty list invokes the module on all changes.
						Otherwise the module is only invoked, when at least one attribute mentioned in the list is changed.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><varname>modrdn</varname></term>
				<listitem>
					<para>
						Setting this variable to the string <literal>1</literal> changes the signature of the function <function>handler()</function>.
						It receives an additional 4th argument, which specifies the LDAP operation triggering the change.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>

		<para>
			In addition to the static string a module must implement several functions.
			They are called in different situations of the live-cycle of the module.
		</para>
		<programlisting language="python"><![CDATA[
def initialize(): pass
def handler(dn, new, old[, command='']): pass
def clean(): pass
def prerun(): pass
def postrun(): pass
def setdata(key, value): pass
		]]></programlisting>
		<variablelist>
			<varlistentry>
				<term><function>handler(dn, old, new, command='')</function></term>
				<listitem>
					<para>
						This function is called for each change matching the <varname>filter</varname> and <varname>attributes</varname> expressions as declared in the header above.
						The distinguished name (<abbrev>dn</abbrev>) of the object is supplied as the first argument <varname>dn</varname>.
					</para>
					<para>
						Depending on the type of modification, <varname>old</varname> and <varname>new</varname> are either <literal>None</literal> or reference a dictionary of arrays, representing the multi-valued attributes of the object.
						The &ucsUDL; uses a local cache to cache the latest values of each object.
						This cache is used to supply the values for <varname>old</varname>, while the values in <varname>new</varname> are those retrieved from the LDAP directory service.
					</para>
					<para>
						If and only if the global <varname>modrdn</varname> setting is enabled, <varname>command</varname> is passed as a fourth argument.
						It contains a single letter, which indicates the type of modification.
						This can be used to distinguish an <literal>modrdn</literal> operation from a delete operation followed by a create operation.
					</para>
					<variablelist>
						<varlistentry>
							<term>modify (<literal>m</literal>)</term>
							<listitem>
								<para>
									Signals a modify operation, where an existing object is changed.
									<varname>old</varname> contains a copy of the previously cached values and <varname>new</varname> contains the new values as retrieved from the LDAP directory service.
								</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>add (<literal>a</literal>)</term>
							<listitem>
								<para>
									Signals the addition of a new object.
									<varname>old</varname> is <literal>None</literal> and <varname>new</varname> contains the values of the added object.
								</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>delete (<literal>d</literal>)</term>
							<listitem>
								<para>
									Signals the removal of a previously existing object.
									<varname>old</varname> contains a copy of the previously cached values, while <varname>new</varname> is <literal>None</literal>.
								</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>modify relative distinguished name (<firstterm>modrdn</firstterm>, <literal>r</literal>)</term>
							<listitem>
								<para>
									Signals a change in the distinguished name, which might be caused by renaming a object or moving the object from one container into one other.
									The module is called with this command instead of the <emphasis>delete</emphasis> command, so that the module can optimize that case and skip the deletion of the object.
									The module will be called again with the <emphasis>add</emphasis> command just after the <emphasis>modrdn</emphasis> command, where it should perform the rename or move operation.
									The module is responsible for keeping track of the rename-case by internally storing the previous distinguished name.
								</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term><literal>z</literal></term>
							<listitem>
								<para>
									This should be ignored.
									<remark>PMH: Unknown</remark>
								</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>new or schema change (<literal>n</literal>)</term>
							<listitem>
								<para>This command can signal two changes:</para>
								<itemizedlist>
									<listitem>
										<simpara>If <varname>dn</varname> is <literal>cn=Subschema</literal>, it signals that a schema change occurred.</simpara>
									</listitem>
									<listitem>
										<simpara>All other cases signal the initialization of a new object, which should be handles just like a normal <function>add</function> operation.</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
						</varlistentry>
					</variablelist>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><function>initialize()</function></term>
				<term><function>clean()</function></term>
				<listitem>
					<para>
						The function <function>initialize()</function> is called once when the &ucsUDL; loads the module for the first time.
						This is recorded persistently in the file <filename>/var/lib/univention-directory-listener/<replaceable>name</replaceable></filename>, where <varname>name</varname> equals the value from the header.
					</para>
					<para>
						If for whatever reason the Listener module should be reset and re-run for all matching objects, the state can be reset by running the command <command>univention-directory-listener-ctrl resync <replaceable>name</replaceable></command>.
						In that case the function <function>initialize()</function> will be called again.
					</para>
					<para>
						The function <function>clean()</function> is only called when the &ucsUDL; is initialized for the first time or is forced to <quote>re-initialize from scratch</quote> using the <option>-g</option> or <option>-i</option> option.
						The function should purge all previously generated files and return the module into a clean state.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><function>prerun()</function></term>
				<term><function>postrun()</function></term>
				<listitem>
					<para>
						For optimization the &ucsUDL; does not keep open an <abbrev>LDAP</abbrev> connection all time.
						Instead the connection is opened once at the beginning of a change and closed only if no new change arrives within 15 seconds.
						The opening is signaled by the invocation of the function <function>prerun()</function> and the closing by <function>postrun()</function>.
					</para>
					<para>
						The function <function>postrun()</function> is most often used to restart services, as restarting a service takes some time and makes the service unavailable during that time:
						The stream of changes is only used to generate new configuration files, which are only activated by restarting the service in the <function>postrun()</function> handler.
					</para>
					<warning>
						<para>
							The function <function>postrun()</function> is only called, when no change happens for 15 seconds.
							This is not on a per-module basis, but globally.
							In an ever changing system, where the stream of changes never pauses for 15 seconds, the functions would be called never!
						</para>
					</warning>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><function>setdata(key, value)</function></term>
				<listitem>
					<para>
						This function is called several times by the main &ucsUDL; to pass configuration data into the modules.
						The following <varname>key</varname>s are supplied:
					</para>
					<variablelist>
						<varlistentry>
							<term><literal>ldapserver</literal></term>
							<listitem><simpara>The host-name of the <abbrev>LDAP</abbrev> server the &ucsUDL; is using.</simpara></listitem>
						</varlistentry>
						<varlistentry>
							<term><literal>binddn</literal></term>
							<listitem><simpara>The bind distinguished name the &ucsUDL; is using to authenticate with the <abbrev>LDAP</abbrev>.</simpara></listitem>
						</varlistentry>
						<varlistentry>
							<term><literal>bindpw</literal></term>
							<listitem><simpara>The simple bind password the &ucsUDL; is using to authenticate with the <abbrev>LDAP</abbrev>.</simpara></listitem>
						</varlistentry>
						<varlistentry>
							<term><literal>basedn</literal></term>
							<listitem><simpara>The base distinguished name the &ucsUDL; is using.</simpara></listitem>
						</varlistentry>
					</variablelist>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>

	<section id="listener:example">
		<title>Listener tasks and examples
			<indexterm><primary>Directory Listener</primary><secondary>Example module</secondary></indexterm>
		</title>
		<para>
			All changes trigger a call to the function <function>handle()</function>.
			For simplicity and readability it is advisable to delegate the different change types to different sub-functions.
		</para>

		<section id="listener:example:simple">
			<title>Basic example</title>
			<para>
				The following boiler-plate delegates each change type to a separate function.
				It does not handle renames and moves explicitly, but only through the removal of the object at the old <abbrev>dn</abbrev> and the following addition at the new <abbrev>dn</abbrev>.
			</para>
			<para>
				Source code: <ulink url="&websvn;doc/developer-reference/listener/simple.py"/>
			</para>
			<programlisting language="python"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="simple.py" parse="text"/></programlisting>
		</section>

		<section id="listener:example:modrdn">
			<title>Rename and move
				<indexterm><primary>Directory Listener</primary><secondary>modrdn</secondary></indexterm>
			</title>
			<para>
				In case rename and move actions should be handled separately, use the following code:
			</para>
			<para>
				Source code: <ulink url="&websvn;doc/developer-reference/listener/modrdn.py"/>
			</para>
			<programlisting language="python"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="modrdn.py" parse="text"/></programlisting>
			<warning>
				<para>
					Please be aware that tracking the two subsequent calls for <literal>modrdn</literal> in memory might cause duplicates, if the &ucsUDL; is terminated while such an operation is performed.
					If this is problematic, saving the state on a persistent disk mist be implemented.
				</para>
			</warning>
		</section>

		<section id="listener:example:user">
			<title>Full example with packaging</title>
			<para>
				The following example shows a listener module, which logs all changes to users into the file <filename>/tmp/UserList.txt</filename>.
			</para>
			<para>
				Source code: <ulink url="&websvn;doc/developer-reference/listener/printusers/"/>
			</para>
			<programlisting language="python"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="printusers/printusers.py" parse="text"/></programlisting>
			<para>
				Some comments:
			</para>
			<itemizedlist>
				<listitem>
					<simpara>
						Overwriting <varname>__package__</varname> is currently necessary, as the &ucsUDL; imports the Listener module by its own mechanism, which is incompatible with the mechanism normally used by Python itself.
						Be aware, that this might cause problems when use <package>pickle</package>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						The <abbrev>LDAP</abbrev> filter is cleverly chosen to only match user objects, but not computer objects, which end on <literal>$</literal>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						The <varname>attribute</varname> filter further restricts the module to only trigger on changes to the numeric and symbolic user identifier and the last name of the user.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Writing a file as <emphasis>root</emphasis> in a public location like <filename class="directory">/tmp/</filename> should be avoided.
						It is only done here to show how it works.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						For testing run a command like <command>tail -f /tmp/UserList.txt &amp;</command>.
						Then create a new user or modify the <emphasis>lastname</emphasis> of an existing user to trigger the module.
					</simpara>
				</listitem>
			</itemizedlist>
			<para>
				For packaging the following files are required:
			</para>
			<variablelist>
				<varlistentry>
					<term><filename>debian/printusers.install</filename></term>
					<listitem>
						<para>
							The module should be installed into the directory <filename class="directory">/usr/lib/univention-directory-listener/system/</filename>.
						</para>
						<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="printusers/debian/printusers.install" parse="text"/></programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>debian/printusers.postinst</filename></term>
					<term><filename>debian/printusers.postrm</filename></term>
					<listitem>
						<para>
							The &ucsUDL; must be restarted after package installation and removal:
						</para>
						<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="printusers/debian/printusers.postinst" parse="text"/></programlisting>
						<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="printusers/debian/printusers.postrm" parse="text"/></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>

		<section id="listener:example:setdata">
			<title>A little bit more object oriented</title>
			<para>
				For larger modules it is recommended to use a more object-oriented design like the following example, which logs referential integrity violations into a file.
			</para>
			<para>
				Source code: <ulink url="&websvn;doc/developer-reference/listener/obj.py"/>
			</para>
			<programlisting language="python"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="obj.py" parse="text"/></programlisting>
		</section>
	</section>

	<section id="listener:details">
		<title>Technical details
			<indexterm><primary>Directory Listener</primary><secondary>Debug</secondary></indexterm>
		</title>

		<!--
		<section id="listener:details:packaging">
			<title>Packaging details</title>
			<itemizedlist>
				<listitem><simpara>The module should be installed into the directory <filename class="directory">/usr/lib/univention-directory-listener/system/</filename>.</simpara></listitem>
				<listitem><simpara>The process <command>univention-directory-listener</command> must be restarted by the <filename>postinst</filename> and <filename>postrm</filename> Debian package maintainer scripts.</simpara></listitem>
			</itemizedlist>
		</section>
		-->

		<section id="listener:details:credentials">
			<title>User-ID and credentials
				<indexterm><primary>Directory Listener</primary><secondary>Credentials</secondary></indexterm>
			</title>
			<para>
				The Listener runs with the effective permissions of the user <literal>listener</literal>.
				If root-privileges are required, <function>listener.setuid()</function> can be used to switch the effective UID.
				When done, <function>listener.unsetuid()</function> should be called to drop back to the <literal>listener</literal> UID.
			</para>
		</section>

		<section id="listener:details:cache">
			<title>Internal cache
				<indexterm><primary>Directory Listener</primary><secondary>Cache</secondary></indexterm>
			</title>
			<para>
				The directory <filename class="directory">/var/lib/univention-directory-listener/</filename> contains several files:
			</para>
			<variablelist>
				<varlistentry>
					<term><filename>cache.db</filename>, <filename>cache.db.lock</filename></term>
					<listitem>
						<para>
							The cache file contains a copy of all objects and their attributes.
							It is used to supply the old values supplied through the <varname>old</varname> parameter, when the function <function>handle()</function> is called.
						</para>
						<para>
							The cache is also used to keep track, for which object which module was called.
							This is required when a new module is added, which is invoked for all already existing objects when the &ucsUDL; is restarted.
						</para>
						<para>
							On Domaincontrollers the cache could be replaced by doing a query to the local LDAP server, before the new values are written into it.
							But &ucsMember; do not have a local LDAP server, so there the cache is needed.
							Also note that the cache keeps track of the associated Listener modules, which is not available from the LDAP.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>notifier_id</filename></term>
					<listitem>
						<para>
							This file contains the <firstterm>notifier id</firstterm> as last queried from the &ucsUDN;.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename class="directory">handlers/</filename></term>
					<listitem>
						<para>
							For each module the directory contains a text file consisting of a single number.
							The name of the file is derived from the values of the variable <varname>name</varname> as defined in each Listener module.
							The number is to be interpreted as a bit-field of <constant>HANDLER_INITIALIZED=0x1</constant> and <constant>HANDLER_READY=0x2</constant>.
							If both bits are set, it indicates that the module was successfully initialized by running the function <function>initialize()</function>.
							Otherwise both bits are unset.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>
				The package <package>univention-directory-listener</package> contains several commands useful for controlling and debugging problems with the &ucsUDL;.
				This can be useful for debugging Listener cache inconsistencies.
			</para>

			<section id="listener:commands:ctrl">
				<title>univention-directory-listener-ctrl</title>
				<para>
					The command <command>univention-directory-listener-ctrl resync <replaceable>name</replaceable></command> can be used to reset and re-initialize a Module.
					It stops any currently running listener process, removes the state file for the specified module and starts the listener process again.
					This forces the functions <function>clean()</function> and <function>initialize()</function> to be called one after each other.
				</para>
			</section>

			<section id="listener:commands:dump">
				<title>univention-directory-listener-dump</title>
				<para>
					The command <command>univention-directory-listener-dump</command> can be used to dump the cache file <filename>/var/lib/univention-directory-listener/cache.db</filename>.
					The &ucsUDL; must be stopped first by invoking <command>service univention-directory-listener stop</command>.
					It outputs the cache in a <abbrev>LDAP</abbrev> Data Interchange Format (<abbrev>LDIF</abbrev>) compatible format.
				</para>
			</section>

			<section id="listener:commands:verify">
				<title>univention-directory-listener-verify
					<indexterm><primary>Directory Listener</primary><secondary>Verify</secondary></indexterm>
				</title>
				<para>
					The command <command>univention-directory-listener-verify</command> can be used to compare the content of the cache file <filename>/var/lib/univention-directory-listener/cache.db</filename> to the content of an <abbrev>LDAP</abbrev> server.
					The &ucsUDL; must be stopped first by invoking <command>service univention-directory-listener stop</command>.
					<abbrev>LDAP</abbrev> credentials must be supplied at the command line.
					For example, the following command would use the machine secrets:
					<programlisting language="sh">
univention-directory-listener-verify \
	-b "$(ucr get ldap/base)" \
	-D "$(ucr get ldap/hostdn)" \
	-w "$(cat /etc/machine.secret)"
					</programlisting>
				</para>
			</section>

			<section id="listener:commands:getnid">
				<title>get_notifier_id.py
					<indexterm><primary>Directory Listener</primary><secondary>Notifier ID</secondary></indexterm>
				</title>
				<para>
					The command <command>/usr/share/univention-directory-listener/get_notifier_id.py</command> can be used to get the latest ID from the notifier.
					This is done by querying the &ucsUDN; running on the <abbrev>LDAP</abbrev> server configured through the &ucsUCRV; <envar>ldap/master</envar>.
					The returned value should be equal to the value currently stored in the file <filename>/var/lib/univention-directory-listener/notifier_id</filename>.
					Otherwise the &ucsUDL; might still be processing a transaction or might indicate a problem with the &ucsUDL;
				</para>
			</section>
		</section>

		<section id="listener:details:internal">
			<title>Internal working</title>
			<remark>
				PMH: <ulink url="https://hutten.knut.univention.de/mediawiki/index.php/Arvid_memo/Listener"/>
			</remark>
			<para>
				The Listener/Notifier mechanism is used to trigger arbitrary actions when changes occur in the <abbrev>LDAP</abbrev> directory service.
				In addition to the <abbrev>LDAP</abbrev> server <command>slapd</command> it consists of two other services:
				The &ucsUDN; service runs next to the <abbrev>LDAP</abbrev> server and broadcasts change information to interested parties.
				The &ucsUDL; service listens for those notifications, downloads the changes and runs arbitrary local actions like storing the data in a local <abbrev>LDAP</abbrev> server for replication or generating configuration files for non-<abbrev>LDAP</abbrev>-aware local services.
			</para>
			<figure id="listener:schema"><title>Listener/Notifier mechanism</title>
				<graphic scalefit="1" width="80%" fileref="illustrations/ListenerNotifier.png"/>
			</figure>
			<para>
				The following steps occur on changes:
			</para>
			<procedure>
				<title>Listener/Notifier prcoedure</title>
				<step>
					<para>
						The <abbrev>LDAP</abbrev> object is modified on the &ucsMaster;.
						Changes initiated on all other system roles are re-directed to the master.
					</para>
				</step>
				<step>
					<para>
						The overlay-module <filename>translog</filename> appends the <abbrev>DN</abbrev> to the file <filename>/var/lib/univention-ldap/listener/listener</filename><footnote><simpara><varname>FILE_NAME_LISTENER</varname>, <varname>TRANSACTION_FILE</varname></simpara></footnote>.
					</para>
				</step>
				<step>
					<para>
						The &ucsUDN; watches that file, picks up and removes the modification.
						It assigns the next transaction number and writes it into the file <filename>/var/lib/univention-ldap/notify/transaction</filename><footnote><simpara><varname>FILE_NAME_TF</varname></simpara></footnote>, including the <abbrev>DN</abbrev> and change-type.
						For efficient access by transaction ID the index <filename>transaction.index</filename> is updated.
					</para>
				</step>
				<step>
					<para>
						All Listeners, which connected to <abbrev>TCP</abbrev> port 6669, get notified of the new transaction.
					</para>
				</step>
				<step>
					<para>
						Each Listener such notified queries the Notifier for the latest transaction ID, <abbrev>DN</abbrev> and change-type.
						The ID is written into the file <filename>/var/lib/univention-directory-listener/notifier_id</filename>.
					</para>
				</step>
				<step>
					<para>
						Each Listener opens a connection to their LDAP server configured through &ucsUCRV; <envar>ldap/master</envar> and <envar>ldap/server/addition:</envar>.
						It tries to retrieve the latest state of the object identified through the <abbrev>DN</abbrev>, which might be blocked by <firstterm>selective replication</firstterm>.
						If that fails and nothing is returned, the process stops here and closes the <abbrev>LDAP</abbrev> connection.
					</para>
				</step>
				<step>
					<para>
						On a &ucsBackup; the &ucsUDL; writes the transaction data to the file <filename>/var/lib/univention-ldap/listener/listener</filename><footnote><simpara><varname>FILE_NAME_LISTENER</varname>, <varname>TRANSACTION_FILE</varname></simpara></footnote> to allow the &ucsUDN; to be cascaded.
						This can be configured with the option <option>-o</option> of <command>univention-directory-listener</command> and is done for load balancing and reliability reasons.
					</para>
				</step>
				<step>
					<para>
						The old state of the object is fetched from the Listener cache.
					</para>
				</step>
				<step>
					<para>
						For each module it is checked, if the module matches either the old or new state according to the variables <varname>filter</varname> and <varname>attributes</varname>.
						If not, the module is skipped.
					</para>
				</step>
				<step>
					<para>
						If the function <function>prerun()</function> of module was not yet called, this is done to signal the start of changes.
					</para>
				</step>
				<step>
					<para>
						The function <function>handler()</function> is called for the module, passing in the <abbrev>DN</abbrev> with the old and new state.<footnote><simpara>
								In previous releases of the &ucsUDL; modules could modify the new state, which was written to the local <abbrev>LDAP</abbrev> server by the last module.
								This lead to some very strange problems and was disabled therefore.
								Each module now gets its own new copy of the values and thus can no longer communicate with subsequent modules.
						</simpara></footnote>
					</para>
				</step>
				<step>
					<para>
						The cache is updated with the new values, including the names of the modules which successfully handled that object.
						This guarantees that the module is still called, even when the filter criteria would no longer match the object after modification.
					</para>
				</step>
				<step>
					<para>
						After 15 seconds of inactivity the function <function>postrun()</function> is invoked for all prepared modules.
						This signals the end of changes and requests the module to release its resources and/or start pending operations.
					</para>
				</step>
			</procedure>
		</section>
	</section>

</chapter>
<!-- vim:set ts=2 sw=2 noet ft=docbk:-->
