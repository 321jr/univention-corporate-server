<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
	<!ENTITY % entities SYSTEM "../../stylesheets/macros-en.ent" >
	%entities;
]>
<chapter id="chap:ldap" status="draft">
	<title>Lightweight Directory Access Protocol (<acronym>LDAP</acronym>) in UCS
	</title>
	<remark>PMH: Bug #31269</remark>
	<important>
		<para>
			This chapter is a draft and work in progress!
			Feedback is appreciated.
		</para>
	</important>

	<section id="ldap:general">
		<title>General</title>
		<para>
			An <acronym>LDAP</acronym> server provides authenticated and controlled access to directory objects over the network.
			<acronym>LDAP</acronym> objects consist of a collection of attributes which conform to so called <acronym>LDAP</acronym> schemata.
			An in depth documentation of <acronym>LDAP</acronym> is beyond the scope of this document, other sources cover this topic exaustively,
			e.g. <ulink url="http://www.zytrax.com/books/ldap/"/> or the man pages (<literal>slapd.conf</literal>, <literal>slapd.access</literal>).
		</para>
		<para>
			At least it should be noted that OpenLDAP offers two fundamentally different tool sets for direct access or modification of LDAP data:
			The slap* commands (<literal>slapcat</literal>, etc.) are very low level, operating directly on the <acronym>LDAP</acronym> backend data and
			should only be used in rare cases, usually with the LDAP server not running. The ldap* commands (<literal>ldapsearch</literal>, etc.) on the
			other hand are the proper way to perform LDAP operations from the command line and their functionality can equivalently be used from all major
			programming languages.
		</para>
		<para>
			On top of the raw <acronym>LDAP</acronym> layer, the Univention Directory Manager offers an object model on a higher level,
			featuring advanced object semantics (<xref linkend="chap:udm"/>). That is the level that usually appropriate for app developpers, which
			should be considered before venturing down to the level of direct <acronym>LDAP</acronym> operations. On the other hand, for the development
			of new UDM extensions it is important to understand some of the essential concepts of <acronym>LDAP</acronym> as used in UCS.
		</para>
		<para>
			One essential traight of <acronym>LDAP</acronym> as used in UCS, is the strict enforcement of <acronym>LDAP</acronym> schemata.
			An <acronym>LDAP</acronym> server refuses to start if an unknown <acronym>LDAP</acronym> attribute is referenced either in the configuration
			or in the backend data. This makes it critically important to install schemata on all systems. To simplify this task UCS features a builtin
			mechanism for automatic schema replication to all UCS hosted <acronym>LDAP</acronym> servers in the UCS domain
			(see <xref linkend="chap:listener"/>).
			The schema replication mechanism is triggered by installation of a new schema extension package on the UCS master.
			For redundancy it is strongly recommended to install schema extension packages also on the UCS backup systems. This way, a UCS backup
			can replace a UCS master in case the master needs to be replaced for some reason. To simplify these tasks even further, UCS offers methods
			to register new <acronym>LDAP</acronym> schemata and associated <acronym>LDAP</acronym> ACLs from any UCS system.
		</para>
	</section>

	<section id="settings:ldapschema">
		<title>Packaging LDAP Schema Extensions</title>
		<para>
			For some purposes, e.g. for app installation, it is convenient to be able to register a new <acronym>LDAP</acronym> schema extension
			from any system in the UCS domain. For this purpose, the schema extension can be stored as a special type of UDM object. The module
			responsible for this type of objects is called <literal>settings/ldapschema</literal>. As these objects are replicated throughout the
			UCS domain, the &ucsMaster; and &ucsBackup; systems listen for modifications of these objects and integrate them into the local
			<acronym>LDAP</acronym> schema directory. As noted above, this simplifies the task of keeping the schema on the &ucsBackup; systems
			up to date with that on the &ucsMaster;.
		</para>
		<para>
			The commands to create the <acronym>LDAP</acronym> schema extension objects in UDM may be put into any join script (<xref linkend="chap:join"/>).
			A <acronym>LDAP</acronym> schema extension object is created by using the <acronym>UDM</acronym> command line interface <command>univention-directory-manager</command> or its alias <command>udm</command>.
			<acronym>LDAP</acronym> schema extension objects can be stored anywhere in the <acronym>LDAP</acronym> directory, but the recommended location would be <literal>cn=ldapschema,cn=univention,</literal> below the <acronym>LDAP</acronym> base.
			Since the join script creating the attribute may be called on multiple hosts, it is a good idea to add the <option>--ignore_exists</option> option, which suppresses the error exit code in case the object already exists in <acronym>LDAP</acronym>.
		</para>
		<para>
			The UDM module <literal>settings/ldapschema</literal> requires several parameters:
		</para>
		<variablelist>
			<varlistentry><term><literal>name</literal> (required)</term>
				<listitem>
					<simpara>
						Name of the schema extension.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>data</literal> (required)</term>
				<listitem>
					<simpara>
						The actual schema data in bzip2 and base64 encoded format.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>filename</literal> (required)</term>
				<listitem>
					<simpara>
						The file name the schema should be written to on &ucsMaster; and &ucsBackup;. The file name must not contain any path elements.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>package</literal> (required)</term>
				<listitem>
					<simpara>
						Name of the Debian package which creates the object.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>packageversion</literal> (required)</term>
				<listitem>
					<simpara>
						Version of the Debian package which creates the object. For object modifications the version number needs to increase unless the package name is modified as well.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>appidentifier</literal> (optional)</term>
				<listitem>
					<simpara>
						The identifier of the app which creates the object. This is important to indicate that the object is required as long as the app is installed anywhere in the UCS domain.
						Defaults to <literal>string</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>active</literal> (internal)</term>
				<listitem>
					<simpara>
						A boolean flag used internally by the &ucsMaster; to signal availability of the schema extension (default: <literal>FALSE</literal>).
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			Since many of these parameters are determined automatically by the <emphasis>ucs_registerLDAPExtension</emphasis> shell library function, it is recommended to use the shell library function to create these objects (see <xref linkend="app:ucs_registerLDAPExtension"/>).
		</para>
		<para>
			Example usage in join script:
		</para>
		<programlisting language="sh"><![CDATA[
export UNIVENTION_APP_IDENTIFIER="appID-appVersion"	## example
. /usr/share/univention-lib/ldap.sh

ucs_registerLDAPExtension "$@" \
  --schema /path/to/appschemaextension.schema \
  --ucsversionstart 3.2-0 \
  --ucsversionend 3.2-99
		]]></programlisting>
	</section>

	<section id="settings:ldapacl">
		<title>Packaging LDAP ACL Extensions</title>
		<para>
			For some purposes, e.g. for app installation, it is convenient to be able to register a new <acronym>LDAP</acronym> ACL extension
			from any system in the UCS domain. For this purpose, the UCR template for an ACL extension can be stored as a special type of UDM object.
			The module responsible for this type of objects is called <literal>settings/ldapacl</literal>. As these objects are replicated throughout the
			UCS domain, the &ucsMaster;, &ucsBackup; and &ucsSlave; systems listen for modifications on these objects and integrate them into the local
			<acronym>LDAP</acronym> ACL UCR template directory. This simplifies the task of keeping the <acronym>LDAP</acronym> ACLs on the &ucsBackup; systems
			up to date with those on the &ucsMaster;.
		</para>
		<para>
			The commands to create the <acronym>LDAP</acronym> ACL extension objects in UDM may be put into any join script (<xref linkend="chap:join"/>).
			A <acronym>LDAP</acronym> ACL extension object is created by using the <acronym>UDM</acronym> command line interface <command>univention-directory-manager</command> or its alias <command>udm</command>.
			<acronym>LDAP</acronym> ACL extension objects can be stored anywhere in the <acronym>LDAP</acronym> directory, but the recommended location would be <literal>cn=ldapacl,cn=univention,</literal> below the <acronym>LDAP</acronym> base.
			Since the join script creating the attribute may be called on multiple hosts, it is a good idea to add the <option>--ignore_exists</option> option, which suppresses the error exit code in case the object already exists in <acronym>LDAP</acronym>.
		</para>
		<para>
			The UDM module <literal>settings/ldapacl</literal> requires several parameters:
		</para>
		<variablelist>
			<varlistentry><term><literal>name</literal> (required)</term>
				<listitem>
					<simpara>
						Name of the ACL extension.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>data</literal> (required)</term>
				<listitem>
					<simpara>
						The actual ACL UCR template data in bzip2 and base64 encoded format.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>filename</literal> (required)</term>
				<listitem>
					<simpara>
						The file name the ACL UCR template data should be written to on &ucsMaster;, &ucsBackup; and  &ucsSlave;. The file name must not contain any path elements.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>package</literal> (required)</term>
				<listitem>
					<simpara>
						Name of the Debian package which creates the object.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>packageversion</literal> (required)</term>
				<listitem>
					<simpara>
						Version of the Debian package which creates the object. For object modifications the version number needs to increase unless the package name is modified as well.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>appidentifier</literal> (optional)</term>
				<listitem>
					<simpara>
						The identifier of the app which creates the object. This is important to indicate that the object is required as long as the app is installed anywhere in the UCS domain.
						Defaults to <literal>string</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>ucsversionstart</literal> (optional)</term>
				<listitem>
					<simpara>
						Minimal required UCS version. The UCR template for the ACL is only activated by systems with a version higher than or equal to this.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>ucsversionend</literal> (optional)</term>
				<listitem>
					<simpara>
						Maximal required UCS version. The UCR template for the ACL is only activated by systems with a version lower or equal than this. To specify validity for the whole 3.2-x release range a value like 3.2.99 may be used.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>active</literal> (internal)</term>
				<listitem>
					<simpara>
						A boolean flag used internally by the &ucsMaster; to signal availability of the ACL extension on the &ucsMaster; (default: <literal>FALSE</literal>).
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			Since many of these parameters are determined automatically by the <emphasis>ucs_registerLDAPExtension</emphasis> shell library function, it is recommended to use the shell library function to create these objects (see <xref linkend="app:ucs_registerLDAPExtension"/>).
		</para>
		<para>
			Example usage in join script:
		</para>
		<programlisting language="sh"><![CDATA[
export UNIVENTION_APP_IDENTIFIER="appID-appVersion"	## example
. /usr/share/univention-lib/ldap.sh

ucs_registerLDAPExtension "$@" \
  --acl /path/to/appaclextension.acl
		]]></programlisting>
	</section>
</chapter>
