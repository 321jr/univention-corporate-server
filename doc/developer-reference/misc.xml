<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
	<!ENTITY % entities SYSTEM "../stylesheets/macros-en.ent" >
	%entities;
]>
<chapter id="chap:misc">
	<title>Miscellaneous</title>
	<important>
		<para>
			This chapter is a draft and work in progress!
			Feedback is already appreciated.
		</para>
	</important>

	<section id="misc:database" status="draft">
		<title>Databases
			<indexterm><primary>Database</primary></indexterm>
		</title>
		<para><acronym>UCS</acronym> ships with two major database management systems, which are used for <acronym>UCS</acronym> internal purposes, but can also be used for custom additions.</para>

		<section id="misc:postgresql">
			<title>PostgreSQL
				<indexterm><primary>Database</primary><secondary>PostgreSQL</secondary></indexterm>
			</title>
			<para><acronym>UCS</acronym> uses PostgreSQL by default for its package tracking database, which collects the state and versions of packages installed on all systems of the domain.</para>
		</section>

		<section id="misc:mysql">
			<title>MySQL
				<indexterm><primary>Database</primary><secondary>MySQL</secondary></indexterm>
			</title>
			<para>By default the MySQL root password is set to ___. Debian provides the <package>dbconfig</package> package, which can be used to create and modify additional databases from maintainer scripts. <!--bug>19354</bug--></para>
		</section>
	</section>

	<section id="misc:ucslint">
		<title>UCS lint
			<indexterm><primary>Packaging</primary><secondary>checking for errors</secondary></indexterm>
		</title>
		<para>
			Use <command>ucslint</command> to find packaging mistakes.
			Called best from <filename>debian/rules</filename>, needs build dependency on <package>ucslint</package>.
		</para>
		<programlisting><![CDATA[
override_dh_auto_test:
	dh_auto_test
	ucslint
		]]></programlisting>
		<para>
			For each issue, <command>ucslint</command> prints one line, which line contains several fields separated by <literal>:</literal>:
		</para>
		<synopsis><replaceable>severity</replaceable>:<replaceable>module-id</replaceable>-<replaceable>test-id</replaceable><optional>:<replaceable>filename</replaceable><optional>:<replaceable>line-number</replaceable><optional>:<replaceable>column-number</replaceable></optional></optional></optional>: <replaceable>message</replaceable></synopsis>
		<para>
			For some issues extra context data is printed on the following lines, which are indented with space characters.
			All other lines start with a letter specifying the severity:
		</para>
		<variablelist>
			<varlistentry>
				<term><literal>E</literal></term>
				<listitem><simpara>Error: Missing data, conflicting information, real bugs.</simpara></listitem>
			</varlistentry>
			<varlistentry>
				<term><literal>W</literal></term>
				<listitem><simpara>Warning: Possible bug, but might be okay in some situations.</simpara></listitem>
			</varlistentry>
			<varlistentry>
				<term><literal>I</literal></term>
				<listitem><simpara>Informational: found some issue, which needs further investigation.</simpara></listitem>
			</varlistentry>
			<varlistentry>
				<term><literal>S</literal></term>
				<listitem><simpara>Style: There might be some better less error prone way.</simpara></listitem>
			</varlistentry>
		</variablelist>
		<para>
			The severities are ordered by importance.
			By default <command>ucslint</command> only aborts on errors, but this can be overwritten using the <option>--exitcode-categories</option> argument followed by a subset of the characters <literal>EWIS</literal>.
		</para>
		<para>
			After the severity an identifier follows, which uniquely identifies the module and the test.
			The module is given as four digits, which is followed by a dash and the number of the test in that module.
			Currently the following modules exist:
		</para>
		<variablelist>
			<varlistentry>
				<term>0001-CheckJoinScript</term>
				<listitem><simpara>Checks join file issues</simpara></listitem>
			</varlistentry>
			<varlistentry>
				<term>0002-CopyPasteErrors</term>
				<listitem><simpara>Checks for copy&amp;paste error from example files</simpara></listitem>
			</varlistentry>
			<varlistentry>
				<term>0004-CheckUCR</term>
				<listitem><simpara>Checks UCR info files</simpara></listitem>
			</varlistentry>
			<varlistentry>
				<term>0006-CheckPostinst</term>
				<listitem><simpara>Checks Debian maintainer scripts</simpara></listitem>
			</varlistentry>
			<varlistentry>
				<term>0007-Changelog</term>
				<listitem><simpara>Checks <filename>debian/changelog</filename> file for conformance with Univention rules</simpara></listitem>
			</varlistentry>
			<varlistentry>
				<term>0008-Translations</term>
				<listitem><simpara>Checks translation files for completeness and errors</simpara></listitem>
			</varlistentry>
			<varlistentry>
				<term>0009-Python</term>
				<listitem><simpara>Checks Python files for common errors</simpara></listitem>
			</varlistentry>
			<varlistentry>
				<term>0010-Copyright</term>
				<listitem><simpara>Checks for Univention copyright</simpara></listitem>
			</varlistentry>
			<varlistentry>
				<term>0011-Control</term>
				<listitem><simpara>Checks <filename>debian/control</filename> file for errors</simpara></listitem>
			</varlistentry>
			<varlistentry>
				<term>0013-bashism</term>
				<listitem><simpara>Checks files using <filename>/bin/sh</filename> for BASH constructs</simpara></listitem>
			</varlistentry>
			<varlistentry>
				<term>0014-Depends</term>
				<listitem><simpara>Checks files for missing runtime dependencies on UCS packages</simpara></listitem>
			</varlistentry>
			<varlistentry>
				<term>0015-FuzzyNames</term>
				<listitem><simpara>Checks for mis-spellings of <wordasword>Univention</wordasword></simpara></listitem>
			</varlistentry>
			<varlistentry>
				<term>0016-Deprecated</term>
				<listitem><simpara>Checks files for usage of deprecated functions</simpara></listitem>
			</varlistentry>
			<varlistentry>
				<term>0017-Shell</term>
				<listitem><simpara>Checks shell scripts for quoting errors</simpara></listitem>
			</varlistentry>
		</variablelist>
		<para>
			The module and test number may be optionally followed by a file name, line number in that file, and column number in that line, where the issue was found.
			After that a message is printed, which describes the issue in more detail.
		</para>
		<para>
			Since <command>ucslint</command> is very Univention centric, many of its tests return false positives for software packages by other parties.
			Therefore many tests need to be disables.
			For that a file <filename>debian/ucslint.overrides</filename> can be created with list of modules and test, which should be ignored.
			Without specifying the optional filename, line number and column number, the test ist globally disabled for all files.
		</para>
	</section>

	<section id="misc:lib">
		<title>Functions Libraries
			<indexterm><primary>Packaging</primary><secondary>library functions</secondary></indexterm>
		</title>
		<para>
			The source package <package>univention-lib</package> provides two binary packages <package>shell-univention-lib</package> and <package>python-univention-lib</package>, which contain common library functions usable in shell or Python programs.
		</para>
		<remark>PMH: poorly documented and of qustionale code quality</remark>

		<section>
			<title><package>shell-univention-lib</package></title>
			<para>
				This package provides several libraries in <filename class="directory">/usr/share/univention-lib/</filename>, which can be used in shell scripts.
			</para>
			<variablelist>
				<varlistentry>
					<term><filename>/usr/share/univention-lib/base.sh</filename></term>
					<listitem>
						<para>
							This file contains some helpers to create log files, handle unjoin scripts (<xref linkend="join:unjoin"/>) or query the network configuration.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>/usr/share/univention-lib/ldap.sh</filename></term>
					<listitem>
						<para>
							This file contains some helpers to query data from LDAP, register and unregister service entries and LDAP schema.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>/usr/share/univention-lib/ucr.sh</filename></term>
					<listitem>
						<para>
							This file contains some helpers to handle bool'ean &ucsUCRV;s and handle UCR files on package removal.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>/usr/share/univention-lib/umc.sh</filename></term>
					<listitem>
						<para>
							This file contains some helpers to handle UMC (<xref linkend="chap:umc"/>) related tasks.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>/usr/share/univention-lib/all.sh</filename></term>
					<listitem>
						<para>
							This is a convenient library, which just includes all libraries mentioned above.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>

		<section>
			<title><package>python-univention-lib</package></title>
			<para>
				This package provides several Python libraries located in the module <package>univention.lib</package>.
			</para>
			<variablelist>
				<varlistentry>
					<term><package>univention.lib.atjobs</package></term>
					<listitem>
						<remark>PMH: Bug #27670</remark>
						<para>
							This module contains functions to handle at-jobs.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><package>univention.lib.error</package></term>
					<listitem>
						<para>
							This module provides the function <function>formatTraceback</function>, which returns the full stack trace for an exception.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><package>univention.lib.fstab</package></term>
					<listitem>
						<para>
							This module provides some functions for handling the file <filename>/etc/fstab</filename>.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><cmdsynopsis>
							<command>/usr/share/pyshared/univention/lib/getMailFromMailOrUid.py</command>
							<group choice="req">
								<arg choice="plain">uid</arg>
								<arg choice="plain">email</arg>
							</group>
							</cmdsynopsis></term>
					<listitem>
						<remark>PMH: WTF?</remark>
						<para>
							This program returns the distinguished name of the user, which either matches the user identifier or email address given to the command as an argument.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><package>univention.lib.i18n</package></term>
					<listitem>
						<para>
							This module provides some classes to handle texts and their translations.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><package>univention.lib.listenerSharePath</package></term>
					<listitem>
						<para>
							This module provides some helper functions internally used by the Directory Listener module handling file shares.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><package>univention.lib.locking</package></term>
					<listitem>
						<para>
							This module provides some functions to implement mutual exclusion using file objects as locking objects.
						</para>
						<remark>PMH: this should be re-witten using a Python context manager</remark>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><package>univention.lib.package_manager</package></term>
					<listitem>
						<para>
							This module provides some wrappers for <command>dpkg</command> and <application>APT</application>, which add functions for progress reporting.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><package>univention.lib.shell</package></term>
					<listitem>
						<para>
							This module provides two functions for escaping shell command line arguments and creating at jobs.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><package>univention.lib.ucrLogrotate</package></term>
					<listitem>
						<para>
							This module provides some helper functions internally used for parsing the &ucsUCRV;s related to <citerefentry><refentrytitle>logrotate</refentrytitle><manvolnum>8</manvolnum></citerefentry>.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
	</section>

	<section id="misc:acl" status="draft">
		<title>Login Access Control</title>
		<para>
			<filename>/etc/security/access-*.conf</filename>
		</para>
	</section>

	<section id="misc:nacl" status="draft">
		<title>Network Packet Filter</title>
		<remark>PMH: Bug #24589 is outdated, see Bug #23577 for latest format</remark>

		<para>
			Firewall rules are setup by <package>univention-firewall</package> and can be configured through &ucsUCR; or by providing additional UCR templates.
		</para>

		<section id="misc:nacl:ucr">
			<title>Filter rules by &ucsUCR;</title>
			<para>
				Besides pre-defined service definitions, Univention Firewall also allows the implementation of package filter rules via &ucsUCR;.
				These rules are included in <filename class="directory">/etc/security/netfilter.d/</filename> via a &ucsUCR; module.
			</para>
			<para>
				Filter rules can be provided via packages or can be configured locally by the administrator.
				Local rules have a higher priority and overwrite rules provided by packages.
			</para>
			<para>
				All &ucsUCR; settings for filter rules are entered in the following format:
			</para>
			<variablelist>
				<varlistentry>
					<term>Local filter rule</term>
					<listitem>
						<simpara>
							<literal>security/packetfilter/</literal><replaceable>protocol</replaceable><literal>/</literal><replaceable>port(s)</replaceable><literal>/</literal><replaceable>address</replaceable><literal>=</literal><replaceable>policy</replaceable>
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Package filter rule</term>
					<listitem>
						<simpara>
							<literal>security/packetfilter/package/</literal><replaceable>package</replaceable><literal>/</literal><replaceable>protocol</replaceable><literal>/</literal><replaceable>port(s)</replaceable><literal>/</literal><replaceable>address</replaceable><literal>=</literal><replaceable>policy</replaceable>
						</simpara>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>
				The following values need to be filled in:
			</para>
			<variablelist>
				<varlistentry>
					<term><replaceable>package</replaceable> (only for packaged rules)</term>
					<listitem>
						<para>
							The name of the package providing the rule.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><replaceable>protocol</replaceable></term>
					<listitem>
						<para>
							Can be either <literal>tcp</literal> for server services using the <firstterm>Transmission Control Protocol</firstterm> or <literal>udp</literal> for services using the stateless <firstterm>User Datagram Protocol</firstterm>.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><replaceable>port</replaceable></term>
					<term><replaceable>min-port</replaceable><literal>:</literal><replaceable>max-port</replaceable></term>
					<listitem>
						<para>
							Ports can be defined either as a single number between 1 and 65535 or as a range separated by a colon:
							<replaceable>min-port</replaceable><literal>:</literal><replaceable>max-port</replaceable>
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><replaceable>address</replaceable></term>
					<listitem>
						<para>
							This can be either <literal>ipv4</literal> for all <acronym>IPv4</acronym> addresses, <literal>ipv6</literal> for all <acronym>IPv6</acronym> addresses, <literal>all</literal> for both <acronym>IPv4</acronym> and <acronym>IPv6</acronym> addresses, or any explicitly specified <acronym>IPv4</acronym> or <acronym>IPv6</acronym> address.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><replaceable>policy</replaceable></term>
					<listitem>
						<para>
							If a rule is registered as <literal>DENY</literal>, then packages to this port will be silently discarded;
							<literal>REJECT</literal> can be used to send back an <acronym>ICMP</acronym> message <literal>port unreachable</literal> instead.
							Using <literal>ACCEPT</literal> explicitly allows such packets.
							(IPtables rules are executed until one rule applies;
							thus, if a package is accepted by a rule which is discarded by a later rule, then the rule for discarding the package does not become valid).
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>
				Filter rules can optionally be described by setting additional &ucsUCRV;s.
				For each rule and language, an additional variable suffixed by <quote><literal>/</literal><replaceable>language</replaceable></quote> can be used to add a descriptive text.
			</para>
			<para>
				Some examples:
			</para>
			<example>
				<title>Local firewall rule</title>
				<programlisting><![CDATA[
security/packetfilter/tcp/2000/all=DENY
security/packetfilter/tcp/2000/all/en=Drop all packets to TCP port 2000
security/packetfilter/udp/500:600/all=ACCEPT
security/packetfilter/udp/500:600/all/en=Accept UDP port 500 to 600
				]]></programlisting>
			</example>
			<para>
				All package rules can be globally disabled by setting the &ucsUCRV; <envar>security/packetfilter/use_packages</envar> to <literal>false.</literal>.
			</para>
		</section>

		<section id="misc:nacl:ipt">
			<title>Local filter rules via <command>iptables</command> commands</title>
			<para>
				Besides the existing possibilities for settings via &ucsUCR;, there is also the possibility of integrating user-defined enhanced configurations in <filename class="directory">/etc/security/netfilter.d/</filename>, e.g. for realising a firewall or <firstterm>Network Address Translation</firstterm>.
				The enhancements should be realised in the form of shell scripts which execute the corresponding <command>iptables</command> for <acronym>IPv4</acronym> and <command>ip6table</command> for <acronym>IPv6</acronym> calls.
				For packages this is best done through using a &ucsUCR; template as described in<xref linkend="ucr:file"/>.
			</para>
			<para>
				Full documentation for IPTables can be found at <ulink url="http://www.netfilter.org/"/>.
			</para>
		</section>

		<section id="misc:nacl:test">
			<title>Testing Univention Firewall settings</title>
			<para>
				Package filter settings should always be thoroughly tested.
				The network scanner <command>nmap</command>, which is integrated in &ucsUCS; as a standard feature, can be used for testing the status of individual ports.
			</para>
			<para>
				Since Nmap requires elevated privileges in the network stack, it should be started as <literal>root</literal> user.
				A <acronym>TCP</acronym> port can be tested with the following command:
			</para>
			<programlisting language="sh">
				<command>nmap <replaceable class="option">HOSTNAME</replaceable> <option>-p</option> <replaceable class="option">PORT(s)</replaceable></command>
			</programlisting>
			<para>
				A <acronym>UDP</acronym> port can be tested with the following command:
			</para>
			<programlisting language="sh">
				<command>nmap <replaceable class="option">HOSTNAME</replaceable> <option>-sU</option> <option>-p</option> <replaceable class="option">PORT(s)</replaceable></command>
			</programlisting>
			<example>
				<title>Using <command>nmap</command> for firewall port testing</title>
				<programlisting language="sh">
nmap 192.168.1.100 -p 400
nmap 192.168.1.110 -sU -p 400-500
				</programlisting>
			</example>
		</section>
	</section>

	<section id="misc:translation" status="draft">
		<title>&ucsUMC; translations
			<indexterm><primary>Translation</primary></indexterm>
			<indexterm><primary>Localisation</primary><see>Translation</see></indexterm>
		</title>
		<remark></remark>

		<para>
			By default UCS includes English and German localisation.
			A package is provided to enable users to create additional translations for the &ucsUMC;.
			It was developed for UCS 3.2 but can also be used for UCS 3.1.
		</para>
		<para>
			This section describes all steps necessary to create a working translation package for UCS.
			To create a new translation package it is advised to have a running UCS server where the package can be setup.
			A current Subversion checkout of the UCS source code is required.
			After installing the translation template package, a new translation for a target language can be created.
		</para>

		<section id="misc:translation:preparation">
			<title>Prepare a new translation</title>
			<para>
				The following steps are required to setup an UCS server to create a new translation package.
			</para>
				<variablelist>
					<varlistentry>
						<term>Package <package>univention-ucs-translation-template</package></term>
						<listitem>
							<para>
								The package <package>univention-ucs-translation-template</package> contains all tools required to setup and update a translation package.
								It requires some additional Debian tools to build the package.
								The following packages must be installed on an UCS server by running the following command:
								<programlisting language="sh">
<!-- TODO: this line is valid for 3.2: univention-install univention-ucs-translation-template dpkg-dev -->
univention-install univention-management-console-dev dpkg-dev
								</programlisting>
								<!-- TODO: Remove from here with UCS 3.2 -->
								The translation package is not officially provided for UCS 3.1.
								It has to be downloaded and installed manually by executing the following commands:
								<programlisting language="sh">
wget http://testing.univention.de/3.2/unmaintained/3.2-0/all/univention-ucs-translation-template_1.0.0-2.2.201308151213_all.deb
dpkg -i univention-ucs-translation-template_1.0.0-2.2.201308151213_all.deb
                                                                </programlisting>
								<!-- TODO: Remove until here with UCS 3.2 -->
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>A current checkout of the UCS Subversion repository</term>
						<listitem>
							<para>
								The base translation files are available in the UCS Subversion repository.
								A current checkout can be obtained by running the following commands:
							</para>
								<programlisting language="sh">
cd /usr/src
svn co http://forge.univention.org/svn/dev/branches/ucs-3.1/ucs-3.1-1
								</programlisting>
								<!-- TODO: Use &websvn; after it has been updated -->
							<para>
								Changes made to the &ucsUMC; should be mirrored regularly to the local Subversion checkout.
								This can be done by executing <command>svn up /usr/src/ucs-3.1-1</command>.
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
		</section>

		<section id="misc:translation:createpackage">
			<title>Create a new translation package</title>
			<para>
				To create a new translation package for e.g. French in <filename class="directory">/usr/src/</filename>, the following command must be executed:
				<programlisting language="sh">
cd /usr/src
univention-ucs-translation-build-package.py \
	-s /usr/src/ucs-3.1-1-c fr -l fr_FR.UTF-8:UTF-8 -n French
				</programlisting>
				This creates a new directory <filename class="directory">univention-ucs-translation-fr/</filename>, which contains a Debian source package of the same name.
				It includes all the source and target files for the translation.
			</para>
		</section>

		<section id="misc:translation:translate">
			<title>Edit translation files</title>
			<para>
				The translation source files are located below the directory <filename class="directory">fr/</filename>.
				Each file should be edited to create the translation.
				There are two file formats in common use:
			</para>
				<variablelist>
					<varlistentry>
						<term><filename class="extension">.po</filename> files</term>
						<listitem>
							<para>
								These files are generated by the command <command>gettext</command>.
								They consist of a header and various entries of the form
							</para>
								<programlisting>
#: umc/app.js:637
#, python-format
msgid "The %s will expire in %d days and should be renewed!"
msgstr ""
								</programlisting>
							<para>
								The first line provides a hint, were the text is used.
								The second line is optional and contains flags, which indicate the type and state of the translation.
								The string <literal>fuzzy</literal> indicates an entry, which was copied by <command>gettext</command> from a previous version and needs to be updated.
								The flag has to be removed afterwards.
							</para>
							<para>
								The line starting with <literal>msgid</literal> contains the original text.
								The translation has to be placed on the line containing <literal>msgstr</literal>.
								Long texts can be split over multiple lines, were each line must start and end with a quote <literal>"</literal>.
							</para>
							<para>
								Some lines contain parameters, in this example <literal>%s</literal> and <literal>%d</literal>.
								They are indicated by a flag like <literal>c-format</literal> or <literal>python-format</literal>, which must not be removed.
								The placeholders have to be carried over to the translated string unmodified and in the same order.
								Some other files contain placeholders of the form <literal>%{text}s</literal>, which are more flexible and can be reordered.
							</para>
							<para>
								After a file has been translated completely, the line containing <literal>fuzzy</literal> at the beginning of the file should be removed to avoid warnings.
								If a translation string consists of multiple lines the translated string should roughly contain as many lines as the original string.
							</para>
						</listitem>
					</varlistentry>

					<varlistentry>
						<term><filename class="extension">.html</filename> files</term>
						<listitem>
							<para>
								Some &ucsUMC; dialogs are based on <acronym>HTML</acronym> files.
								In this case a copy of the English <acronym>HTML</acronym> file is provided with a new name for the target language.
								The full file has to be translated.
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
		</section>

		<section id="misc:translation:updatepackage">
			<title>Update the translation package</title>
			<para>
				To prepare the package for building, two steps are necessary during the development cycle of the translation.
				<variablelist>
					<varlistentry>
						<term>Update translation source files</term>
						<listitem>
							<para>
								If changes occur in the UCS source packages that need a change of the translation files, the source files should be updated.
								To update the source files, change the directory of the translation package and update the files by executing the following commands:
							</para>
							<programlisting language="sh">
cd /usr/src/univention-ucs-translation-fr
univention-ucs-translation-update-source-files.py \
	-s /usr/src/ucs-3.1-1 -c fr
							</programlisting>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Update translation target files</term>
						<listitem>
							<para>
								After the translation the source files have to be compiled.
								This step can also be done in an early stage of the translation, when it is not yet complete.
								To update the target files, change to the directory of the translation package and compile the source files by executing the following commands:
							</para>
							<programlisting language="sh">
cd /usr/src/univention-ucs-translation-fr
univention-ucs-translation-update-target-files.py \
	-s /usr/src/ucs-3.1-1 -c fr
							</programlisting>
						</listitem>
					</varlistentry>
				</variablelist>
			</para>
		</section>

		<section id="misc:translation:buildpackage">
			<title>Build the translation package</title>
			<para>
				Before using the new translation, the Debian package has to be built and installed.
				This can be done with the following commands:
				<programlisting language="sh">
cd /usr/src/univention-ucs-translation-fr
dpkg-buildpackage -uc -us -b -rfakeroot
dpkg -i ../univention-ucs-translation-fr_*.deb
				</programlisting>
				After logging out of the &ucsUMC; the new language should now be selectable in the &ucsUMC; login window.
				Untranslated strings will be still shown in their original language, i.e. in English.
			</para>
		</section>
	</section>

</chapter>
<!-- vim:set ts=2 sw=2 noet ft=docbk:-->
