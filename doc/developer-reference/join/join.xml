<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
	<!ENTITY % entities SYSTEM "../../stylesheets/macros-en.ent" >
	%entities;
]>
<chapter id="chap:join">
	<title>Join
		<indexterm><primary>domain join</primary></indexterm>
		<indexterm><primary>join</primary><see>domain join</see></indexterm>
	</title>
	<para>
		A <acronym>UCS</acronym> system is normally joined into a domain.
		This establishes a trust relation between the different hosts, which enables users to access services provided by any host of the domain.
	</para>
	<para>
		Joining a system into a domain required write permission to create and modify entries in <acronym>LDAP</acronym>.
		Local <literal>root</literal> permission on the joining host is not sufficient to get write access to LDAP.
		Instead of that the LDAP credentials must be entered interactively by the administrator doing the join.
	</para>

	<section id="chap:scripts">
		<title>Join scripts
			<indexterm><primary>domain join</primary><secondary>join script</secondary></indexterm>
		</title>
		<para>
			Packages requiring write access to LDAP can provide so called <firstterm>join scripts</firstterm>.
			They are installed into <filename class="directory">/usr/lib/univention-install/</filename>.
			The name of each join script is normally derived to the name of the binary package containing it.
			It is prefixed with a two-digit-number, which is used to lexicographical order the scripts.
			The filename either ends on <literal>.inst</literal> or <literal>.uinst</literal>, which distinguished between a join script and unjoin script (also see <xref linkend="join:unjoin"/>).
		</para>
	</section>

	<section id="join:status">
		<title>Join status
			<indexterm><primary>domain join</primary><secondary>status</secondary></indexterm>
		</title>
		<para>
			For each join script a version number is tracked.
			This is used to skip re-executing join scrips, which already have been executed.
			This is mostly a performance optimization, but is also used to find join scripts which need to be run.
		</para>
		<para>
			The text file <filename>/var/univention-join/status</filename> is used to keep track of the state of all join script.
			For each successful run of a join script a line is appended to that file.
			That record consists of three space separated entries:
		</para>
		<programlisting>$script_name v$version successful</programlisting>
		<orderedlist>
			<listitem>
				<simpara>
					The first entry contains the name of the join script without the two-digit prefix and without the <filename>.inst</filename> suffix.
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					The second entry contains a version number prefixed by a <literal>v</literal>.
					It is used to keep track of the latest version of the join script, which was run successfully.
					This is used to identify, which join scripts need to be executed and which can be skipped, because they were already executed in the past.
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					The third column contains the word <literal>successful</literal>.
				</simpara>
			</listitem>
		</orderedlist>
		<para>
			If a new version of the join script is invoked, it just appends a new record with a higher version number at the end of the file.
		</para>
	</section>

	<section id="join:run">
		<title>Running join scripts
			<indexterm><primary>domain join</primary><secondary>join script</secondary><tertiary>running</tertiary></indexterm>
			<indexterm><primary>join script</primary><see>domain join</see></indexterm>
		</title>
		<para>
			There exist three commands related to running join scripts:
		</para>
		<variablelist>
			<varlistentry>
				<term><command>univention-join</command></term>
				<listitem>
					<para>
						When <command>/univention-join</command> is invoked, a machine account is created.
						The <firstterm>distinguished name</firstterm> (<abbrev>dn</abbrev>) of that entry is stored in the &ucsUCRV; <envar>ldap/hostdn</envar>.
						A random password is generated, which is stored in the file <filename>/etc/machine.secret</filename>.
					</para>
					<para>
						After that the file <filename>/var/univention-join/status</filename> is cleared and all join scripts located in <filename class="directory">/usr/lib/univention-install/</filename> are executed in lexicographical order.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><command>univention-check-join-status</command></term>
				<listitem>
					<para>
						This command is similar to <command>univention-join</command>, but skips the first step of creating a machine account.
						Only those join scripts are executed, whose current version is not yet registered in <filename>/var/univention-join/status</filename>.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><command>univention-run-join-scripts</command></term>
				<listitem>
					<para>
						This command only checks for join scripts in <filename>/usr/lib/univention-install/</filename>, whose version is not yet registered in <filename>/var/univention-join/status</filename>.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			When packages are installed, it depends on the server role, if join scripts are invoked automatically from the <literal>postinst</literal> Debian maintainer script or not.
			Only on &ucsMaster; and &ucsBackup; system roles can the local <literal>root</literal> user access the file containing the LDAP credentials.
			On all other system roles the join scripts need to be run manually by invoking <command>univention-run-join-scripts</command> or doing so through UMC.
		</para>

	</section>

	<section id="join:write">
		<title>Writing join scripts
			<indexterm><primary>domain join</primary><secondary>join script</secondary><tertiary>writing</tertiary></indexterm>
			<indexterm><primary>join script</primary><see>domain join</see></indexterm>
		</title>

		<para>
			Similar to the Debian maintainer scripts (<xref linkend="deb:scripts"/>) they should be idem-potent:
			They should transform the system from any state into the state required by the package, that is:
		</para>
		<itemizedlist>
			<listitem>
				<simpara>They should create newly introduced LDAP objects</simpara>
			</listitem>
			<listitem>
				<simpara>They should not fail if the object already exists</simpara>
			</listitem>
			<listitem>
				<simpara>They should be careful about modifying objects, which might have been modified by the administrator in the past</simpara>
			</listitem>
		</itemizedlist>
		<para>
			Join scripts may be called from multiple system roles and different versions.
			Therefore it is important that these script <emphasis>do not destroy or remove data still used by other systems!</emphasis>
		</para>

		<section id="join:minimal">
			<title>Minimal join script example</title>
			<para>
				This example provides a template for writing join scripts.
				The package is called <package>join-template</package> and just contains a join script, which does nothing.
			</para>
			<variablelist>
				<varlistentry>
					<term><filename>50join-template.inst</filename></term>
					<listitem>
						<para>
							The join script in UCS packages is normally located in the package root directory.
							It has the following structure:
						</para>
						<programlisting language="sh"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="join-template/50join-template.inst" parse="text"/></programlisting>
						<para>
							Please note the argument <option>"$@"</option> when <command>udm</command> is invoked.
							This is essential to pass on the required LDAP credentials, which is further described in <xref linkend="join:secret"/>.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>debian/join-template.install</filename></term>
					<listitem>
						<para>
							The join script needs to be installed into <filename>/usr/lib/univention-install/</filename>:
						</para>
						<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="join-template/debian/join-template.install" parse="text"/></programlisting>
						<para>
							Note that this package also installs an unjoin script.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>debian/join-template.postinst</filename></term>
					<listitem>
						<para>
							The join script should be invoked automatically on &ucsMaster; and &ucsBackup; systems.
							On all other system roles an administrator must run the join script manually through <command>univention-run-join-scripts</command>.
						</para>
						<programlisting language="sh"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="join-template/debian/join-template.postinst" parse="text"/></programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>debian/control</filename></term>
					<listitem>
						<para>
							The package uses two shell libraries, which are described in more detail in <xref linkend="join:libraries"/>.
							Both packages providing them must be added as runtime dependencies.
							The unjoin functions were added to UCS 3.1-0 as errata updates and
							thus the version must be set explicitely. Starting with UCS 3.2
							the version is not necessary.
						</para>
						<programlisting language="debcontrol"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="join-template/debian/control" parse="text"/></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>

		<section id="join:exitcode">
			<title>join script exit codes
				<indexterm><primary>join script</primary><secondary>exit codes</secondary></indexterm>
				<indexterm><primary>join script</primary><secondary>return codes</secondary><see>exit codes</see></indexterm>
			</title>
			<para>
				Join scripts must return the following exit codes:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>0</literal></term>
					<listitem>
						<para>
							The join script was successful and completed all task to join the system into the domain.
							All entries in <acronym>LDAP</acronym> were created or do already exist as expected.
						</para>
						<para>
							The script will be marked as successfully run.
							As a consequence the join script will not be called again in this version.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>1</literal></term>
					<listitem>
						<para>
							The script did not complete and some task to fully join the system into the domain are still pending.
							Some entries could not be created in <acronym>LDAP</acronym> or exist in a state, which is incompatible with this version of the package.
						</para>
						<para>
							The script needs to be run again, either manually or automatically.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>2</literal></term>
					<listitem>
						<para>
							Some internal functions were called incorrectly.
							For example the credentials were wrong.
						</para>
						<para>
							The script needs to be run again.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>

		<section id="join:libraries">
			<title>join script libraries
				<indexterm><primary>join script</primary><secondary>library</secondary></indexterm>
				<indexterm><primary>join script</primary><secondary>helpers</secondary><see>library</see></indexterm>
			</title>
			<para>
				There exist two shell libraries, which provide functions which help in writing join scripts:
			</para>

			<section id="join:libraries:join">
				<title><package>univention-join</package></title>

				<para>
					The package contains the shell library <filename>/usr/share/univention-join/joinscripthelper.lib</filename>.
					It provides functions related to updating join status file.
				</para>
				<variablelist>
					<varlistentry>
						<term><cmdsynopsis><command>joinscript_init</command></cmdsynopsis></term>
						<listitem>
							<para>
								This function parses the status file and aborts the script, if a record is found with a version greater or equal to <envar>VERSION</envar>.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis><command>joinscript_save_current_version</command></cmdsynopsis></term>
						<listitem>
							<para>
								This function appends a new record to the end of the status file using the version number <envar>VERSION</envar>.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis><command>joinscript_check_any_version_executed</command></cmdsynopsis></term>
						<listitem>
							<para>
								This function returns success (<literal>0</literal>), if any previous version of the join scripts was successfully executed.
								Otherwise it returns a failure (<literal>1</literal>).
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>joinscript_check_specific_version_executed</command>
								<arg choice="plain">version</arg>
						</cmdsynopsis></term>
						<listitem>
							<para>
								This function returns success (<literal>0</literal>), if the specified version <option>version</option> of the join scripts was successfully executed.
								Otherwise it returns a failure (<literal>1</literal>).
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>joinscript_check_version_in_range_executed</command>
								<arg choice="plain">min</arg>
								<arg choice="plain">max</arg>
						</cmdsynopsis></term>
						<listitem>
							<para>
								This function returns success (<literal>0</literal>), if any successfully run version of the join script falls within the range <option>min</option>..<option>max</option>, inclusively.
								Otherwise it returns a failure (<literal>1</literal>).
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>joinscript_extern_init</command>
								<arg choice="plain">join-script</arg>
						</cmdsynopsis></term>
						<listitem>
							<para>
								The check commands mentioned above can also be used in other shell programs, which are not join scripts.
								There the name of the join script to be checked must be explicitly initialized.
								Instead of calling <command>joinscript_init</command>, this function requires an additional argument specifying the name of the <option>join script</option>.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>die</command>
						</cmdsynopsis></term>
						<listitem>
							<para>
								A convenience function to exit the join script with an error code.
								Used to guarantee that LDAP modifications were successful:
								<command>some_udm_create_call || die</command>
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
				<para>
					These functions use the following environment variables:
				</para>
				<variablelist>
					<varlistentry>
						<term><envar>VERSION</envar></term>
						<listitem>
							<para>
								This variable must be set before <command>joinscript_init</command> is invoked.
								It specifies the version number of the join script and is used twofold:
							</para>
							<orderedlist>
								<listitem>
									<simpara>it suppresses the re-execution of the join script, if it was already executed successfully</simpara>
								</listitem>
								<listitem>
									<simpara>it is used to check if the current version of the join script was successfully executed</simpara>
								</listitem>
							</orderedlist>
							<para>
								The version number should be incremented for a new version of the package, when the join script needs to perform additional modification in LDAP compared to any previous packaged version.
							</para>
							<para>
								The version number must be a non-negative integer.
								The variable assignment in the join script must be on its own line.
								It may optionally quote the version number with single quotes (<literal>'</literal>) or double quotes (<literal>"</literal>).
								The following assignment are valid:
							</para>
							<programlisting language="sh"><![CDATA[
VERSION=0
VERSION='1'
VERSION="2"
							]]></programlisting>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><envar>JS_LAST_EXECUTED_VERSION</envar></term>
						<listitem>
							<para>
								This variable is initialized by <command>joinscript_init</command> with the latest version found in the join status file.
								If no version of the join script was ever executed and thus no record exists, the variable is set to <literal>0</literal>.
								The join script can use this information to decide what to do on an upgrade.
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>

			<section id="join:libraries:shell">
				<title><package>shell-univention-lib</package></title>
				<para>
					The package contains the shell library <filename>/usr/share/univention-lib/base.sh</filename>.
					Since package version <literal>>= 2.0.17-1.125</literal> it provides the following functions:
				</para>
				<variablelist>
					<varlistentry>
						<term><cmdsynopsis>
								<command>call_joinscript</command>
								<arg choice="opt">--binddn <replaceable>bind-dn</replaceable> --bindpwd <replaceable>bind-password</replaceable></arg>
								<arg><replaceable>join-script</replaceable></arg>
						</cmdsynopsis></term>
						<listitem>
							<simpara>
								This calls the join script called <filename>join-script</filename> from the directory <filename class="directory">/usr/lib/univention-install/</filename>.
								The optional LDAP credentials <option>bind-dn</option> and <option>bind-password</option> are passed on as-is.
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>call_joinscript_on_dcmaster</command>
								<arg choice="opt">--binddn <replaceable>bind-dn</replaceable> --bindpwd <replaceable>bind-password</replaceable></arg>
								<arg><replaceable>join-script</replaceable></arg>
						</cmdsynopsis></term>
						<listitem>
							<simpara>
								Similar to <command>call_joinscript</command>, but also checks the system role and only executes the script on <literal>domaincontroller_master</literal>s.
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>remove_joinscript_status</command>
								<arg><replaceable>name</replaceable></arg>
						</cmdsynopsis></term>
						<listitem>
							<simpara>
								Removes the given join script <option>name</option> from the join script status file <filename>/var/univention-join/status</filename>.
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>call_unjoinscript</command>
								<arg><replaceable>unjoin-script</replaceable></arg>
						</cmdsynopsis></term>
						<listitem>
							<simpara>
								Calls the given unjoin script <option>unjoin-script</option> on &ucsMaster; and &ucsBackup; systems.
								The file name must be relative to the directory <filename class="directory">/usr/lib/univention-install/</filename>.
								The optional LDAP credentials <option>bind-dn</option> and <option>bind-password</option> are passed on as-is.
								Afterwards the unjoin script is automatically deleted.
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>delete_unjoinscript</command>
								<arg choice="opt">--binddn <replaceable>bind-dn</replaceable> --bindpwd <replaceable>bind-password</replaceable></arg>
								<arg><replaceable>unjoin-script</replaceable></arg>
						</cmdsynopsis></term>
						<listitem>
							<simpara>
								Deletes the given unjoin script <option>unjoin-script</option> if it does not belong to any package.
								The file name must be relative to the directory <filename class="directory">/usr/lib/univention-install/</filename>.
							</simpara>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>

		</section>
	</section>

	<section id="join:unjoin">
		<title>Unregister</title>
		<para>
			On package removal packages might want to clean up the data in LDAP.
			Removing data from LDAP also requires appropriate credentials, while removing a package only required local <literal>root</literal> privileges.
			Therefore UCS provides support for so-called <firstterm>unjoin scripts</firstterm>, which re-use the functionality already provided for join scripts.
		</para>
		<para>
			In most cases an unjoin script belongs to a certain join script and reverts that script's changes. Just like join scripts an unjoin script is prefixed with a
			two-digit-number for the same reason (lexicographical order when executing all join scripts); this number should be 100 minus that of the corresponding join script,
			so that the scripts will be executed in the reverse order. The suffix of an unjoin script is <literal>.uinst</literal>. As of UCS 3.1 <literal>.inst</literal> and
			<literal>.uinst</literal> are treated equally so one should name the script as the join script and prepend <literal>-uninstall</literal>. Because
			<command>univention-run-join-scripts</command> executes all (un)join scripts in <filename class="directory">/usr/lib/univention-install/</filename> it may not
			live there as long as the package is installed. By convention an unjoin script is installed in
			<filename class="directory">/usr/lib/univention-uninstall/</filename> and copied to the join script directory when needed. Note that first all join scripts (ordered
			by their prefix) and after that the unjoin scripts are executed (again ordered by their prefix).
		</para>
		<para>
			Example: The package <package>univention-fetchmail</package> provides both a join script and an unjoin script. The join script is installed at
			<filename>/usr/lib/univention-install/91univention-fetchmail.inst</filename> and the corresponding unjoin script in
			<filename>/usr/lib/univention-uninstall/09univention-fetchmail-uninstall.uinst</filename>.
		</para>
		<warning>
			<para>
				A domain is a distributed system.
				Just because one local system no longer wants to store some information in LDAP does not mean that the data should be deleted.
				There might still be other systems in the domain which still require the data.
			</para>
			<para>
				Therefore <quote>the first system to come</quote> should setup the data, while only <quote>the last system to go</quote> might clean up the data.
				In <package>univention-fetchmail</package> this is achieved by using <command>ucs_addServiceFromLocalhost "Fetchmail" "$@"</command> in the join script
				and <command>ucs_removeServiceFromLocalhost "Fetchmail" "$@"</command> in the unjoin script. Most of the unjoin script is executed only if
				<command>ucs_isServiceUnused "Fetchmail" "$@"</command>.
			</para>
		</warning>
		<remark>PMH: TBD Bug #31268</remark>
		<variablelist>
			<varlistentry>
				<term><filename>50join-template-uninstall.uinst</filename></term>
				<listitem>
					<para>
						This unjoin script reverts the changes of the join script from <xref linkend="join:minimal"/>.
					</para>
					<programlisting language="sh"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="join-template/50join-template-uninstall.uinst" parse="text"/></programlisting>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><filename>debian/join-template.prerm</filename></term>
				<listitem>
					<para>
						The unjoin script has to be copied to the join script dir before it gets removed.
					</para>
					<programlisting language="sh"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="join-template/debian/join-template.prerm" parse="text"/></programlisting>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><filename>debian/join-template.postrm</filename></term>
				<listitem>
					<para>
						The unjoin script should be invoked automatically on &ucsMaster; and &ucsBackup; systems
						after the package is removed.
						On all other system roles an administrator must run the join script manually through <command>univention-run-join-scripts</command>.
					</para>
					<programlisting language="sh"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="join-template/debian/join-template.postrm" parse="text"/></programlisting>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><filename>debian/join-template.preinst</filename></term>
				<listitem>
					<para>
						In case the unjoin script is still present in join dir
						(it has never been executed), but the package is to
						be installed again, the unjoin script is removed.
					</para>
					<programlisting language="sh"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="join-template/debian/join-template.preinst" parse="text"/></programlisting>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>

	<section id="join:secret">
		<title>LDAP secrets
			<indexterm><primary>domain join</primary><secondary>secrets</secondary></indexterm>
		</title>
		<para>
			The credentials for different LDAP accounts are stored in plain-text files on some UCS systems.
			The files are named <filename>/etc/<replaceable>*</replaceable>.secret</filename>.
			They are owned by the user <literal>root</literal> and allow read-access for different groups.
		</para>
		<variablelist>
			<varlistentry>
				<term><filename>/etc/ldap.secret</filename> for <uri>cn=admin,<replaceable>$ldap_base</replaceable></uri></term>
				<listitem>
					<simpara>
						This account has full write access to all LDAP entries.
						The file is only available on &ucsMaster; and &ucsBackup; systems and is owned by the group <literal>DC Backup Hosts</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			<!--
			<varlistentry>
				<term><filename>/etc/ldap-backup.secret</filename> for <uri>cn=backup,<replaceable>$ldap_base</replaceable></uri></term>
				<listitem>
					<remark>PMH: Is this still required? Bug #31252</remark>
					<simpara>
						The file is only available on &ucsMaster; and &ucsBackup; systems and is owned by the group <literal>DC Backup Hosts</literal>.
					</simpara>
				</listitem>
			</varlistentry>
				-->
			<varlistentry>
				<term><filename>/etc/machine.secret</filename> for <uri><replaceable>$ldap_hostdn</replaceable></uri></term>
				<listitem>
					<simpara>
						Each hosts uses its account to get at least read-access to LDAP.
						Domain controllers in the container <uri>cn=dc,cn=computers,<replaceable>$ldap_base</replaceable></uri> get additional rights to access LDAP attributes.
						The file is available on all joined systems roles and is owned by the local <literal>root</literal> user and group.
					</simpara>
				</listitem>
			</varlistentry>
			<!--
			<varlistentry>
				<term><filename>/etc/backup-join.secret</filename> for <uri>uid=join-backup,cn=users,<replaceable>$ldap_base</replaceable></uri></term>
				<listitem>
					<remark>PMH: Is this still required? Bug #31252</remark>
					<simpara>
						The file is available on all Domaincontroller systems and is owned by the group <literal>Backup Join</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><filename>/etc/slave-join.secret</filename> for <uri>uid=join-slave,cn=users,<replaceable>$ldap_base</replaceable></uri> </term>
				<listitem>
					<remark>PMH: Is this still required? Bug #31252</remark>
					<simpara>
						The file is available on all Domaincontroller systems and is owned by the group <literal>Slave Join</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			-->
		</variablelist>
		<para>
			During package installation, only the maintainer scripts (<xref linkend="deb:scripts"/>) on &ucsMaster; and &ucsBackup; can use their <literal>root</literal> permission to directly read <filename>/etc/ldap.secret</filename>.
			Thus only on those roles are the join scripts automatically executed, when the package is installed.
			On all other system roles, the join scripts need to be executed manually.
			This can either be done through the <emphasis>UMC Join module</emphasis> or through the command line tool <command>univention-run-join-scripts</command>.
			Both methods require appropriate credentials to be entered.
		</para>

		<section id="join:secret:change">
			<title>Password change
				<indexterm><primary>domain join</primary><secondary>secrets</secondary><tertiary>change</tertiary></indexterm>
				<indexterm><primary>server password change</primary><see>domain join</see></indexterm>
			</title>

			<para>
				To guarantee the trust relation between UCS systems, computers need to regularly change the password associated with the machine account.
				This is controlled through the &ucsUCRV; <envar>server/password/change</envar>.
				For UCS servers this is evaluated by <filename>/usr/lib/univention-server/server_password_change</filename>, which is invoked nightly at 01:00 by <citerefentry><refentrytitle>cron</refentrytitle><manvolnum>8</manvolnum></citerefentry>.
				The interval is controlled through a second &ucsUCRV; <envar>server/password/interval</envar>, which defaults to 21 days.
			</para>
			<para>
				The password is stored in the plain text file <filename>/etc/machine.secret</filename>.
				Many long running services only read these credentials on startup, which breaks when the password is changed while they are still running.
				Therefore UCS provides a mechanism to invoke arbitrary commands, when the machine password is changed.
				This can be used for example to restart said services.
			</para>
			<para>
				Hook scripts should be placed in the directory <filename class="directory">/usr/lib/univention-server/server_password_change.d/</filename>.
				The name must consist of only digits, upper and lower ASCII characters, hyphens and underscores.
				They file must be executable and is called via <citerefentry><refentrytitle>run-parts</refentrytitle><manvolnum>8</manvolnum></citerefentry>.
				It receives one argument, which is used to distinguish two phases:
			</para>
			<procedure>
				<title>Server password change procedure</title>
				<step>
					<para>
						Each script will be called with argument <literal>prechange</literal> before the password is changed.
						If any scripts aborts with an exit status unequal zero, the change is aborted.
					</para>
				</step>
				<step>
					<para>
						A new password is generated locally using <citerefentry><refentrytitle>makepasswd</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
						It is changed in LDAP via UDM and stored in <filename>/etc/machine.secret</filename>.
						<remark>PMH: hard coded to 8 characters Bug #31281</remark>
						The old password is logged in <filename>/etc/machine.secret.old</filename>.
					</para>
					<para>
						If anything goes wrong in this step, the change is aborted and the changes are rolled back.
					</para>
				</step>
				<step>
					<para>
						All hook scripts are called again.
					</para>
					<stepalternatives>
						<step>
							<para>
								If the password change was successful, <option>postchange</option> gets passed to the hook scripts.
								This should complete any change done in the <literal>prechange</literal> phase.
							</para>
						</step>
						<step>
							<para>
								If the password change failed for any reason, all hook scripts are called with the argument <option>nochange</option>.
								This should undo any change already done in the <literal>prechange</literal> phase.
							</para>
						</step>
					</stepalternatives>
				</step>
			</procedure>

			<example>
				<title>Server password change example</title>
				<para>
					Install this file to <filename class="directory">/usr/lib/univention-server/server_password_change.d/</filename>.
				</para>
				<programlisting language="sh"><![CDATA[
#!/bin/sh
case "$1" in
prechange)
	# nothing to do before the password is changed
	exit 0
	;;
nochange)
	# nothing to do after a failed password change
	exit 0
	;;
postchange)
	# restart daemon after password was changed
	invoke-rc.d my-daemon restart
	;;
esac
				]]></programlisting>
				<para>
					init-scripts should only be invoked indirectly through <citerefentry><refentrytitle>invoke-rc.d</refentrytitle><manvolnum>8</manvolnum></citerefentry>.
					This is required for <command>chroot</command> environments and allows the policy layer to control starting and stopping in certain special situations like during an system upgrade.
					<remark>PMH: we need to use it too Bug #18497</remark>
				</para>
			</example>
		</section>

	</section>

</chapter>
<!-- vim:set ts=2 sw=2 noet ft=docbk:-->
