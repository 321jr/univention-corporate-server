<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
	<!ENTITY % entities SYSTEM "../../stylesheets/macros-en.ent" >
	%entities;
]>
<chapter id="chap:join">
	<title>Join
		<indexterm><primary>domain join</primary></indexterm>
		<indexterm><primary>join</primary><see>domain join</see></indexterm>
	</title>
	<para>
		An <acronym>UCS</acronym> system is normally joined into a domain.
		This establishes a trust relation between the different hosts, which enables users to access services provided by any host of the domain.
	</para>
	<para>
		Joining a system into a domain requires write permission to create and modify entries in the Univention directory service (<acronym>LDAP</acronym>).
		Local <literal>root</literal> permission on the joining host is not sufficient to get write access to the domain wide <acronym>LDAP</acronym> service.
		Instead valid <acronym>LDAP</acronym> credentials must be entered interactively by the administrator doing the join.
	</para>

	<section id="chap:scripts">
		<title>Join scripts
			<indexterm><primary>domain join</primary><secondary>join script</secondary></indexterm>
		</title>
		<para>
			Packages requiring write access to the Univention directory service can provide so called <firstterm>join scripts</firstterm>.
			They are installed into <filename class="directory">/usr/lib/univention-install/</filename>.
			The name of each join script is normally derived from the name of the binary package containing it.
			It is prefixed with a two-digit number, which is used to order the scripts lexicographically.
			The filename either ends in <literal>.inst</literal> or <literal>.uinst</literal>, which distinguishes between join script and unjoin script (see <xref linkend="join:unjoin"/>).
		</para>
	</section>

	<section id="join:status">
		<title>Join status
			<indexterm><primary>domain join</primary><secondary>status</secondary></indexterm>
		</title>
		<para>
			For each join script a version number is tracked.
			This is used to skip re-executing join scrips, which already have been executed.
			This is mostly a performance optimization, but is also used to find join scripts which need to be run.
		</para>
		<para>
			The text file <filename>/var/univention-join/status</filename> is used to keep track of the state of all join scripts.
			For each successful run of a join script a line is appended to that file.
			That record consists of three space separated entries:
		</para>
		<programlisting>$script_name v$version successful</programlisting>
		<orderedlist>
			<listitem>
				<simpara>
					The first entry contains the name of the join script without the two-digit prefix and without the <filename>.inst</filename> suffix, usually corresponding to the package name.
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					The second entry contains a version number prefixed by a <literal>v</literal>.
					It is used to keep track of the latest version of the join script, which has been run successfully.
					This is used to identify, which join scripts need to be executed and which can be skipped, because they were already executed in the past.
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					The third column contains the word <wordasword>successful</wordasword>.
				</simpara>
			</listitem>
		</orderedlist>
		<para>
			If a new version of the join script is invoked, it just appends a new record with a higher version number at the end of the file.
		</para>
	</section>

	<section id="join:run">
		<title>Running join scripts
			<indexterm><primary>domain join</primary><secondary>join script</secondary><tertiary>running</tertiary></indexterm>
			<indexterm><primary>join script</primary><see>domain join</see></indexterm>
		</title>
		<para>
			There exist three commands related to running join scripts:
		</para>
		<variablelist>
			<varlistentry>
				<term><command>univention-join</command></term>
				<listitem>
					<para>
						When <command>univention-join</command> is invoked, a machine account is created.
						The <firstterm>distinguished name</firstterm> (<abbrev>dn</abbrev>) of that entry is stored locally in the &ucsUCRV; <envar>ldap/hostdn</envar>.
						A random password is generated, which is stored in the file <filename>/etc/machine.secret</filename>.
					</para>
					<para>
						After that the file <filename>/var/univention-join/status</filename> is cleared and all join scripts located in <filename class="directory">/usr/lib/univention-install/</filename> are executed in lexicographical order.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><command>univention-run-join-scripts</command></term>
				<listitem>
					<para>
						This command is similar to <command>univention-join</command>, but skips the first step of creating a machine account.
						Only those join scripts are executed, whose current version is not yet registered in <filename>/var/univention-join/status</filename>.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><command>univention-check-join-status</command></term>
				<listitem>
					<para>
						This command only checks for join scripts in <filename>/usr/lib/univention-install/</filename>, whose version is not yet registered in <filename>/var/univention-join/status</filename>.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			When packages are installed, it depends on the server role, if join scripts are invoked automatically from the <literal>postinst</literal> Debian maintainer script or not.
			This only happens on master and &ucsBackup; system roles, where the local <literal>root</literal> user has access to the file containing the <acronym>LDAP</acronym> credentials.
			On all other system roles the join scripts need to be run manually by invoking <command>univention-run-join-scripts</command> or doing so through <acronym>UMC</acronym>.
		</para>

	</section>

	<section id="join:write">
		<title>Writing join scripts
			<indexterm><primary>domain join</primary><secondary>join script</secondary><tertiary>writing</tertiary></indexterm>
			<indexterm><primary>join script</primary><see>domain join</see></indexterm>
		</title>

		<para>
			Similar to the Debian maintainer scripts (see <xref linkend="deb:scripts"/>) they should be idem-potent:
			They should transform the system from any state into the state required by the package, that is:
		</para>
		<itemizedlist>
			<listitem>
				<simpara>They should create newly introduced objects in the Univention directory service</simpara>
			</listitem>
			<listitem>
				<simpara>They should not fail if the object already exists</simpara>
			</listitem>
			<listitem>
				<simpara>They should be careful about modifying objects, which might have been modified by the administrator in the past</simpara>
			</listitem>
		</itemizedlist>
		<para>
			Join scripts may be called from multiple system roles and different versions.
			Therefore it is important that these scripts <emphasis>do not destroy or remove data still used by other systems!</emphasis>
		</para>

		<section id="join:minimal">
			<title>Basic join script example</title>
			<para>
				This example provides a template for writing join scripts.
				The package is called <package>join-template</package> and just contains a join and an unjoin script.
				They demonstrate some commonly used functions.
			</para>
			<para>
				Source code: <ulink url="&websvn;doc/developer-reference/join/join-template/"/>
			</para>
			<variablelist>
				<varlistentry>
					<term><filename>50join-template.inst</filename></term>
					<listitem>
						<para>
							The join script in UCS packages is typically located in the package root directory.
							It has the following base structure:
						</para>
						<programlisting language="sh"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="join-template/50join-template.inst" parse="text"/></programlisting>
						<para>
							Please note the essential argument <option>"$@"</option> when <command>udm</command> is invoked, which passes on the required <acronym>LDAP</acronym> credentials described in <xref linkend="join:secret"/>.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>debian/join-template.install</filename></term>
					<listitem>
						<para>
							The scripts need to be installed into <filename>/usr/lib/univention-install/</filename>, which is achieved by the following lines:
						</para>
						<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="join-template/debian/join-template.install" parse="text"/></programlisting>
						<para>
							Note that this package also installs an unjoin script.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>debian/join-template.postinst</filename></term>
					<listitem>
						<para>
							The join script should be invoked automatically on master and &ucsBackup; systems.
							On all other system roles an administrator must run the join script manually through <command>univention-run-join-scripts</command>.
						</para>
						<programlisting language="sh"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="join-template/debian/join-template.postinst" parse="text"/></programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>debian/control</filename></term>
					<listitem>
						<para>
							The package uses two shell libraries, which are described in more detail in <xref linkend="join:libraries"/>.
							Both packages providing them must be added as additional runtime dependencies.
						</para>
						<para>
							The unjoin functions were added to UCS 3.1-0 only as <ulink url="http://errata.univention.de/ucs/3.1/80.html">erratum update 81</ulink>.
							Because of this the minimum versions must be specified explicitly.
						</para>
						<programlisting language="debcontrol"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="join-template/debian/control" parse="text"/></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>

		<section id="join:exitcode">
			<title>Join script exit codes
				<indexterm><primary>join script</primary><secondary>exit codes</secondary></indexterm>
				<indexterm><primary>join script</primary><secondary>return codes</secondary><see>exit codes</see></indexterm>
			</title>
			<para>
				Join scripts must return the following exit codes:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>0</literal></term>
					<listitem>
						<para>
							The join script was successful and completed all tasks to join the software package on the system into the domain.
							All required entries in the Univention directory service were created or do already exist as expected.
						</para>
						<para>
							The script will be marked as successfully run.
							As a consequence the join script will not be called again in this version.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>1</literal></term>
					<listitem>
						<para>
							The script did not complete and some task to fully join the system into the domain are still pending.
							Some entries could not be created in <acronym>LDAP</acronym> or exist in a state, which is incompatible with this version of the package.
						</para>
						<para>
							The script needs to be run again after fixing the problem, either manually or automatically.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>2</literal></term>
					<listitem>
						<para>
							Some internal functions were called incorrectly.
							For example the credentials were wrong.
						</para>
						<para>
							The script needs to be run again.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>

		<section id="join:libraries">
			<title>Join script libraries
				<indexterm><primary>join script</primary><secondary>library</secondary></indexterm>
				<indexterm><primary>join script</primary><secondary>helpers</secondary><see>library</see></indexterm>
			</title>
			<para>
				There exist two shell libraries, which provide functions which help in writing join scripts:
			</para>

			<section id="join:libraries:join">
				<title><package>univention-join</package></title>

				<para>
					The package contains the shell library <filename>/usr/share/univention-join/joinscripthelper.lib</filename>.
					It provides functions related to updating the join status file.
				</para>
				<variablelist>
					<varlistentry>
						<term><cmdsynopsis><command>joinscript_init</command></cmdsynopsis></term>
						<listitem>
							<para>
								This function parses the status file and exits the shell script, if a record is found with a version greater or equal to value of the environment variable <envar>VERSION</envar>.
								The name of the join script is derived from <envar>$0</envar>.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis><command>joinscript_save_current_version</command></cmdsynopsis></term>
						<listitem>
							<para>
								This function appends a new record to the end of the status file using the version number stored in the environment variable <envar>VERSION</envar>.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis><command>joinscript_check_any_version_executed</command></cmdsynopsis></term>
						<listitem>
							<para>
								This function returns success (<literal>0</literal>), if any previous version of the join scripts was successfully executed.
								Otherwise it returns a failure (<literal>1</literal>).
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>joinscript_check_specific_version_executed</command>
								<arg choice="plain">version</arg>
						</cmdsynopsis></term>
						<listitem>
							<para>
								This function returns success (<literal>0</literal>), if the specified version <option>version</option> of the join scripts was successfully executed.
								Otherwise it returns a failure (<literal>1</literal>).
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>joinscript_check_version_in_range_executed</command>
								<arg choice="plain">min</arg>
								<arg choice="plain">max</arg>
						</cmdsynopsis></term>
						<listitem>
							<para>
								This function returns success (<literal>0</literal>), if any successfully run version of the join script falls within the range <option>min</option>..<option>max</option>, inclusively.
								Otherwise it returns a failure (<literal>1</literal>).
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>joinscript_extern_init</command>
								<arg choice="plain">join-script</arg>
						</cmdsynopsis></term>
						<listitem>
							<para>
								The check commands mentioned above can also be used in other shell programs, which are not join scripts.
								There the name of the join script to be checked must be explicitly given.
								Instead of calling <command>joinscript_init</command>, this function requires an additional argument specifying the name of the <option>join-script</option>.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>joinscript_remove_script_from_status_file</command>
								<arg choice="plain">name</arg>
						</cmdsynopsis></term>
						<listitem>
							<para>
								Removes the given join script from the join script status file <filename>/var/univention-join/status</filename>.
								The <option>name</option> should be the basename of the joinscript without the prefixed digits and the suffix <literal>.inst</literal>.
								So if the joinscript <filename>/var/lib/univention-install/50join-template.inst</filename> shall be removed, one has to execute <command>joinscript_remove_script_from_status_file join-template</command>.
								Primarily used in unjoin scripts.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>die</command>
						</cmdsynopsis></term>
						<listitem>
							<para>
								A convenience function to exit the join script with an error code.
								Used to guarantee that <acronym>LDAP</acronym> modifications were successful:
								<command>some_udm_create_call || die</command>
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
				<para>
					These functions use the following environment variables:
				</para>
				<variablelist>
					<varlistentry>
						<term><envar>VERSION</envar></term>
						<listitem>
							<para>
								This variable must be set before <command>joinscript_init</command> is invoked.
								It specifies the version number of the join script and is used twice:
							</para>
							<orderedlist>
								<listitem>
									<simpara>
										It defines the current version of the join script.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										If that version is already recorded in the status file, the join script qualifies as having been run successfully and the re-execution is prevented.
										Otherwise the join status is incomplete and the script needs to be invoked again.
									</simpara>
								</listitem>
							</orderedlist>
							<para>
								The version number should be incremented for a new version of the package, when the join script needs to perform additional modifications in LDAP compared to any previous packaged version.
							</para>
							<para>
								The version number must be a positive integer.
								The variable assignment in the join script must be on its own line.
								It may optionally quote the version number with single quotes (<literal>'</literal>) or double quotes (<literal>"</literal>).
								The following assignment are valid:
							</para>
							<programlisting language="sh"><![CDATA[
VERSION=1
VERSION='2'
VERSION="3"
							]]></programlisting>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><envar>JS_LAST_EXECUTED_VERSION</envar></term>
						<listitem>
							<para>
								This variable is initialized by <command>joinscript_init</command> with the latest version found in the join status file.
								If no version of the join script was ever executed and thus no record exists, the variable is set to <literal>0</literal>.
								The join script can use this information to decide what to do on an upgrade.
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>

			<section id="join:libraries:shell">
				<title><package>shell-univention-lib</package></title>
				<para>
					The package contains the shell library <filename>/usr/share/univention-lib/base.sh</filename>.
					Since package version <literal>&gt;= 2.0.17-1</literal> it provides the following functions:
				</para>
				<variablelist>
					<varlistentry>
						<term><cmdsynopsis>
								<command>call_joinscript</command>
								<arg choice="opt">--binddn <replaceable>bind-dn</replaceable> --bindpwd <replaceable>bind-password</replaceable></arg>
								<arg><replaceable>XXjoin-script.inst</replaceable></arg>
						</cmdsynopsis></term>
						<listitem>
							<simpara>
								This calls the join script called <filename>XXjoin-script.inst</filename> from the directory <filename class="directory">/usr/lib/univention-install/</filename>.
								The optional LDAP credentials <option>bind-dn</option> and <option>bind-password</option> are passed on as-is.
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>call_joinscript_on_dcmaster</command>
								<arg choice="opt">--binddn <replaceable>bind-dn</replaceable> --bindpwd <replaceable>bind-password</replaceable></arg>
								<arg><replaceable>XXjoin-script.inst</replaceable></arg>
						</cmdsynopsis></term>
						<listitem>
							<simpara>
								Similar to <command>call_joinscript</command>, but also checks the system role and only executes the script on the &ucsMaster;.
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>remove_joinscript_status</command>
								<arg><replaceable>name</replaceable></arg>
						</cmdsynopsis></term>
						<listitem>
							<simpara>
								Removes the given join script <option>name</option> from the join script status file <filename>/var/univention-join/status</filename>.
								Note that this command does the same as <command>joinscript_remove_script_from_status_file</command> provided by
								<package>univention-join</package> (see <xref linkend="join:libraries:join"/>).
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>call_unjoinscript</command>
								<arg choice="opt">--binddn <replaceable>bind-dn</replaceable> --bindpwd <replaceable>bind-password</replaceable></arg>
								<arg><replaceable>XXunjoin-script.uinst</replaceable></arg>
						</cmdsynopsis></term>
						<listitem>
							<simpara>
								Calls the given unjoin script <option>unjoin-script</option> on master and &ucsBackup; systems.
								The file name must be relative to the directory <filename class="directory">/usr/lib/univention-install/</filename>.
								The optional LDAP credentials <option>bind-dn</option> and <option>bind-password</option> are passed on as-is.
								Afterwards the unjoin script is automatically deleted.
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>delete_unjoinscript</command>
								<arg><replaceable>XXunjoin-script.uinst</replaceable></arg>
						</cmdsynopsis></term>
						<listitem>
							<simpara>
								Deletes the given unjoin script <option>XXunjoin-script.uinst</option> if it does not belong to any package.
								The file name must be relative to the directory <filename class="directory">/usr/lib/univention-install/</filename>.
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>stop_udm_cli_server</command>
						</cmdsynopsis></term>
						<listitem>
							<simpara>
								When <command>univention-directory-manager</command> is used the first time a server is started automatically that caches some information about the available modules.
								When changing some of this information (e.g. when adding or removing extended attributes) the server should be stopped manually.
							</simpara>
						</listitem>
					</varlistentry>
				</variablelist>
				<para>
					The package also contains the shell library <filename>/usr/share/univention-lib/ldap.sh</filename>.
					It provides convenience functions to query the Univention directory service and modify objects.
					For (un)join scripts the following functions might be important:
				</para>
				<variablelist>
					<varlistentry>
						<term><cmdsynopsis>
								<command>ucs_addServiceToLocalhost</command>
								<arg choice="plain"><replaceable>servicename</replaceable></arg>
								<arg choice="opt">--binddn <replaceable>bind-dn</replaceable> --bindpwd <replaceable>bind-password</replaceable></arg>
						</cmdsynopsis></term>
						<listitem>
							<para>
								Registers the additional service <option>servicename</option> in the LDAP object representing the local host.
								The optional LDAP credentials <option>bind-dn</option> and <option>bind-password</option> are passed on as-is.
							</para>
							<para>
								Example usage in join script:
							</para>
							<programlisting language="sh">
ucs_addServiceToLocalhost "MyService" "$@"
							</programlisting>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>ucs_removeServiceFromLocalhost</command>
								<arg choice="plain"><replaceable>servicename</replaceable></arg>
								<arg choice="opt">--binddn <replaceable>bind-dn</replaceable> --bindpwd <replaceable>bind-password</replaceable></arg>
						</cmdsynopsis></term>
						<listitem>
							<para>
								Removes the service <option>servicename</option> from the LDAP object representing the local host, effectively reverting an <command>ucs_addServiceToLocalhost</command> call.
								The optional LDAP credentials <option>bind-dn</option> and <option>bind-password</option> are passed on as-is.
							</para>
							<para>
								Example usage in unjoin script:
							</para>
							<programlisting language="sh">
ucs_removeServiceFromLocalhost "MyService" "$@"
							</programlisting>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>ucs_isServiceUnused</command>
								<arg choice="plain"><replaceable>servicename</replaceable></arg>
						</cmdsynopsis></term>
						<listitem>
							<para>
								Returns <literal>0</literal> if no LDAP host object exists where the service <option>servicename</option> is registered with.
							</para>
							<para>
								Example usage in unjoin script:
							</para>
							<programlisting language="sh">
if ucs_isServiceUnused "MyService" "$@"
then
	uninstall_my_service
fi
							</programlisting>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>

		</section>
	</section>

	<section id="join:unjoin">
		<title>Writing unjoin scripts</title>
		<para>
			On package removal packages should clean up the data in Univention directory service.
			Removing data from LDAP also requires appropriate credentials, while removing a package only requires local <literal>root</literal> privileges.
			Therefore UCS provides support for so-called <firstterm>unjoin scripts</firstterm>.
			In most cases it reverts the changes of a corresponding join script.
		</para>
		<warning>
			<para>
				A domain is a distributed system.
				Just because one local system no longer wants to store some information in Univention directory service does not mean that the data should be deleted.
				There might still be other systems in the domain which still require the data.
			</para>
			<para>
				Therefore <quote>the first system to come</quote> should setup the data, while only <quote>the last system to go</quote> may clean up the data.
			</para>
		</warning>
		<para>
			Just like join scripts an unjoin script is prefixed with a two-digit number for lexicographical ordering.
			To reverse the order of the unjoin scripts in comparison to the corresponding join scripts, the number of the unjoin script should be 100 minus the number of the corresponding join script.
			The suffix of an unjoin script is <literal>-uninstall.uinst</literal> and it should be installed in <filename class="directory">/usr/lib/univention-uninstall/</filename>.
		</para>
		<para>
			On package removal the unjoin script would be deleted as well, while the Univention directory service might still contain data managed by the package.
			Therefore the script must be copied from there to <filename class="directory">/usr/lib/univention-install/</filename> in the <filename>prerm</filename> maintainer script.
		</para>
		<para>
			Example:
			The package <package>univention-fetchmail</package> provides both a join script <filename>/usr/lib/univention-install/91univention-fetchmail.inst</filename> and the corresponding unjoin script as <filename>/usr/lib/univention-uninstall/09univention-fetchmail-uninstall.uinst</filename>.
		</para>
		<para>
			As of UCS 3.1 <literal>.inst</literal> and <literal>.uinst</literal> are not distinguishable in the <emphasis>UMC Join module</emphasis> by the user.
			Therefore it is important to use the <literal>-uninstall</literal> suffix to give users a visual hint.
			Internally join scripts are always executed before unjoin scripts and then ordered lexicographically by their prefix.
		</para>
		<para>
			To decide if an unjoin script is the last instance and should remove the data from <acronym>LDAP</acronym>, a service can be registered for each host where the package is installed.
		</para>
		<para>
			For example the package <package>univention-fetchmail</package> uses <command>ucs_addServiceFromLocalhost "Fetchmail" "$@"</command> in the join script to register and <command>ucs_removeServiceFromLocalhost "Fetchmail" "$@"</command> in the unjoin script to unregister a service for the host.
			The data is removed from <acronym>LDAP</acronym> when in the unjoin script <command>ucs_isServiceUnused "Fetchmail" "$@"</command> returns 0.
			As a side effect adding the service also allows using this information to find and list those servers currently providing the Fetchmail service.
		</para>
		<variablelist>
			<varlistentry>
				<term><filename>50join-template-uninstall.uinst</filename></term>
				<listitem>
					<para>
						This unjoin script reverts the changes of the join script from <xref linkend="join:minimal"/>.
					</para>
					<programlisting language="sh"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="join-template/50join-template-uninstall.uinst" parse="text"/></programlisting>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><filename>debian/join-template.prerm</filename></term>
				<listitem>
					<para>
						The unjoin script has to be copied to the join script directory before it gets removed:
					</para>
					<programlisting language="sh"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="join-template/debian/join-template.prerm" parse="text"/></programlisting>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><filename>debian/join-template.postrm</filename></term>
				<listitem>
					<para>
						The unjoin script should be invoked automatically on master and &ucsBackup; systems after the package is removed.
						On all other system roles an administrator must run the join script manually through <command>univention-run-join-scripts</command>.
					</para>
					<programlisting language="sh"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="join-template/debian/join-template.postrm" parse="text"/></programlisting>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><filename>debian/join-template.postinst</filename></term>
				<listitem>
					<para>
						In case the package is installed again and the unjoin script still exists, because it was never executed, the unjoin script must be removed:
					</para>
					<programlisting language="sh"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="join-template/debian/join-template.postinst" parse="text"/></programlisting>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>

	<section id="join:secret">
		<title>LDAP secrets
			<indexterm><primary>domain join</primary><secondary>secrets</secondary></indexterm>
		</title>
		<para>
			The credentials for different UCS domain accounts are stored in plain-text files on some UCS systems.
			The files are named <filename>/etc/<replaceable>*</replaceable>.secret</filename>.
			They are owned by the user <literal>root</literal> and allow read-access for different groups.
		</para>
		<variablelist>
			<varlistentry>
				<term><filename>/etc/ldap.secret</filename> for <uri>cn=admin,<replaceable>$ldap_base</replaceable></uri></term>
				<listitem>
					<simpara>
						This account has full write access to all LDAP entries.
						The file is only available on master and &ucsBackup; systems and is owned by the group <literal>DC Backup Hosts</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			<!--
			<varlistentry>
				<term><filename>/etc/ldap-backup.secret</filename> for <uri>cn=backup,<replaceable>$ldap_base</replaceable></uri></term>
				<listitem>
					<remark>PMH: Is this still required? Bug #31252</remark>
					<simpara>
						The file is only available on &ucsMaster; and &ucsBackup; systems and is owned by the group <literal>DC Backup Hosts</literal>.
					</simpara>
				</listitem>
			</varlistentry>
				-->
			<varlistentry>
				<term><filename>/etc/machine.secret</filename> for <uri><replaceable>$ldap_hostdn</replaceable></uri></term>
				<listitem>
					<simpara>
						Each host uses its account to get at least read-access to LDAP.
						Domain controllers in the container <uri>cn=dc,cn=computers,<replaceable>$ldap_base</replaceable></uri> get additional rights to access LDAP attributes.
						The file is available on all joined system roles and is readable only by the local <literal>root</literal> user and group.
					</simpara>
				</listitem>
			</varlistentry>
			<!--
			<varlistentry>
				<term><filename>/etc/backup-join.secret</filename> for <uri>uid=join-backup,cn=users,<replaceable>$ldap_base</replaceable></uri></term>
				<listitem>
					<remark>PMH: Is this still required? Bug #31252</remark>
					<simpara>
						The file is available on all Domaincontroller systems and is owned by the group <literal>Backup Join</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><filename>/etc/slave-join.secret</filename> for <uri>uid=join-slave,cn=users,<replaceable>$ldap_base</replaceable></uri> </term>
				<listitem>
					<remark>PMH: Is this still required? Bug #31252</remark>
					<simpara>
						The file is available on all Domaincontroller systems and is owned by the group <literal>Slave Join</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			-->
		</variablelist>
		<para>
			During package installation, only the maintainer scripts (see <xref linkend="deb:scripts"/>) on master and &ucsBackup; can use their <literal>root</literal> permission to directly read <filename>/etc/ldap.secret</filename>.
			Thus only on those roles the join scripts get automatically executed when the package is installed.
			On all other system roles, the join scripts need to be executed manually.
			This can either be done through the <emphasis>UMC Join module</emphasis> or through the command line tool <command>univention-run-join-scripts</command>.
			Both methods require appropriate credentials.
		</para>

		<section id="join:secret:change">
			<title>Password change
				<indexterm><primary>domain join</primary><secondary>secrets</secondary><tertiary>change</tertiary></indexterm>
				<indexterm><primary>server password change</primary><see>domain join</see></indexterm>
			</title>

			<para>
				To reconfirm the trust relation between UCS systems, computers need to regularly change the password associated with the machine account.
				This is controlled through the &ucsUCRV; <envar>server/password/change</envar>.
				For UCS servers this is evaluated by the script <filename>/usr/lib/univention-server/server_password_change</filename>, which is invoked nightly at 01:00 by <citerefentry><refentrytitle>cron</refentrytitle><manvolnum>8</manvolnum></citerefentry>.
				The interval is controlled through a second &ucsUCRV; <envar>server/password/interval</envar>, which defaults to 21 days.
			</para>
			<para>
				The password is stored in the plain text file <filename>/etc/machine.secret</filename>.
				Many long running services read these credentials only on startup, which breaks when the password is changed while they are still running.
				Therefore UCS provides a mechanism to invoke arbitrary commands, when the machine password is changed.
				This can be used for example to restart specific services.
			</para>
			<para>
				Hook scripts should be placed in the directory <filename class="directory">/usr/lib/univention-server/server_password_change.d/</filename>.
				The name must consist of only digits, upper and lower ASCII characters, hyphens and underscores.
				They file must be executable and is called via <citerefentry><refentrytitle>run-parts</refentrytitle><manvolnum>8</manvolnum></citerefentry>.
				It receives one argument, which is used to distinguish three phases:
			</para>
			<procedure>
				<title>Server password change procedure</title>
				<step>
					<para>
						Each script will be called with the argument <literal>prechange</literal> before the password is changed.
						If any script terminates with an exit status unequal zero, the change is aborted.
					</para>
				</step>
				<step>
					<para>
						A new password is generated locally using <citerefentry><refentrytitle>makepasswd</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
						It is changed in the Univention directory service via UDM and stored in <filename>/etc/machine.secret</filename>.
						<remark>PMH: hard coded to 8 characters Bug #31281</remark>
						The old password is logged in <filename>/etc/machine.secret.old</filename>.
					</para>
					<para>
						If anything goes wrong in this step, the change is aborted and the changes need to be rolled back.
					</para>
				</step>
				<step>
					<para>
						All hook scripts are called again.
					</para>
					<stepalternatives>
						<step>
							<para>
								If the password change was successful, <option>postchange</option> gets passed to the hook scripts.
								This should complete any change prepared in the <literal>prechange</literal> phase.
							</para>
						</step>
						<step>
							<para>
								If the password change failed for any reason, all hook scripts are called with the argument <option>nochange</option>.
								This should undo any action already done in the <literal>prechange</literal> phase.
							</para>
						</step>
					</stepalternatives>
				</step>
			</procedure>

			<example>
				<title>Server password change example</title>
				<para>
					Install this file to <filename class="directory">/usr/lib/univention-server/server_password_change.d/</filename>.
				</para>
				<programlisting language="sh"><![CDATA[
#!/bin/sh
case "$1" in
prechange)
	# nothing to do before the password is changed
	exit 0
	;;
nochange)
	# nothing to do after a failed password change
	exit 0
	;;
postchange)
	# restart daemon after password was changed
	invoke-rc.d my-daemon restart
	;;
esac
				]]></programlisting>
				<para>
					init-scripts should only be invoked indirectly through <citerefentry><refentrytitle>invoke-rc.d</refentrytitle><manvolnum>8</manvolnum></citerefentry>.
					This is required for <command>chroot</command> environments and allows the policy layer to control starting and stopping in certain special situations like during an system upgrade.
					<remark>PMH: we need to use it too Bug #18497</remark>
				</para>
			</example>
		</section>

	</section>

</chapter>
<!-- vim:set ts=2 sw=2 noet ft=docbk:-->
