<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
	<!ENTITY % entities SYSTEM "../../stylesheets/macros-en.ent" >
	%entities;
]>
<chapter id="chap:app" status="draft">
	<title>App Center
		<indexterm><primary>App center</primary></indexterm>
	</title>
	<remark>PMH: Bug #31226</remark>
	<important>
		<para>
			This chapter is a draft and work in progress! Feedback is very much
			appreciated.
		</para>
	</important>
	<para>
		The Univention App Center provides a platform for software vendors and an
		easy-to-use entry point for &ucsUCS; users to extend their environment with
		business software.
	</para>

	<section id="app:package">
		<title>Packaging for the App Center</title>
		<para>
			The App Center is based on the Debian package system.
			From a technical point of view, the installation of an application via the App Center contains
			of two rough steps: (1) adding a new repository to the system which
			resides on the App Center server and (2) <command>apt-get</command> which
			installs the required package. This means that 3rd party
			vendors need to package their application as a <literal>.deb</literal>
			file and send that to Univention.
		</para>
		<para>
			It is recommended (and probably necessary) to provide at least one
			additional package that arranges for deeper integration into &ucsUCS;.
			This package could be named
			<package>univention-<replaceable>appname</replaceable></package> and have
			a Dependency on the core application (on <literal>dpkg</literal> level).
			Depending on whether the application wants to extend the LDAP another
			(independent) package needs to be provided, say,
			<package>univention-<replaceable>appname</replaceable></package>. It does
			not need to be installed on each system the core application is installed
			but needs to stay installed even when the core application is removed.
			Thus it should be as independent as possible from the the core
			application (and
			<package>univention-<replaceable>appname</replaceable></package>).
		</para>
		<para>
			See <xref linkend="chap:debian"/> for further details on how to build
			Debian packages.
		</para>
	</section>
	<section id="app:iniFile">
		<title>Application meta file</title>
		<para>
			The App Center needs some meta information about the application to
			handle the installation and to present information to the user. The
			application needs a so-called <literal>.ini</literal> file for that.
		</para>
		<para>
			A minimal example along with some comments on the variables is attached:
		</para>
		<programlisting language="ini"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="application.ini" parse="text"/></programlisting>
		<para>
			This file needs to be shipped with the application and should be updated
			with each new version of the application at least changing
			<literal>Version</literal>.
		</para>
		<para>
			A few variables need further explanation:
		</para>
		<variablelist>
			<varlistentry>
				<term>ID</term>
				<listitem>
					<simpara>
						Needs to stay the same all the time. It is used to connect
						different versions.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Version</term>
				<listitem>
					<simpara>
						Has to rise every time. Needs to be comparable, i.e. versions
						consisting only of a codename are not useful. In the App Center,
						only the newest version (or the currently installed one) is shown.
						It is possible to install one specific version but this needs
						knowledge of internal IDs (beyond control even for the application
						vendor).
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>MinPhysicalRAM</term>
				<listitem>
					<simpara>
						The minimal amount of free memory in MB when trying to install the
						application. The application should work fluently above that limit
						at least for smaller environments. If this limit is set very high
						many testers will be unable to install this application as there is
						no easy way to skip this test.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>RequiredApps</term>
				<listitem>
					<simpara>
						Application IDs for apps that need to be installed in order to run
						this one correctly. These applications will not be installed
						automatically. New in UCS 3.2.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>ConflictedSystemPackages</term>
				<listitem>
					<simpara>
						Package names that may not be installed along with the application.
						It is highly recommended that this list is reflected on
						<literal>dpkg</literal> level in some other package of the
						application. This list is just to show the user conflicts
						<emphasis>before</emphasis> the application is to be installed.
						Conflicts on package level are resolved automatically and the user
						has to confirm if some packages will be uninstalled. Same for
						<literal>ConflictedApps</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>DefaultPackages</term>
				<listitem>
					<simpara>
						A list of packages that will be installed. It is recommended to
						keep this list as small as possible and install other packages as
						Dependencies as this is less error prone. Preferably only a package
						like
						<package>univention-<replaceable>appname</replaceable></package> is
						given here.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>DefaultPackagesMaster</term>
				<listitem>
					<simpara>
						Installing an application may require an extension of the LDAP
						schema. This is done by providing a separate package for this
						schema file and install it on the &ucsMaster; (and all &ucsBackup;
						servers). The App Center will install these packages automatically
						throughout the domain â€” in opposite to the
						<literal>DefaultPackages</literal> which are only installed
						locally. Another difference is that these packages will not be
						uninstalled even when the whole application is removed because a
						schema that was used before it is removed again will break the
						whole LDAP server.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Screenshot</term>
				<listitem>
					<simpara>
						Name of a screenshot file illustratin the application in action.
						Format can be JPG or (preferably)	PNG.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>UseShop</term>
				<listitem>
					<simpara>
						Boolean value whether a link shall be displayed leading directly to
						some kind of shop. If <literal>ShopURL</literal> is not given
						<literal>https://shop.univention.com</literal> is used by default.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>ShopURL</term>
				<listitem>
					<simpara>
						Only makes sense in combination with
						<literal>UseShop=True</literal>. The following parameters are sent
						to this URL via GET:
					</simpara>
					<itemizedlist>
						<listitem><simpara>
								key_id (Key ID of the License)
						</simpara></listitem>
						<listitem><simpara>
								ucs_version (major and minor version of UCS, e.g. 3.2)
						</simpara></listitem>
						<listitem><simpara>
								app_id (internal ID of the Application)
						</simpara></listitem>
						<listitem><simpara>
								app_version (current version of the Application)
						</simpara></listitem>
					</itemizedlist>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>
	<section id="app:optionalFiles">
		<title>Optional application files</title>
		<para>
			Along with the <literal>.ini</literal> file, there are more files that
			can be shipped along with the Application, each of them optionally:
		</para>
		<variablelist>
			<varlistentry>
				<term>LICENSE_AGREEMENT</term>
				<listitem>
					<simpara>
						A file the user has to accept before the installation starts. As of
						UCS 3.2 HTML in this file is allowed and it may be localised by
						using the files <literal>LICENSE_AGREEMENT_EN</literal> resp.
						<literal>LICENSE_AGREEMENT_DE</literal>.
					</simpara>
					<important>
						<para>
							As stated above HTML in this file is now allowed (and enforced).
							It was not in UCS 3.1 but received some simple auto formatting.
							You may have to convert an existing
							<literal>LICENSE_AGREEMENT</literal>.
						</para>
					</important>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>README_INSTALL</term>
				<listitem>
					<simpara>
						A file that is presented to the user before installation (but after
						<literal>LICENSE_AGREEMENT</literal>). HTML is allowed. It may be
						localised by using the files <literal>README_INSTALL_EN</literal>
						resp. <literal>README_INSTALL_DE</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>README_POST_INSTALL</term>
				<listitem>
					<simpara>
						A file that is presented to the user after installation. HTML is
						allowed. It may be localised by using the files
						<literal>README_POST_INSTALL_EN</literal> resp.
						<literal>README_POST_INSTALL_DE</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>README_UPDATE</term>
				<listitem>
					<simpara>
						A file that is presented to the user before upgrading, listing
						changes. Note that a user may only upgrade to the newest version
						and does so in one step. Only the latest
						<literal>README_UPDATE</literal> is shown.
						As of UCS 3.2 it may be localised by using the files
						<literal>README_UPDATE_EN</literal> resp.
						<literal>README_UPDATE_DE</literal>.
					</simpara>
					<important>
						<para>
							As stated above HTML in this file is now allowed (and enforced).
							It was not in UCS 3.1 but received some simple auto formatting.
							You may have to convert an existing
							<literal>README_UPDATE</literal>.
						</para>
					</important>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>README_POST_UPDATE</term>
				<listitem>
					<simpara>
						A file that is presented to the user after upgrading. Note that a
						user may only upgrade to the newest version and does so in one
						step. Only the latest <literal>README_POST_UPDATE</literal> is
						shown. HTML is allowed. It may be localised by using the files
						<literal>README_POST_UPDATE_EN</literal> resp.
						<literal>README_POST_UPDATE_DE</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>README</term>
				<listitem>
					<simpara>
						A README file that the user may see in a dedicated Univention
						Management Console Module for the installed application. Should
						contain something like first steps with the installed application
						and explain what can be done with it and how. HTML is allowed. It
						may be localised by using the files <literal>README_EN</literal>
						resp <literal>README_DE</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>README_UNINSTALL</term>
				<listitem>
					<simpara>
						A file that is presented to the user before uninstallation. HTML is
						allowed. It may be localised by using the files
						<literal>README_UNINSTALL_EN</literal> resp.
						<literal>README_UNINSTALL_DE</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>README_POST_UNINSTALL</term>
				<listitem>
					<simpara>
						A file that is presented to the user after uninstallation. HTML is
						allowed. It may be localised by using the files
						<literal>README_POST_UNINSTALL_EN</literal> resp.
						<literal>README_POST_UNINSTALL_DE</literal>.
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>
	<section id="app:integration">
		<title>Integrating the Application in UCS</title>
		<para>
			Reuse users, groups, computers already administered in domain.
			See <xref linkend="udm:ldap:common-attributes"/>.
		</para>
		<para>
			An Application may need more attributes than there are present. For
			example something like <emphasis>This user is allowed to use the
				app</emphasis>. For this an app will have to extend the LDAP schema
			(this should be done in the <literal>DefaultPackagesMaster</literal> of
			the Application). Furthermore it needs to add Extended Attributes (see
			<xref linkend="udm:ea"/>) in a Join Script (see <xref
				linkend="chap:join"/>) in a package from
			<literal>DefaultPackages</literal>.
		</para>
		<para>
			If the application wants to sync certain attributes (for example
			passwords) there are listener modules. See <xref
				linkend="chap:listener"/>.
		</para>
	</section>

	<section id="app:bestpractices">
		<title>Best practices</title>
		<para>
			TBD. Minimal example app. Examples. Important: #DEBHELPER#.
		</para>
	  <section id="app:ucs_registerLDAPExtension">
		  <title>Registration of LDAP and UDM Extensions</title>
		  <para>
				The easiest way to register <acronym>LDAP</acronym> schema and ACL extensions as well as UDM syntax, UDM hook and UDM extension modules
				is to call the <literal>ucs_registerLDAPExtension</literal> shell function provided by the Univention shell function library
				(see <xref linkend="misc:lib"/>). This shell function offers five main options: <literal>--schema</literal>,  <literal>--acl</literal>,
				<literal>--udm_syntax</literal>, <literal>--udm_hook</literal>, <literal>--udm_module</literal>, which can be combined. Each of these
				options expects a filename as option argument. During one call of the function, it will always process the given extensions in the order
				schema, ACL, UDM syntax, UDM hook and finally UDM module.
				Called from a joinscript, it automatically determines some required parameters, like the app identifier plus Debian package name and version,
				required for the creation of the corresponding object. After creation of the object the function waits
				up to 3 minutes for the &ucsMaster; to signal availability of the new extension and reports success or failure.
				For UDM extensions it additionally checks that the corresponding file has been made available in the local filesystem.
				Failure conditions may occurr e.g. in case the new <acronym>LDAP</acronym> schema extension collides with the schema currently active.
				The &ucsMaster; only activates a new <acronym>LDAP</acronym> schema or ACL extension if the configuration check succeeded.
		  </para>
		  <para>
				Before calling the shell function the shell variable <literal>UNIVENTION_APP_IDENTIFIER</literal> should be set to the versioned app identifier.
				The shell function will then register the specified app identifier with the extension object to indicate that
				the extension object is required as long as this app is installed anywhere in the UCS domain.
		  </para>
		  <para>
				To prevent accidental downgrades the function <literal>ucs_registerLDAPExtension</literal> (as well as the corresponding UDM module)
				only execute modifications of an existing object if the Debian package version is not older than the previous one.
		  </para>
		  <para>
				<literal>ucs_registerLDAPExtension</literal> supports two additional options to specify a valid range of UCS versions, where an extension should be
				activated. The options are <literal>--ucsversionstart</literal> and <literal>--ucsversionend</literal>. The version check is only
				performed whenever the extension object is modified. By calling this function from a joinscript, it will
				automatically update the Debian package number stored in the object, triggering a re-evaluation of the specified UCS version range.
				The extension is activated up to and excluding the UCS version specified by <literal>--ucsversionend</literal>.
				This validity range is not applied to <acronym>LDAP</acronym> schema extensions, since they mast not be undefined as long as there are objects
				in the <acronym>LDAP</acronym> directory which make use of it.
		  </para>
			<para>
				There is a corresponding <literal>ucs_unregisterLDAPExtension</literal> function, which can be used to unregister extension objects. This only works if no App is registered any longer for the object. It must not be called unless it has been verified that no object in <acronym>LDAP</acronym>  still requires this schema extension. For this reason it schould generally not be called in unjoin scripts.
			</para>
		  <para>
				Below some examples are given for the five extension types.
		  </para>
	  	<section id="app:ucs_registerLDAPExtensionSchema">
				<para>
					<acronym>LDAP</acronym> schema extension can be deployed in a UCS domain by creation of a <literal>settings/ldapschema</literal> object.
					The easiest way to create such an object, is by using the <literal>--schema</literal> option of the <literal>ucs_registerLDAPExtension</literal>
					shell function.
				</para>

				<title>Registration of LDAP Schema Extensions</title>
				<example id="app:ucs_registerLDAPExtensionSchema_example">
					<programlisting language="sh">
UNIVENTION_APP_IDENTIFIER="appID-appVersion"	## example
. /usr/share/univention-lib/ldap.sh
ucs_registerLDAPExtension "$@" --schema /path/to/appschemaextension.schema
					</programlisting>
				</example>
				<para>
					There is a corresponding <literal>ucs_unregisterLDAPExtension</literal> function, which can be used to unregister extension objects. This only works if no App is registered any longer for the object. It must not be called for <acronym>LDAP</acronym> schema extensions unless it has been verified that no object in <acronym>LDAP</acronym>  still requires this schema extension. For this reason it schould generally not be called in unjoin scripts.
				</para>
				<example id="app:ucs_unregisterLDAPExtensionSchema_example">
					<programlisting language="sh">
. /usr/share/univention-lib/ldap.sh
ucs_unregisterLDAPExtension "$@" --schema appschemaextension
					</programlisting>
				</example>
	  	</section>

			<section id="app:ucs_registerLDAPExtensionACL">
				<title>Registration of LDAP ACL Extensions</title>
				<para>
					Note: Since <acronym>LDAP</acronym> schema and <acronym>LDAP</acronym> ACL changes trigger a restart of the <acronym>LDAP</acronym> master server, it is recommended to combine both in a single call of <literal>ucs_unregisterLDAPExtension</literal> with options <literal>--schema</literal> and <literal>--acl</literal>. Since the function waits for activation of the extension objects, this also reduces the time spent on waiting for the activation.
				</para>
				<example id="app:ucs_registerLDAPExtensionACL_example">
					<programlisting language="sh">
UNIVENTION_APP_IDENTIFIER="appID-appVersion"	## example
. /usr/share/univention-lib/ldap.sh
ucs_registerLDAPExtension "$@" --acl /path/to/appacl.acl --ucsversionstart 3.2-0
					</programlisting>
				</example>
				<para>
					There is a corresponding <literal>ucs_unregisterLDAPExtension</literal> function, which can be used to unregister extension objects. This only works if no App is registered any longer for the object. It schould not be called for <acronym>LDAP</acronym> ACL extensions unless it has been verified that no object in <acronym>LDAP</acronym> still uses the corresponding attributes. For this reason it schould generally not be called in unjoin scripts.
				</para>
				<example id="app:ucs_unregisterLDAPExtensionACL_example">
					<programlisting language="sh">
. /usr/share/univention-lib/ldap.sh
ucs_unregisterLDAPExtension "$@" --acl appacl
					</programlisting>
				</example>
			</section>

			<section id="app:ucs_registerUDMModule">
				<title>Registration of UDM Extension Modules</title>
				<example id="app:ucs_registerUDMModule_example">
					<programlisting language="sh">
UNIVENTION_APP_IDENTIFIER="appID-appVersion"	## example
. /usr/share/univention-lib/ldap.sh
ucs_registerLDAPExtension "$@" --udm_module /path/to/appmodule.py --ucsversionstart 3.2-0
					</programlisting>
				</example>
				<para>
					There is a corresponding <literal>ucs_unregisterLDAPExtension</literal> function, which can be used to unregister a <literal>settings/udm_module</literal> object. This only works if no App is registered any longer for the object.
				</para>
				<example id="app:ucs_unregisterUDMModule_example">
					<programlisting language="sh">
. /usr/share/univention-lib/ldap.sh
ucs_unregisterLDAPExtension "$@" --udm_module newapp/someobject
					</programlisting>
				</example>
			</section>

			<section id="app:ucs_registerUDMSyntax">
				<title>Registration of UDM Syntax Extensions</title>
				<example id="app:ucs_registerUDMSyntax_example">
					<programlisting language="sh">
UNIVENTION_APP_IDENTIFIER="appID-appVersion"	## example
. /usr/share/univention-lib/ldap.sh
ucs_registerLDAPExtension "$@" --udm_syntax /path/to/appsyntax.py --ucsversionstart 3.2-0
					</programlisting>
				</example>
				<para>
					There is a corresponding <literal>ucs_unregisterLDAPExtension</literal> function, which can be used to unregister a <literal>settings/udm_syntax</literal> object. This only works if no App is registered any longer for the object.
				</para>
				<example id="app:ucs_unregisterUDMSyntax_example">
					<programlisting language="sh">
. /usr/share/univention-lib/ldap.sh
ucs_unregisterLDAPExtension "$@" --udm_syntax appsyntax
					</programlisting>
				</example>
			</section>

			<section id="app:ucs_registerUDMHook">
				<title>Registration of UDM Hooks</title>
				<example id="app:ucs_registerUDMHook_example">
					<programlisting language="sh">
UNIVENTION_APP_IDENTIFIER="appID-appVersion"	## example
. /usr/share/univention-lib/ldap.sh
ucs_registerLDAPExtension "$@" --udm_hook /path/to/apphook.py --ucsversionstart 3.2-0
					</programlisting>
				</example>
				<para>
					There is a corresponding <literal>ucs_unregisterLDAPExtension</literal> function, which can be used to unregister a <literal>settings/udm_hook</literal> object. This only works if no App is registered any longer for the object.
				</para>
				<example id="app:ucs_unregisterUDMHook_example">
					<programlisting language="sh">
. /usr/share/univention-lib/ldap.sh
ucs_unregisterLDAPExtension "$@" --udm_hook apphook
					</programlisting>
				</example>
			</section>
		</section>
	</section>

	<section id="app:checklist">
		<title>Checklist</title>
		<para>
			Any Application needs to pass the following tests:
		</para>
		<itemizedlist>
			<listitem>
				<simpara>
					App can be installed. Does not break UCS functionality
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					App can be removed. Does not break UCS functionality
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					App cleans up every change it made. This holds especially for extended attributes. See <xref linkend="join:unjoin"/>
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					Can be upgraded.
				</simpara>
			</listitem>
		</itemizedlist>
	</section>

	<section id="app:testcenter">
		<title>Setup test app center</title>
		<para>
			TBD
		</para>
	</section>

</chapter>
<!-- vim:set ts=2 sw=2 noet ft=docbk:-->
