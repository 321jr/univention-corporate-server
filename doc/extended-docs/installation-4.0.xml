<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
          "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [

  <!ENTITY % entities SYSTEM "../stylesheets/macros-en.ent" >

  %entities;
]>
<book lang="en" id="installation-4.0">
<bookinfo>
  <title>Univention Corporate Server</title>
  <subtitle>Extended installation documentation</subtitle>
  <revhistory>
     <revision>
        <revnumber>4.0-0</revnumber>
        <date>16 Oct 2014</date>
     </revision>
  </revhistory>
</bookinfo>

<chapter id="appliance:use">
  <title>Using a UCS appliance</title>

  <para> 
	In addition to the traditional installation, there is also the possibility of providing UCS via
	an appliance image. These appliance images can be used both for simple commissioning in a
	virtualization solution such as VMware and for providing a cloud instance.
  </para>

  <para> 
	Appliances can be created with minimal effort. This is described in <xref
	linkend="appliance:create"/>.
  </para>

  <para> 
	Whilst some of the settings can be preconfigured globally in the image, it is still necessary
	for the end user to make final adjustments to the configuration, e.g., to set the computer name
	or the domain used. For this reason, a basic system is installed for the appliance image and a
	component set up, which then allows the end user to finalise the configuration. Alternatively,
	the configuration can also be performed automatically without user interaction. This is
	described in <xref linkend="appliance:use:auto"/>.
  </para>

  <para> 
	The interactive configuration can be performed in two ways:

	<itemizedlist>
	  <listitem><simpara>
		A graphic interface starts on the system, in which the web browser Firefox is started in
		full-screen mode and automatically accesses the configuration URL. This option is
		particularly suitable for images in virtualization solutions.
	  </simpara></listitem>

	  <listitem><simpara>
		The configuration can also be performed directly via an external web browser. In this case,
		the system's IP address must be known to the user (e.g., if it has been notified to him in
		advance in the scope of the provision of a cloud image).
	  </simpara></listitem>
	  
	</itemizedlist>
  </para>

  <para> 
	In the scope of the initial configuration, the user can change the following settings in the
	default setting:

	<itemizedlist>
	  <listitem><simpara>
		Selection of the language, time zone and keyboard layout
	  </simpara></listitem>

	  <listitem><simpara>
		Configuration of the network settings
	  </simpara></listitem>
	  
	  <listitem><simpara>
		Setup of a new UCS domain or joining a UCS or Microsoft Active Directory domain
	  </simpara></listitem>
	  
	  <listitem><simpara>
		Software selection of UCS key components. The user can install software from other
		vendors at a later point in time via the Univention App Center.
	  </simpara></listitem>
	</itemizedlist>
  </para>

</chapter>



<chapter id="appliance:create">
  <title>Creating a UCS appliance/cloud image</title>

  <section id="appliance:intro">
	<title>Introduction</title>

	<para> 
	  This article describes how to set up an appliance based on UCS 4.0. This type of appliance can
	  also be used to provide preconfigured instances as a cloud service provider. The
	  creation of images for typical virtualization solutions is another possible application
	  scenario, see <xref linkend="appliance:create:virt"/>.
	</para>

  </section>

  <section id="appliance:installbase">
	<title>Performing the basic installation</title>

	<para> 
	  The basic installation is performed using the standard UCS installer. Further information on
	  the individual options can be found in the UCS manual. The installation should be performed in
	  a virtualization solution. In this example, the installation is performed in UVMM. A qcow2
	  image should be selected for the hard drive for the virtual machine.  Qcow2 images can be
	  converted to different virtualization formats such as VirtualBox or VMware using a tool
	  provided by Univention, see <xref linkend="appliance:create:virt"/>.
	</para>

	<para> 
	  The following settings are configured for the basic image:

	  <itemizedlist>
		<listitem><simpara>
		  The installation language can be selected as required. The locale of the system is set
		  based on the selected language. If you want to be able to use the appliance in more than
		  one language, you can add another locale at a later point in time.
		</simpara></listitem>

		<listitem><simpara>
		  A preselection is made for the time zone which is then adapted subsequently by the users
		  of the appliance.
		</simpara></listitem>

		<listitem><simpara>
		  The keyboard layout is only relevant for local logins; it is not important for the web-based
		  configuration.
		</simpara></listitem>

		<listitem><simpara>
		  A configuration via DHCP is the most practical presetting for appliance images. The
		  Univention Installer attempts to perform a DHCP request in the scope of the network
		  configuration. The network configuration is only performed via DHCP if this is successful,
		  i.e., an IP address must be assigned to the appliance for the duration of the setup. This
		  can be done with an <emphasis>IP managed client</emphasis> object in the &ucsUMC;.
		</simpara></listitem>

		<listitem><simpara>
		  In the next step, the initial password is set for the root user. This root password is
		  changed by the end user during the commissioning of the appliance image.
		</simpara></listitem>

		<listitem><simpara>
		  The partitioning can be performed as required, e.g., by using an LVM. For an image that
		  will be used in a cloud setup, a single root partition should be used. This allows growing
		  the root partition based on the selected instance disk size.
		</simpara></listitem>
	  </itemizedlist>
	</para>

	<para> 
	  Once the basic installation is complete, a dialogue is shown in which you can select whether
	  to create a new UCS domain or join an existing domain. To create the appliance, <keycombo action="simul"><keycap function="control">Control</keycap><keycap>Q</keycap></keycombo>
	  must be pressed at this point to interrupt the process. The installation continues for a short
	  period of time, during which the <guimenu>Starting Univention System Setup</guimenu> message
	  appears and the systems then restarts. 
	</para>

	<para> 
	  The installation of the basic image is now complete. Following a reboot, the user of the
	  appliance is shown the dialogue for adjusting the configuration, see <xref
	  linkend="appliance:use"/>.
	</para>

	<para> 
	  In most cases, the appliance needs to be preconfigured with a certain selection of
	  software. The installation is usually performed via the Univention App Center, which, however,
	  is not yet available at this point in time. The installation is thus performed via the command
	  line. UCS standard components can be installed using the corresponding package names, e.g.

	  <programlisting language="sh">
univention-install univention-printserver
	  </programlisting>

	  Packages from the Univention App Center are installed with the command
	  <command>univention-add-app</command> once a valid license is available.
	  The ID of an application can be retrieved with the command
	  <command>univention-add-app --list</command>:

	  <programlisting language="sh">
univention-add-app -l APPID
	  </programlisting>
	</para>

	<para> 
	  The system now needs to be shut down cleanly without filesystems still being mounted.
	</para>

	<para> 
	  The qcow2 image (i.e., the hard drive of the virtual machine) is now copied. If the
	  <emphasis>default</emphasis> storage pool of UVMM was used, the image is stored in the
	  directory <filename>/var/lib/libvirt/images</filename>.
	</para>

	<para> 
	  Additional steps are required if the image is to be used in Amazon EC2 
	  (see <xref linkend="appliance:create:ec2"/>), OpenStack (see <xref
	  linkend="appliance:create:openstack"/>) or as a VMware / VirtualBox appliance (see <xref
	  linkend="appliance:create:virt"/>).
	</para>

	<section id="appliance:create:ec2">
	  <title>Providing an image for Amazon EC2</title>
	  <para>
		The following adjustments need to be made for an image that is to be used in Amazon
		EC2.
	  </para>

	  <para>
		  Amazon EC2 uses a PyGrub version which can only read the data format from Grub 1 (<filename>menu.lst</filename>),
		whilst UCS uses Grub 2 as the bootloader. The following &ucsUCR; variables can be
		used to generate the Grub configuration in this format additionally. The bootloader
		configuration is also adapted:

		<programlisting language="sh">
append="$(ucr get grub/append)"
ucr set grub/append="$(echo "$append" |
 sed -e 's|/dev/sda|/dev/xvda|g;s|splash|nosplash|')"
ucr set grub/root=/dev/xvda1
ucr set grub/grub1root="(hd0)"
update-initramfs -uk all
update-grub
univention-grub-generate-menu-lst
		</programlisting>
	  </para>

	  <para>
		The initial login to the EC2 instance is performed via a SSH host key. To prevent SSH logins
		from occurring with the default root password of the standard image during commissioning of
		the instance, the initial root password is removed. The following &ucsUCR; variable configures this start mode:

		<programlisting language="sh">
usermod -p \* root
ucr set server/amazon=true
		</programlisting>
	  </para>

	  <para>
		  The name server should be set; in this example to <systemitem class="service">OpenDNS</systemitem>. Additionally, the timeout when
		  waiting for a DHCP request answer is lowered.
 
		<programlisting language="sh">
ucr set nameserver1=208.67.222.222 dns/forwarder1=208.67.222.222
ucr unset nameserver2 nameserver3
ucr unset dns/forwarder2 dns/forwarder3
ucr set interfaces/eth0/type=dhcp dhclient/options/timeout=12
		</programlisting>
	  </para>
	</section>

	<section id="appliance:create:openstack">
	  <title>Providing an image for OpenStack</title>
	  <para>
		The provisioning for OpenStack images occurs via Cloud-Init (see
		<xref linkend="appliance:use:cloudinit"/>).
		Cloud-Init is a standardised solution for configuration of an image. Cloud-Init checks a
		range of data sources for an existing configuration. The <package>univention-cloud-init</package>
		package must be installed to prepare an image for provisioning via Cloud-Init:

		<programlisting language="sh">
univention-install univention-cloud-init
		</programlisting>
	  </para>

	  <para>
		The local <application>Firefox</application> session should not be started when running as an OpenStack instance.
		<programlisting language="sh">
ucr set system/setup/boot/start=false
		</programlisting>
	  </para>

	  <para>
		The initial login to the OpenStack instance is performed via a SSH host key. To prevent SSH logins
		from occurring with the default root password of the standard image during commissioning of
		the instance, the initial root password is removed.
		<programlisting language="sh">
usermod -p \* root
		</programlisting>
	  </para>
	</section>

	<section id="appliance:create:virt">
	  <title>Providing an image for VMware/VirtualBox</title>
	  <para>
		  Virtualization images for <application>VirtualBox</application>, <application>VMware Player</application> and <application>VMware ESX</application> can also be created on
		the basis of the qcow2 images above. To this end, Univention offers a tool, which can be
		installed via the <package>generate-appliance</package> package (the integration in UCS 4.0
		can be followed via Bug 37137).
	  </para>

	  <para>
		The <command>generate_appliance</command> tool must be started and the qcow2
		image selected with the parameter <emphasis>-s</emphasis>:

		<programlisting>
generate_appliance -s appliance.qcow2
		</programlisting>

		The virtual machine is assigned one CPU and a gigabyte of RAM as standard. If the appliance
		has a higher storage or CPU power requirement, the parameter <emphasis>-m</emphasis> can be
		used to specify a different quantity of RAM in megabytes and <emphasis>-c</emphasis> can be
		used to assign a different number of CPUs.

		The parameters <emphasis>--vendor</emphasis> and <emphasis>--product</emphasis> can be used
		to specify a vendor and product name.
	  </para>

	  <para>
		In the default setting, three different virtualization images are generated from the qcow2
		image. The generation for a type can be suppressed using the respectively given option:

		<itemizedlist>
		  <listitem><simpara>
			Zipped VMware compatible images (e.g. for <application>VMware Player</application>), can be suppressed with <option>--no-vmware</option>
		  </simpara></listitem>

		  <listitem><simpara>
			VirtualBox OVA image, can be suppressed with <option>--no-ova-virtualbox</option>
		  </simpara></listitem>

		  <listitem><simpara>
			<application>VMware ESX</application> OVA image, can be suppressed with <option>--no-ova-esxi</option>
		  </simpara></listitem>
		</itemizedlist>
	  </para>
	</section>
  </section>

  <section id="appliance:use:auto">
	<title>Automatic configuration of an appliance</title>
	<para>
	  Instead of an interactive configuration of the appliance by the user,
	  it can also be performed automatically. The automatic configuration can either be performed
	  via <application>cloud-init</application> (a general tool for the provision of cloud images) or a Univention appliance
	  mode profile file.
	</para>

	<section id="appliance:use:auto:profile">
	  <title>Automatic configuration with a UCS appliance mode profile file</title>
	  
	  <para>
		Automatic configuration with the UCS appliance mode requires creating a profile file
		<filename>/var/cache/univention-system-setup/profile</filename>. Example configuration:

		<programlisting>
hostname="ucs"
domainname="testdom.local"
windows/domain="TESTDOM"
ldap/base="dc=testdom,dc=local"
root_password="univention"
 
locale/default="de_DE.UTF-8:UTF-8"
components="univention-s4-connector:univention-samba4 univention-nagios-server"
packages_install="univention-s4-connector univention-samba4 univention-nagios-server"
packages_remove=""

server/role="domaincontroller_master"

interfaces/eth0/type=""
interfaces/eth0/address="10.201.101.2"
interfaces/eth0/netmask="255.0.0.0"
interfaces/eth0/network="10.0.0.0"
interfaces/eth0/broadcast="10.255.255.255"
dns/forwarder1="10.201.74.2"
gateway="10.201.0.1"
		</programlisting>

		If <envar>interfaces/eth0/type</envar> is set to <literal>dynamic</literal>, DHCP is
		used for the network configuration.
	  </para>

	  <para>
		Then the <command>/usr/lib/univention-system-setup/scripts/setup-join.sh</command> tool
		needs to be run once. Then Apache and the UMC server need to be restarted:

		<programlisting language="sh">
invoke-rc.d apache2 restart
invoke-rc.d univention-management-console-server restart
		</programlisting>
	  </para>
	</section>

	<section id="appliance:use:cloudinit">
	  <title>Automatic configuration of an appliance with Cloud-Init</title>
	  <para>
		Cloud-Init works on a configuration file in the cloud configuration format.
		The configuration file is provided by the respective cloud service; the type of provision
		differs from cloud solution to cloud solution. It is currently only possible to provide a
		&ucsMaster;.
	  </para>

	  <para>
		The configuration file may be adapted for different scenarios. To setup a domain,
		the <literal>ucs_setup</literal> section is required. Note that the supplied
		<literal>ldap_base</literal> is used in other configuration sections as well.
	  </para>

	  <para>
		The following includes an example file with which a &ucsMaster; can be provided. In
		addition, several files are generated on the system: the UCS license to be installed and a file
		with the apps to be installed from the Univention App Center.
		The license in this example is the default <emphasis>free for personal use license</emphasis>.
		More information about requesting a proper license can be found in <xref linkend="appliance:license"/>.
	  </para>		

	  <para>
		Two example hook scripts are generated which are called after setup is finished:
		One calls <command>wget</command> for a given URL, which could be used to signal an external service that the
		provisioning of	the instance is done. The other is an example <command>udm</command>
		call to register an OpenStack connection in UVMM.

		<programlisting>
#cloud-config
#
ucs_setup:
  hostname: myucsmaster
  domainname: ucs.local
  windowsdomain: UCS
  ldap_base: dc=ucs,dc=local
  rootpassword: univention
  defaultlocale: de_DE.UTF-8:UTF-8
  components: 
  packages_install: univention-virtual-machine-manager-daemon
  packages_remove: 
write_files:
-   content: |
      dn: cn=admin,cn=license,cn=univention,dc=ucs,dc=local
      objectClass: top
      objectClass: univentionLicense
      objectClass: univentionObject
      univentionObjectType: settings/license
      univentionLicenseEndDate: unlimited
      univentionLicenseModule: admin
      cn: admin
      univentionLicenseBaseDN: Free for personal use edition
      univentionLicenseUsers: 50
      univentionLicenseServers: unlimited
      univentionLicenseManagedClients: 50
      univentionLicenseCorporateClients: unlimited
      univentionLicenseVirtualDesktopUsers: unlimited
      univentionLicenseVirtualDesktopClients: unlimited
      univentionLicenseSupport: 0
      univentionLicensePremiumSupport: 0
      univentionLicenseVersion: 2
      univentionLicenseType: UCS
      univentionLicenseSignature: FPkmAy7icL0N/2w15fREr/l4rD9r6xaLi3C7dLRVQbDX5zdcQ+
       0BSPfHFT8pdAaMpZqXkp13rQK4N2PzHHPy0HwyyaeMTckxJyaIQd/B/M4t+vbIxnz+2YNoDVqskws
       me/V8qxgoMsMFT47LUDp7serXZoCETutwcwwqrycy0RdahezzyAA93e3bBaH1y5zK1b4ElAWW933d
       fctWTR+/LdQglhKbRlHBN8fbcHLmXBtu7yMV3J7AGl+wTo4+KzASUWdTmrfUY5dcU77spyCMJEGL6
       ZxsFs8FhDrYajyAn2s0rAcxJK9JKFFjBuuiF+8MB2dyypkJilSiTRQDhEYorQ==
    owner: root:root
    path: /var/cache/univention-system-setup/license
    permissions: '0400'
-   content: |
      simplesamlphp
      adconnector
    owner: root:root
    path: /var/cache/univention-system-setup/installapps
    permissions: '0400'
-   content: |
      #!/bin/sh
      wget http://myURL/page?myparam=myValue
    owner: root:root
    path: /usr/lib/univention-system-setup/appliance-hooks.d/90_wget_url
    permissions: '0755'
-   content: |
      #!/bin/sh
      udm uvmm/cloudconnection create --ignore_exists \
      --position="cn=CloudConnection,cn=Virtual Machine Manager,dc=ucs,dc=local" \
      --set name="OpenStack" \
      --set type="cn=OpenStack,cn=CloudType,cn=Virtual Machine Manager,dc=ucs,dc=local" \
      --set includeUCSimages=0 \
      --append parameter="username demouser" \
      --append parameter="password password" \
      --append parameter="cloudtype OpenStack" \
      --append parameter="auth_url http://192.168.0.1:5000" \
      --append parameter="auth_version 2.0_password" \
      --append parameter="service_type compute" \
      --append parameter="service_name nova" \
      --append parameter="tenant demotenant" \
      --append parameter="service_region regionOne"
      invoke-rc.d univention-virtual-machine-manager-daemon restart
    owner: root:root
    path: /usr/lib/univention-system-setup/appliance-hooks.d/80_add_uvmm_connection
    permissions: '0755'
		</programlisting>
	  </para>

	  <para>
		The file with the apps to be installed contains a list of IDs of applications from the
		Univention App Center, see <xref linkend="appliance:installbase"/>. The list in the example
		above installs the Univention AD Connector and the SAML	integration on the provided &ucsMaster;
	  </para>
	</section>

	<section id="appliance:license">
	  <title>License management in cloud instances</title>	
	  <para>
		In the default installation, a UCS installation has a so-called <emphasis>free for personal
		use license</emphasis> (up to fifty users). A license from Univention is required for the
		productive use of a UCS installation. For standard installations it is sent to the user by
		e-mail and then set up in the &ucsUMC;.
	  </para>

	  <para>
		Cloud service providers have the possibility of retrieving UCS licenses via an API, i.e., if
		a new instance is to be created for a customer, the license can be retrieved via the API and
		then installed in the provided instance directly.
	  </para>

	  <para>
		Access to the license server requires a user name and a password. These can be requested
		from Univention at sales@univention.de. In this document,
		<uri>https://license.univention.de/shop/example/</uri> is used as an example URL for the
		license server.
	  </para>

	  <section id="appliance:license:api">
		<title>API for retrieving UCS licenses</title>
		<para>
		  The licenses are retrieved via HTTPS from the Univention license server
		  <uri>license.univention.de</uri>. The retrieval can be performed completely with
		  <command>wget</command>.
		</para>

		<para>
		  Firstly, a session with the license server must be opened, in this case with the user name
		  <systemitem class="username">univention</systemitem> and the password <literal>secret</literal> as an
		  example. It is also possible to request more than one license in one session.

		  <programlisting language="sh">
wget --keep-session-cookies --save-cookies cookie.db --load-cookies \ 
 cookie.db --post-data='username=univention&amp;password=secret' \
 https://license.univention.de/shop/example/
		  </programlisting>
		</para>

		<para>
			A license can also be ordered with a POST request via <command>wget</command>. Please note that special
		  characters such as blank spaces must be escaped in URL-encoded syntax, see
		  <uri>http://en.wikipedia.org/wiki/Percent-encoding</uri> for details.

		  <programlisting language="sh">
wget --keep-session-cookies --save-cookies cookie.db --load-cookies cookie.db \
--post-data='kundeEmail=customer@example&amp;'\
'kundeUnternehmen=New%20Customern&amp;'\
'EndDate=27.11.2015&amp;'\
'BaseDN=dc%3Ddrei%2Cdc%3Dzwei%2Cdc%3Dtest&amp;'\
'Servers=0&amp;'\
'Support=0&amp;'\
'PremiumSupport=0&amp;'\
'Users=100&amp;'\
'ManagedClients=0&amp;'\
'CorporateClients=0&amp;'\
'VirtualDesktopUsers=0&amp;'\
'VirtualDesktopClients=0&amp;'\
'Type=UCS' \
https://license.univention.de/shop/example/order
		  </programlisting>
		</para>

		<para>
		  If the order is successful, the return code 202 is returned. The HTML data includes the tag
		  <varname>orderid</varname>, which identifies the order number of a successful order:

		  <programlisting>
...
&lt;span id="orderid"&gt;21&lt;/span&gt;
...
		  </programlisting>
		</para>

		<para>
		  If the order fails, a return code <errorcode>4xx</errorcode> is returned and the <varname>details</varname> tag
		  includes additional information, e.g.:

		  <programlisting>
...
&lt;span id="details"&gt;Not a valid date: u'27.11.201'&lt;/span&gt;
...
		  </programlisting>
		</para>

		<para>
		  Should it not be possible to process an order due to a server error, 5xx is output as the
		  return code. The order can then be repeated at a later point in time.
		</para>

		<para>
		  Following ordering of a license, it takes a few seconds before the license is
		  generated. It can then be retrieved in LDIF format using the order number. If the request
		  above returns e.g. the order number 465, the file name is thus <filename>465.ldif</filename>.
		  The request specified below waits for the availability of the license for up to sixty seconds:

		  <programlisting language="sh">
wget --keep-session-cookies --save-cookies cookie.db --load-cookies cookie.db \
https://license.univention.de/shop/example/orders/465.ldif 
		  </programlisting>

		</para>

	  </section>
	</section>
  </section>

</chapter>

<!-- <bibliography id="bibliography"> -->
<!--   <bibliomixed id="ucs-handbuch"/> -->
<!--   <bibliomixed id="locales"/> -->
<!-- </bibliography> -->

<?dbhtml-include href="../stylesheets/piwik.html"?>
</book>
