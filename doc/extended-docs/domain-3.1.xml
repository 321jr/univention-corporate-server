<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
          "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [

  <!ENTITY % entities SYSTEM "../stylesheets/macros-en.ent" >
  <!ENTITY bibliography SYSTEM "../stylesheets/bibliography-en.xml">

  %entities;
]>
<book lang="en" id="domain-3.1">
    <bookinfo>
      <title>Univention Corporate Server</title>
      <subtitle>Extended domain services documentation</subtitle>

        <revhistory>
            <revision>
                <revnumber>3.1-1</revnumber>
                <date>27 May 2013</date>
            </revision>
        </revhistory>
    </bookinfo>

    <chapter id="ext-dom-ubuntu">
        <title>Integration of Ubuntu clients into a UCS domain</title>
        <para>
		  Univention Corporate Server allows the integration of Ubuntu clients. Initially a
		  standard Ubuntu installation needs to be performed. The following section describe the
		  configuration changes, which need to be made to integrate the Ubuntu client into the UCS
		  domain. After successful integration users can authenticate on the Ubuntu clients with
		  their standard UCS domain password and user name.
		</para>

        <para>
		  This configuration has been tested with Ubuntu 12.04 LTS and 12.10 as well as Kubuntu
		  12.04 LTS and 12.10.
		</para>

        <section>
            <title>Integration into the LDAP directory and the SSL certificate authority</title>
            <para>
			  After Ubuntu has been installed, some of it's configuration files need to be
			  modified. To simplify the setup, the default configuration of the UCS master domain
			  controller should be copied to the Ubuntu system, for example:
			</para>
			<programlisting language="sh">
# Become root
sudo bash

# Set the IP address of the UCS DC Master, 192.168.0.3 in this example
export MASTER_IP=192.168.0.3

mkdir /etc/univention
ssh root@${MASTER_IP} ucr shell |
    grep -v ^hostname= >/etc/univention/ucr_master
echo "master_ip=${MASTER_IP}" >>/etc/univention/ucr_master
. /etc/univention/ucr_master

echo "${MASTER_IP} ${ldap_master}" >>/etc/hosts

# Exit sudo bash
exit
</programlisting>

            <para>
			  In the default configuration of UCS only authenticated users can search in the LDAP
			  directory. As such, the Ubuntu client needs an account in the UCS domain
			  to gain read access to the LDAP directory:
			</para>
            <programlisting language="sh"><![CDATA[
# Become root
sudo bash

# Set some environment variables
. /etc/univention/ucr_master

# Download the SSL certificate
mkdir -p /etc/univention/ssl/ucsCA/
wget -O /etc/univention/ssl/ucsCA/CAcert.pem \
    http://${ldap_master}/ucs-root-ca.crt

# Create an account and save the password
password="$(tr -dc A-Za-z0-9_ </dev/urandom | head -c8)"
if [ "$version_version" = 3.0 ] && [ "$version_patchlevel" -lt 2 ]
then
    ssh root@${ldap_master} udm computers/managedclient create \
        --position "cn=computers,${ldap_base}" \
        --set name=$(hostname) --set password="${password}"
else
    ssh root@${ldap_master} udm computers/ubuntu create \
        --position "cn=computers,${ldap_base}" \
        --set name=$(hostname) --set password="${password}" \
        --set operatingSystem="$(lsb_release -is)" \
        --set operatingSystemVersion="$(lsb_release -rs)"
fi
echo "${password}" > /etc/ldap.secret

# Create ldap.conf
cat >/etc/ldap/ldap.conf <<__EOF__
TLS_CACERT /etc/univention/ssl/ucsCA/CAcert.pem
URI ldap://$ldap_master:7389
BASE $ldap_base
__EOF__

# Exit sudo bash
exit
]]></programlisting>
		</section>

        <section>
            <title>Configuration of the System Security Services Daemon (SSSD)</title>
            <para>
			  SSSD provides a set of daemons to manage access to remote directories and
			  authentication mechanisms.
            </para>
            <programlisting language="sh"><![CDATA[
# Become root
sudo bash

# Set some environment variables
. /etc/univention/ucr_master

# Install SSSD based configuration
DEBIAN_FRONTEND=noninteractive apt-get -y install sssd

# Create sssd.conf
cat >/etc/sssd/sssd.conf <<__EOF__
[sssd]
config_file_version = 2
reconnection_retries = 3
sbus_timeout = 30
services = nss, pam, sudo
domains = $kerberos_realm

[nss]
reconnection_retries = 3

[pam]
reconnection_retries = 3

[domain/$kerberos_realm]
auth_provider = krb5
krb5_kdcip = ${master_ip}
krb5_realm = ${kerberos_realm}
krb5_server = ${ldap_master}
krb5_kpasswd = ${ldap_master}
id_provider = ldap
ldap_uri = ldap://${ldap_master}:7389
ldap_search_base = ${ldap_base}
ldap_tls_reqcert = never
ldap_tls_cacert = /etc/univention/ssl/ucsCA/CAcert.pem
cache_credentials = true
enumerate = true
ldap_default_bind_dn = cn=$(hostname),cn=computers,${ldap_base}
ldap_default_authtok_type = password
ldap_default_authtok = $(cat /etc/ldap.secret)
__EOF__
chmod 600 /etc/sssd/sssd.conf

# Install auth-client-config
DEBIAN_FRONTEND=noninteractive apt-get -y install auth-client-config

# Create an auth config profile for sssd
cat >/etc/auth-client-config/profile.d/sss <<__EOF__
[sss]
nss_passwd=   passwd:   compat sss
nss_group=    group:    compat sss
nss_shadow=   shadow:   compat
nss_netgroup= netgroup: nis

pam_auth=
	auth [success=3 default=ignore] pam_unix.so nullok_secure \
		try_first_pass
	auth requisite pam_succeed_if.so uid >= 500 quiet
	auth [success=1 default=ignore] pam_sss.so use_first_pass
	auth requisite pam_deny.so
	auth required pam_permit.so

pam_account=
	account required pam_unix.so
	account sufficient pam_localuser.so
	account sufficient pam_succeed_if.so uid < 500 quiet
	account [default=bad success=ok user_unknown=ignore] pam_sss.so
	account required pam_permit.so

pam_password=
	password sufficient pam_unix.so obscure sha512
	password sufficient pam_sss.so use_authtok
	password required pam_deny.so

pam_session=
	session required pam_mkhomedir.so skel=/etc/skel/ umask=0077
	session optional pam_keyinit.so revoke
	session required pam_limits.so
	session [success=1 default=ignore] pam_sss.so
	session required pam_unix.so
__EOF__
auth-client-config -n -a -p sss

# Start sssd
service sssd start

# Exit sudo bash
exit
]]></programlisting>

			<para>
			  The commands <command>getent passwd</command> and <command>getent group</command>
			  should now also display all users and groups of the UCS domain.
			</para>
		</section>

        <section>
            <title>Configuring user logins</title>
            <para>
			  The home directory of a user should be created automatically during login:
            </para>
            <programlisting language="sh"><![CDATA[
# Become root
sudo bash

cat >/usr/share/pam-configs/ucs_mkhomedir <<__EOF__
Name: activate mkhomedir
Default: yes
Priority: 900
Session-Type: Additional
Session:
    required    pam_mkhomedir.so umask=0022 skel=/etc/skel
__EOF__

DEBIAN_FRONTEND=noninteractive pam-auth-update

exit
]]></programlisting>

            <para>
			  During login users should also be added to some system groups:
            </para>
            <programlisting language="sh"><![CDATA[
# Become root
sudo bash

echo '*;*;*;Al0000-2400;audio,cdrom,dialout,floppy,plugdev,adm' \
   >>/etc/security/group.conf

cat >>/usr/share/pam-configs/local_groups <<__EOF__
Name: activate /etc/security/group.conf
Default: yes
Priority: 900
Auth-Type: Primary
Auth:
    required    pam_group.so use_first_pass
__EOF__

DEBIAN_FRONTEND=noninteractive pam-auth-update

exit
]]></programlisting>

            <para>
			  By default the Ubuntu login manager only displays a list of local users during
			  login. After adding the following lines an arbitrary user name can be used:
            </para>
            <programlisting language="sh"><![CDATA[
# Become root
sudo bash

# Add a field for a user name
echo "greeter-show-manual-login=true" >>/etc/lightdm/lightdm.conf

# Optional: Disable the user selection at the login screen
echo "greeter-hide-users=true" >>/etc/lightdm/lightdm.conf

exit
]]></programlisting>

            <para>
			  Kubuntu 12.10 uses AccountService, a D-Bus interface for use account management, which
			  ignores the <filename>/etc/lightdm.conf</filename> file.  Since there is no config
			  file for AccountService the login theme needs to be changed to
			  <emphasis>classic</emphasis> under <guimenu>System Settings -> Login Screen (LightDM)</guimenu>.
			</para>

            <para>
			  With these settings the login for domain members should be possible after a restart of
			  LightDM or a reboot.
			</para>
		</section>

        <section>
            <title>Kerberos integration</title>
            <para>
			  Every UCS domain provides a Kerberos domain. Since Kerberos relies on DNS, the
			  Ubuntu client should use a UCS domain controller as its DNS server. The following
			  steps provide an example configuration for Kerberos:
            </para>
            <programlisting language="sh"><![CDATA[
# Become root
sudo bash

# Set some environment variables
. /etc/univention/ucr_master

# Install required packages
DEBIAN_FRONTEND=noninteractive apt-get install -y heimdal-clients

# Default krb5.conf
cat >/etc/krb5.conf <<__EOF__
[libdefaults]
    default_realm = $kerberos_realm
    kdc_timesync = 1
    ccache_type = 4
    forwardable = true
    proxiable = true

[realms]
$kerberos_realm = {
   kdc = $master_ip $ldap_master
   admin_server = $master_ip $ldap_master
}
__EOF__

# Stop and disable the avahi daemon
service avahi-daemon stop
sed -i 's|start on (|start on (never and |' /etc/init/avahi-daemon.conf

# Synchronize the time with the UCS system
ntpdate $ldap_master

# Test Kerberos
kinit Administrator

# Requires domain password
krsh Administrator@$ldap_master ls /etc/univention

# Destroy the kerberos ticket
kdestroy

exit
]]></programlisting>
		</section>

        <section>
            <title>Limitations of the Ubuntu domain integration</title>
            <para>
			  It is currently not possible to change the user password at the LightDM login
			  manager. Instead, the password can be changed via the <command>kpasswd</command>
			  command after login or via the UMC module <guimenu>Change password</guimenu>.
			</para>
		</section>

        <section>
            <title>Additional references</title>
			  <itemizedlist>
				<listitem><para><ulink url="https://help.ubuntu.com/community/LDAPClientAuthentication"/></para></listitem>
				<listitem><para><ulink url="https://help.ubuntu.com/community/SingleSignOn"/></para></listitem>
				<listitem><para><ulink url="https://help.ubuntu.com/community/PamCcredsHowto"/></para></listitem>
				<listitem><para><ulink url="http://www.opinsys.fi/en/user-management-with-sssd-on-shared-laptops"/></para></listitem>
			  </itemizedlist>
		</section>
	</chapter>

    <chapter>
        <title>Integration of Linux/Unix systems into a UCS domain</title>
        <para>
		  These are general instructions for the integration of Unix/Linux-based non-UCS
		  systems - referred to in the following simply as Unix systems - in the trust context
		  of the UCS domain.
		</para>

        <para>
		  The integration of Ubuntu clients is documented with example step-by-step instructions in
		  <xref linkend="ext-dom-ubuntu"/>.
		</para>

        <para>
		  The integration of Mac OS X clients is documented with example step-by-step instructions
		  in the UCS manual. Mac OS systems use a deviating domain integration based
		  on Samba 4.
		</para>

		<para>
		  Not all integration steps need to be performed. In this way, for example, a Unix system
		  can merely be integrated in the IP management and access the NTP server without integrating
		  the system in the UCS user management (e.g., if it is a database server on which no user
		  login is performed anyway).
		</para>

        <section>
		  <title>Managing the systems in the &uscUMC;</title>
		  <para>
			A <guimenu>Computer: Linux</guimenu> object can be created in the UMC computer
			management. This allows the integration of the Unix system in the DNS/DHCP and network
			administration of the &uscUMC;
		  </para>

		  <para>
			If the Nagios support is enabled under <guimenu>[Options]</guimenu>, Nagios checks can
			also be applied on the system.
		  </para>
		</section>

        <section id="ext-dom-time">
		  <title>Configuration of the name resolution</title>
		  <para>
			The Unix system should use a name server from the UCS domain: All UCS domain controllers
			(i.e., &ucsMaster;, &ucsBackup; and &ucsSlave;) operate a DNS server. One or more of
			these UCS system should be entered in the <filename>/etc/resolv.conf</filename>, e.g.:

<programlisting>
domain  example.com
nameserver  10.200.3.108
nameserver  10.200.3.99
</programlisting>
		  </para>
		</section>

        <section>
		  <title>Configuration of the time server</title>
		  <para>
			All UCS domain controllers (i.e., &ucsMaster;, &ucsBackup; and &ucsSlave;) operate a NTP
			server.
		  </para>

		  <para>
			The configuration differs depending on the NTP software used, but is set under
			<filename>/etc/ntp.conf</filename> on most Linux systems, e.g.:

<programlisting>
server master.example.com
server backup.example.com
</programlisting>
		  </para>
		</section>

		<section>
		  <title>Access to user and group information of the UCS domain</title>
		  <para>
			The <emphasis>Name Service Switch</emphasis> (NSS) is an interface for configuring the
			data sources for users, groups and computers. NSS is present on all Linux versions and
			most Unix systems.
		  </para>

		  <para>
			If the Unix system used provides support for an NSS module for LDAP access - as is the
			case in most Linux distributions - user and group information can be read out of the
			UCS LDAP directory.
		  </para>

		  <para>
			The configuration files of the NSS LDAP module differ depending on the Linux/Unix
			version. 
		  </para>

		  <para>
			As a general rule, the following settings must be set there:

			<itemizedlist>
			  <listitem><simpara>
				The DN of the LDAP base of the UCS domain (saved in the &ucsUCRV;
				<envar>ldap/base</envar> on UCS servers) needs to be configured on the system.
			  </simpara></listitem>

			  <listitem><simpara>
				The LDAP servers to be used. The fully qualified domain names of one or more UCS
				domain controllers should be entered here.
			  </simpara></listitem>

			  <listitem><para>
				In the standard setting, only TLS-secured access is possible on UCS-LDAP
				servers. The accessing Unix system must therefore use the root certificate of the
				UCS-CA. The certificate can be found on the &ucsMaster; in the file
				<filename>/etc/univention/ssl/udsCA/CAcert.pem</filename> and can be copied into any
				directory, e.g., <filename>/etc/ucs-ssl/</filename>. The UCS root certificate must
				then be configured in the LDAP configuration files. If the Unix system uses OpenLDAP
				as the LDAP implementation, it is usually the file
				<filename>/etc/openldap/ldap.conf</filename> or
				<filename>/etc/ldap/ldap.conf</filename>. The line for OpenLDAP is as follows:

<programlisting>
TLS_CACERT /etc/ucs-ssl/CAcert.pem
</programlisting>
			  </para></listitem>
			</itemizedlist>
		  </para>

		  <para>
			If the NSS LDAP service has been set up correctly, the following two commands should
			output all users and groups:

<programlisting>
getent passwd
getent group
</programlisting>
		  </para>
		</section>

		<section>
		  <title>Integrating into Kerberos</title>
		  <para>
			UCS employs the Kerberos implementation Heimdal. For this reason, Heimdal should also be
			used to access the Kerberos realm on the Unix system. Only the Heimdal client libraries
			need to be installed on the Unix system.
		  </para>

		  <para>
			Kerberos requires correct time synchronisation, see <xref linkend="ext-dom-time"/>.
		  </para>

		  <para>
			The configuration is performed in the <filename>/etc/krb5.conf</filename> file on most
			systems. Here is an example configuration:

			<itemizedlist>
			  <listitem><simpara>
				KERBEROSREALM must be replaced by the name of the UCS Kerberos realm (saved in the
				&ucsUCRV; <envar>kerberos/realm</envar>).
			  </simpara></listitem>

			  <listitem><simpara>
				MASTERIP must be replaced by the IP address of the &ucsMaster;.
			  </simpara></listitem>

			  <listitem><simpara>
				MASTERFQDN must be replaced by the fully qualified domain name of the &ucsMaster;.
			  </simpara></listitem>
			</itemizedlist>

<programlisting>
[libdefaults]
    default_realm = KERBEROSREALM
    kdc_timesync = 1
    ccache_type = 4
    forwardable = true
    proxiable = true
 
[realms]
KERBEROSREAKM = {
   kdc = MASTERIP MASTERFQDN
   admin_server = MASTERIP MASTERFQDN
}
</programlisting>

		  </para>

		  <para>
			The Heimdal PAM module then needs to be installed. In general, the installation of the
			module should adapt the PAM configuration automatically.
		  </para>

		  <para>
			Then Kerberos authentication during login should work via PAM  and password
			changes should be possible via <command>kpasswd</command>.
		  </para>
		</section>

		<section>
		  <title>Accessing a UCS print server</title>
		  <para>
			UCS uses the <emphasis>Common Unix Printing System</emphasis> (CUPS) to implement print
			services. The Unix system can use the UCS print servers by installing the CUPS client
			programs. In addition the CUPS server needs to be configured, typically in the
			configuration file <filename>/etc/cups/client.conf</filename>, e.g.:

<programlisting>
ServerName printserver.example.com
</programlisting>
		  </para>
		</section>
	</chapter>

    <chapter>
	  <title>Advanced SSL certificate handling</title>

	  <section>
		<title>Managing additional certificates with univention-certificate</title>
        <para>
		  Every UCS domain has its own SSL certificate authority. The SSL certificates are created
		  automatically for all UCS systems during the installation (&ucsMaster;) or during the domain join
		  (all other system roles).
		</para>

        <para>
		  The command <command>univention-certificate</command> can be used to manage these
		  certificates, e.g., if it proves necessary to create a certificate for the integration of
		  an external system.
		</para>

        <section>
            <title>Storage of the certificates</title>
			<para>
			  The certificates are stored in the <filename>/etc/univention/ssl</filename> directory
			  on the &ucsMaster; and synchronised on all &ucsBackup; systems. A subdirectory with
			  the name of the certificate is kept in the <filename>/etc/univention/ssl/</filename>
			  directory for every certificate, which contains the following files:

			  <itemizedlist>
				<listitem> <para>
				  The <filename>cert.pem</filename> file represents the actual certificate. 
				</para> </listitem>

				<listitem><para>
				  <filename>openssl.cnf</filename> contains the OpenSSL configuration at the time
				  the certificate was created. 
				</para></listitem>

				<listitem><para>
				  The <filename>private.key</filename> file contains the private key for the
				  certificate. 
				</para></listitem>

				<listitem><para>
				  <filename>req.pem</filename> documents the original client request with which the
				  certificate was created.
				</para></listitem>
			  </itemizedlist>
			</para>
		</section>

        <section>
            <title>Displaying the certificates</title>
			<para>
			  The following command is used to display a list of all the available, valid certificates:

<programlisting language="sh"><![CDATA[
univention-certificate list
]]></programlisting>
			</para>

			<para>
			  An individual SSL certificate can be displayed with the following command:

<programlisting language="sh"><![CDATA[
univention-certificate dump -name fullyqualifiedhostname 
]]></programlisting>
			</para>
		</section>

        <section>
            <title>Checking the validity of a certificate</title>
			<para>
			  This command checks whether a certificate is valid or invalid:

<programlisting language="sh"><![CDATA[
univention-certificate check -name fullyqualifiedhostname
]]></programlisting>
			</para>

			<para>
			  A certificate may be invalid because it has either been revoked or has expired.
			</para>
		</section>

        <section>
            <title>Revoking a certificate</title>
			<para>
			  The command
<programlisting language="sh"><![CDATA[
univention-certificate revoke -name fullyqualifiedhostname 
]]></programlisting>
			  is used to revoke a certificate. It is then no longer valid, but remains stored in the
			  file system. Certificates which are created and removed automatically during the
			  management of UMC computer objects do not need to be revoked manually.
			</para>
		</section>

        <section>
            <title>Creating a certificate</title>
			<para>
			  The command
<programlisting language="sh"><![CDATA[
univention-certificate new -name fullyqualifiedhostname
]]></programlisting>
			  can be used to create a new certificate. The fully qualified domain name of the
			  computer should be given as the name. In the default setting the certificate is valid
			  for five years. The standard value can be changed by setting the &ucsUCRV;
			  <envar>ssl/default/days</envar>.
			</para>
		</section>
	  </section>

<!-- 	  <section> -->
<!-- 		<title>Signieren von Certificate Signing Requests durch die UCS Certificate Authority</title> -->
<!--         <para> -->
<!-- 		  Ein Certificate signing request (CSR) ist eine Anfrage an eine Certificate Authority (CA), -->
<!-- 		  in der eine digitale Signatur angefordert wird. Ein CSR erfolgt typischerweise in Form -->
<!-- 		  einer Datei. Dieser Abschnitt beschreibt wie ein CSR von der UCS CA signiert werden kann. -->
<!-- 		</para> -->

<!--         <para> -->
<!-- 		  CERTIFICATE ist der Dateiname des zu erstellenden Zertifikats. -->
<!-- 		</para> -->

<!--         <para> -->
<!-- 		  REQUEST ist die Datei mit dem CSR im PEM-Format (Eine Datei im PEM-Format ist eine -->
<!-- 		  Textdatei, die einen Base64-codierten Block enthält, der von BEGIN CERTIFICATE und END -->
<!-- 		  CERTIFICATE umgefasst wird). -->
<!-- 		</para> -->

<!--         <para> -->
<!-- 		  Wenn die Anfrage im DER-Format vorliegt, kann sie mit dem folgenden Befehl umgewandelt -->
<!-- 		  werden: -->

<!-- <programlisting> -->
<!-- openssl x509 -inform der -outform pem -in request.der -out req.pem -->
<!-- </programlisting> -->
<!-- 		</para> -->

<!--         <para> -->
<!-- 		  Der folgende Befehl signiert dann den CSR: -->

<!-- <programlisting> -->
<!-- openssl ca -batch -config /etc/univention/ssl/openssl.cnf    \ -->
<!-- -in REQUEST -out CERTIFICATE                              \   -->
<!-- -passin pass:"$(cat /etc/univention/ssl/password)" -->
<!-- </programlisting> -->
<!-- 		</para> -->
<!-- 	  </section> -->
	</chapter>


    <?dbhtml-include href="../stylesheets/piwiki.html"?>
</book>
