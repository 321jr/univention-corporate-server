--- a/debian/univention-kolab2-webclient/usr/share/horde3/lib/Net/Sieve.php	2010-07-13 09:56:39.000000000 +0200
+++ b/debian/univention-kolab2-webclient/usr/share/horde3/lib/Net/Sieve.php	2010-07-13 10:00:37.000000000 +0200
@@ -176,14 +176,10 @@
         * we disable the authentication methods that depend upon it.
         */
         if ((@include_once 'Auth/SASL.php') === false) {
-            if($this->_debug){
-                echo "AUTH_SASL NOT PRESENT!\n";
-            }
-            foreach($this->supportedSASLAuthMethods as $SASLMethod){
-                $pos = array_search( $SASLMethod, $this->supportedAuthMethods );
-                if($this->_debug){
-                    echo "DISABLING METHOD $SASLMethod\n";
-                }
+            $this->_debug('Auth_SASL not present');
+            foreach ($this->supportedSASLAuthMethods as $SASLMethod) {
+                $pos = array_search($SASLMethod, $this->supportedAuthMethods);
+                $this->_debug('Disabling method ' . $SASLMethod);
                 unset($this->supportedAuthMethods[$pos]);
             }
         }
@@ -826,9 +822,6 @@
             return new PEAR_Error( 'Failed to write to socket: ' . $error->getMessage() );
         }
 
-        if( $this->_debug ){
-            // C: means this data was sent by  the client (this class)
-            echo "C:$cmd\n";
-        }
+        $this->_debug("C: $cmd");
         return true;
     }
@@ -852,9 +846,6 @@
             return new PEAR_Error( 'Failed to write to socket: ' . $lastline->getMessage() );
         }
         $lastline=rtrim($lastline);
-        if($this->_debug){
-            // S: means this data was sent by  the IMAP Server
-            echo "S:$lastline\n" ;
-        }
+        $this->_debug("S: $lastline");
 
         if( $lastline === '' ) {
@@ -896,9 +888,7 @@
                         // Check for string literal error message
                         if (preg_match('/^no {([0-9]+)\+?}/i', $line, $matches)) {
                             $line .= str_replace("\r\n", ' ', $this->_sock->read($matches[1] + 2 ));
-                            if($this->_debug){
-                                echo "S:$line\n";
-                            }
+                            $this->_debug("S: $line");
                         }
                         $msg=trim($response . substr($line, 2));
                         $code=3;
@@ -940,9 +930,7 @@
                             $line .= $this->_sock->read($str_size - $line_length);
                             $line_length = $this->_getLineLength($line);
                         }
-                        if($this->_debug){
-                            echo "S:$line\n";
-                        }
+                        $this->_debug("S: $line");
                         if($this->_state != NET_SIEVE_STATE_AUTHORISATION) {
                             // receive the pending OK only if we aren't authenticating
                             // since string responses during authentication don't need an
@@ -961,14 +961,17 @@
     }
 
     /**
-    * Sets the debug state
-    *
-    * @param boolean $debug
-    * @return void
-    */
-    function setDebug($debug = true)
+     * Sets the debug state and handler function.
+     *
+     * @param boolean $debug   Whether to enable debugging.
+     * @param string  $handler A custom debug handler. Must be a valid callback.
+     *
+     * @return void
+     */
+    function setDebug($debug = true, $handler = null)
     {
         $this->_debug = $debug;
+        $this->_debug_handler = $handler;
     }
 
     /**
@@ -1125,9 +1113,7 @@
             return $this->_raiseError($msg,$code);
         }
 
-        if($this->_debug === true) {
-            echo "STARTTLS Negotiation Successful\n";
-        }
+        $this->_debug("STARTTLS Negotiation Successful");
 
         // RFC says we need to query the server capabilities again
         if(PEAR::isError($res = $this->_cmdCapability() )) {
@@ -1145,5 +1131,22 @@
           return strlen($string);
         }
     }
+    /**
+     * Write debug text to the current debug output handler.
+     *
+     * @param string $message Debug message text.
+     *
+     * @return void
+     */
+    function _debug($message)
+    {
+        if ($this->_debug) {
+            if ($this->_debug_handler) {
+                call_user_func_array($this->_debug_handler, array(&$this, $message));
+            } else {
+                echo "$message\n";
+            }
+        }
+    }
 }
 ?>
