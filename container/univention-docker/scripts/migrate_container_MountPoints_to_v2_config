#!/usr/bin/python2.7
from univention.config_registry import ConfigRegistry
from collections import OrderedDict
from optparse import OptionParser, SUPPRESS_HELP, Values
from logging import getLogger, basicConfig, DEBUG, INFO, WARNING, ERROR
import sys
import json
import os
import re

def main():
	global options
	options = parse_args()
	setup_logging()
	log = getLogger(__name__)

	global ucr
	ucr = ConfigRegistry()
	ucr.load()

	migrate_all_app_containers()


def migrate_all_app_containers():
	log = getLogger(__name__).getChild('migrate_all_app_containers')
	p = re.compile('^appcenter/apps/(.*)/container$')

	for ucr_key, container_id in ucr.items():
		m = p.match(ucr_key)
		if not m:
			continue
		app_name = m.group(1)
		log.info('Migrating app container %s (%s)' % (container_id, app_name))
		migrate_app_container(container_id)


def migrate_app_container(container_id):
	log = getLogger(__name__).getChild('migrate_app_container')
	container_path = '/var/lib/docker/containers/%s' % container_id

	old_cfg = os.path.join(container_path, 'config.json')
	if not os.path.exists(old_cfg):
		log.warn('Ignoring %s (no config.json found)' % (container_id,))
		return

	with open(old_cfg, 'r') as f:
	    old_data = json.load(f, object_pairs_hook=OrderedDict)

	new_cfg = os.path.join(container_path, 'config.v2.json')
	with open(new_cfg, 'r') as f:
	    new_data = json.load(f, object_pairs_hook=OrderedDict)

	for src, dst in old_data["Volumes"].items():
		rw = old_data["VolumesRW"][src]
		new_data["MountPoints"][src] = OrderedDict([
			("Source", src),
			("Destination", dst),
			("RW", rw),
			("Name", ""),
			("Driver", ""),
			("Relabel", ""),
			("Propagation", "rprivate"),
			("Named", False),
			("ID", "")
		])
	
	if options.dry_run:
		return

	with open(new_cfg, 'w') as f:
		json.dump(new_data, f, separators=(',', ':'))
		f.write('\n')


def parse_args():
	usage = '%prog [options]'
	description = sys.modules[__name__].__doc__
	parser = OptionParser(usage=usage, description=description)
	parser.add_option(
		'--verbose', '-v',
		action='count', default=2,
		help='Increase verboseness')
	parser.add_option(
		'--dry-run',
		action='store_true',
		help='Simulation mode')
	parser.add_option(
		'--run-tests',
		action='store_true',
		help=SUPPRESS_HELP)

	options, args = parser.parse_args()
	if args:
		parser.error('No argument expected')

	return options


def setup_logging():
	FORMAT = '%(asctime)-15s %(levelname)-7s %(message)s'
	LEVELS = [ERROR, WARNING, INFO, DEBUG]
	try:
		level = LEVELS[options.verbose]
	except IndexError:
		level = LEVELS[-1]
	basicConfig(format=FORMAT, level=level, stream=sys.stderr)


def run_tests():
	import doctest
	doctest.testmod()


if __name__ == '__main__':
	main()
