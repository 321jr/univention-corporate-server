@!@
import json
import socket
import fcntl
import struct
import urllib2
from univention.config_registry.interfaces import Interfaces


tracebacks = []

def query_ec2(key):
	url = 'http://169.254.169.254/latest/meta-data/' + key
	try:
		result = urllib2.urlopen(url, timeout=2)
		value = result.read().strip()
		return value
	except (urllib2.URLError, socket.error, socket.timeout) as ex:
		tracebacks.append('%s %s' % (url, ex))
		return None


def get_ip_address(ifname):
	SIOCGIFADDR = 0x8915
	try:
		sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
		try:
			addr = socket.inet_ntoa(
				fcntl.ioctl(
					sock.fileno(),
					SIOCGIFADDR,
					struct.pack('256s', ifname[:15])
				)[20:24]
			)
		finally:
			sock.close()
	except IOError as ex:
		tracebacks.append('%s %s %d' % (ifname, ex, ex.errno))
		addr = None
	return addr


def get_ec2_address():
	# EC2 meta data
	if configRegistry.is_true('server/amazon'):
		for key in ('public-hostname', 'public-ipv4', 'local-ipv4'):
			addr = query_ec2(key)
			if addr:
				return addr

	# UCR
	DHCP = {'dhcp', 'dynamic'}
	interfaces = Interfaces(configRegistry)
	for ifname, iface in interfaces.all_interfaces:
		# IPv4
		if iface.type in DHCP:
			addr = get_ip_address(ifname)
			if addr:
				return '%s' % (addr,)
		else:
			addr = iface.ipv4_address()
			if addr:
				return '%s' % (addr.ip,)
		# IPv6
		addr = iface.ipv6_address()
		if addr:
			return '[%s]' % (addr.ip,)

	# runtime data
	for ifname, iface in interfaces.all_interfaces:
		addr = get_ip_address(ifname)
		if addr:
			return '%s' % (addr,)

	# fallback
	return socket.getfqdn()

def has_ffpu_edition():
	return configRegistry.get('license/base') == 'Free for personal use edition'

def has_core_edition():
	return configRegistry.get('license/base') == 'UCS Core Edition'

def has_free_license():
	return has_core_edition() or has_ffpu_edition()

def get_ucs_version():
	try:
		return '{version/version}-{version/patchlevel} errata{version/erratalevel} ({version/releasename})'.format(**configRegistry)
	except KeyError as err:
		pass

def get_fqdn():
	return '{hostname}.{domainname}'.format(**configRegistry)

def has_system_uuid():
	fake_uuid = '00000000-0000-0000-0000-000000000000'
	return configRegistry.get('uuid/system', fake_uuid) != fake_uuid

def is_piwik_disabled():
	piwik_ucr_is_set = configRegistry.is_true('umc/web/piwik') or configRegistry.is_false('umc/web/piwik')
	piwik_allowed = has_system_uuid() and configRegistry.is_true('umc/web/piwik') or (not piwik_ucr_is_set and has_free_license())
	return not piwik_allowed


data = dict(
	serveraddress=get_ec2_address(),
	has_core_edition=has_core_edition(),
	has_ffpu_edition=has_ffpu_edition(),
	has_free_license=has_free_license(),
	has_license_base=bool(configRegistry.get('license/base')),
	hasFreeLicense=has_free_license(),
	has_system_uuid=has_system_uuid(),
	piwikDisabled=is_piwik_disabled(),
	piwik_disabled=is_piwik_disabled(),
	ucsVersion=get_ucs_version(),
	ucs_version=get_ucs_version(),
	tracebacks=tracebacks,
	fqdn=get_fqdn(),
)


def get_ucr_entry(ucrKey, key=None, defaultValue=None):
	if key is None:
		key = ucrKey
	return (key, configRegistry.get(ucrKey, defaultValue))

# list of all UCR variables + mappings
ucr_vars = [
	('domainname', ),
	('hostname', ),
	('ldap/master', 'ldap_master', ),
	('server/role', ),
	('server/role', 'server_role', ),
	('ssl/validity/host', ),
	('ssl/validity/root', ),
	('ssl/validity/warning', ),
	('system/setup/showloginmessage', ),
	('umc/http/session/timeout', ),
	('umc/web/appliance/name', 'appliance_name', ),
	('umc/web/favorites/default', ),
	('umc/web/feedback/description', ),
	('umc/web/feedback/description', 'feedbackSubject', '[UMC-Feedback] Traceback', ),
	('umc/web/feedback/mail', ),
	('umc/web/feedback/mail', 'feedbackAddress', 'feedback@univention.de', ),
	('umc/web/piwik', ),
	('umc/web/sso/newwindow', ),
	('umc/web/sso/newwindow', 'umcWebSsoNewwindow', ),
	('umc/web/startupdialog', ),
	('update/available', ),
	('update/reboot/required', ),
	('version/erratalevel', ),
	('version/patchlevel', ),
	('version/releasename', ),
	('version/version', ),
]

data.update([get_ucr_entry(*i) for i in ucr_vars])

print json.dumps(data, indent=2)
@!@
