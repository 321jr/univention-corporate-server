#!/usr/bin/python2.4 -OO
#
# Univention Admin Modules
#  synchronise attributes uniqueMember and memberUID of group objects
#
# Copyright (C) 2007 Univention GmbH
#
# http://www.univention.de/
# 
# All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# Binary versions of this file provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


import ldap, string
from optparse import OptionParser

import univention_baseconfig

baseConfig = univention_baseconfig.baseConfig()
baseConfig.load()

parser = OptionParser( usage = "usage: %prog [options]" )
parser.add_option( '-t', '--test', action = 'store_true',
		dest = 'test', default = False, help = 'just test the modification' )

( options, arguments ) = parser.parse_args()

baseDN = baseConfig[ 'ldap/base' ]

lo=ldap.open( 'localhost', 389 )
bindpw=open( '/etc/ldap.secret' ).read()
if bindpw[ -1 ] == '\n':
	bindpw = bindpw[ 0 : -1 ]
lo.simple_bind_s( "cn=admin," + baseDN, bindpw )

groups = lo.search_s( baseDN, ldap.SCOPE_SUBTREE, '(&(objectClass=posixGroup)(objectClass=univentionGroup))',
		( 'uniqueMember', 'memberUid' ) )

for grp in groups:
	dn, attrs = grp
	old = []
	if attrs.has_key( 'memberUid' ):
		old = attrs[ 'memberUid' ]
	new = map( lambda x: x[ x.find( '=' ) + 1 : x.find( ',' ) ], attrs.get( 'uniqueMember', [] ) )
	if old != new:
		print 'Group:',dn
		print '  members:', attrs.get( 'uniqueMember', [] )
		print '  old memberUid:', old
		print '  new memberUid:', new
		if options.test:
			continue
		add = []
		for n in new:
			if not n in old:
				add.append( n )
		if add:
			lo.modify_s( dn, [ ( ldap.MOD_ADD, 'memberUid', add ) ] )
		remove = []
		for o in old:
			if not o in new:
				remove.append( o )
		if remove:
			lo.modify_s( dn, [ ( ldap.MOD_DELETE, 'memberUid', remove ) ] )


