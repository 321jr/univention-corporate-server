#! /bin/sh
# Warning: This file is auto-generated and might be overwritten by 
#          univention-baseconfig.
#          Please edit the following file instead:
# Warnung: Diese Datei wurde automatisch generiert und kann durch 
#          univention-baseconfig Ã¼berschrieben werden. 
#          Bitte bearbeiten Sie an Stelle dessen die folgende Datei:
# 
# 	/etc/univention/templates/files/etc/init.d/slapd
# 
#
# Written by Miquel van Smoorenburg <miquels@drinkel.ow.org>.
# Modified for Debian GNU/Linux by Ian Murdock <imurdock@gnu.ai.mit.edu>.
# Modified for Debian by Christoph Lameter <clameter@debian.org>
# Modified for OpenLDAP by Ben Collins <bcollins@debian.org>

PATH=/bin:/usr/bin:/sbin:/usr/sbin
DAEMON=/usr/sbin/slapd
PORT=389
SLAPDCONF=/etc/ldap/slapd.conf

bdbrecover ()
{
	# determine libdb version that back-bdb.so was linked against
	back_bdb_version="$(/usr/bin/ldd /usr/lib/ldap/back_bdb.so | sed -n 's|.*/usr/lib/libdb-\([0-9.]*\).so.*|\1|p')"
	if [ -e "/usr/bin/db${back_bdb_version}_recover" ]; then
		# if the matching dbX.Y-util package is available
		# check if the slapd backend database version matches
		if "/usr/bin/db${back_bdb_version}_stat" -e -h /var/lib/univention-ldap/ldap 2>&1 | grep -q 'Environment version'; then
			# version seems to match, so try a recover
			cd /var/lib/univention-ldap/ldap
			"/usr/bin/db${back_bdb_version}_recover" -h /var/lib/univention-ldap/ldap
		else
			echo "/var/lib/univention-ldap/ldap BDB Version does not match the one back-bdb uses"
			echo "Skipping db${back_bdb_version}_recover to avoid damage"
		fi
	else
		echo "back-bdb was linked against ${back_bdb_version}, but db${back_bdb_version}-util package does not seem to be installed"
		echo "Skipping db${back_bdb_version}_recover"
	fi
}

check_subschema ()
{
    sleep 5
    tmpfile=`mktemp`
    res=1
	count=0
    while [ $res != 0 ] ; do
        ldapsearch -x -s base -b cn=Subschema 'objectClass=subschema' objectClasses attributeTypes matchingRules matichingRuleUse dITStructureRules dITContentRules nameForms ldapSyntaxes >$tmpfile
		res=$?
        if [ $res != 0 ]; then
			count=$((count+1))
			if [ $count = 2 ]; then
				echo "Failed to search schema"
				exit 1
			fi
            sleep 2
        fi
    done

    @!@
if baseConfig.has_key('ldap/schema/export') and  baseConfig['ldap/schema/export'].lower() in ['yes', 'true']:
        print 'cp $tmpfile /var/www/ldap-schema.txt'
        print 'chmod a+r /var/www/ldap-schema.txt'
    @!@

    md5=`md5sum $tmpfile | awk '{print $1}'`
    if [ ! -d /var/lib/univention-ldap/schema ]; then
        mkdir /var/lib/univention-ldap/schema
    fi
    if [ ! -e /var/lib/univention-ldap/schema/md5 ]; then
        touch /var/lib/univention-ldap/schema/md5
    fi
    md5_old=`cat /var/lib/univention-ldap/schema/md5`
    if [ "$md5" != "$md5_old" ]; then
        if [ ! -d /var/lib/univention-ldap/schema/id ]; then
           mkdir /var/lib/univention-ldap/schema/id
        fi
        if [ ! -e /var/lib/univention-ldap/schema/id/id ]; then
           touch /var/lib/univention-ldap/schema/id/id
        fi
        id=`cat /var/lib/univention-ldap/schema/id/id`
        if [ -z "$id" ]; then
          id=0
        fi
        id=$((id+1))
        echo "$md5" >/var/lib/univention-ldap/schema/md5
        echo "$id" >/var/lib/univention-ldap/schema/id/id
        chown listener /var/lib/univention-ldap/schema/id/id
     else
        id=`cat /var/lib/univention-ldap/schema/id/id`
        if [ -z "$id" ]; then
          echo "1" >/var/lib/univention-ldap/schema/id/id
          chown listener /var/lib/univention-ldap/schema/id/id
        fi
    fi
}


if [ -f "$SLAPDCONF" ]; then
    pidfile=`grep ^pidfile $SLAPDCONF | awk '{print $2}'`
    if [ -z "$pidfile" ]; then
	pidfile="/var/run/slapd/slapd.pid"
    fi
else
    exit 0
fi

test -f $DAEMON || exit 0

case "$1" in
  start)
	# check ucr autostart setting
	if [ -f "/usr/share/univention-config-registry/init-autostart.lib" ]; then
	    source "/usr/share/univention-config-registry/init-autostart.lib"
	    check_autostart ldap ldap/autostart
	fi
   @!@
if baseConfig['ldap/database/type'] == 'bdb':
	print 'echo -n "Check database: "'
	print 'bdbrecover'
	print 'echo "done"'
	print 'echo -n "  "'
   @!@

    echo -n "Starting ldap server(s):"
    echo -n " slapd"
    start-stop-daemon --start --quiet --pidfile "$pidfile" \
		--exec $DAEMON -- -h "ldap:/// ldapi:/// ldaps:///"

	test -e /var/run/slapd/ldapi && ln -sf /var/run/slapd/ldapi /var/run/ldapi

   @!@
if baseConfig['ldap/server/type']=="master":	   
    print 'check_subschema >/dev/null 2>&1'
   @!@

    echo "."

	if [ -e /var/lib/univention-directory-replication/failed.ldif ]; then
    	echo -n "Found failed.ldif. Importing ..."
		test -x /usr/sbin/univention-directory-replication-resync && /usr/sbin/univention-directory-replication-resync /var/lib/univention-directory-replication/failed.ldif >>/var/log/univention/listener.log 2>&1
		if [ $? = 0 ]; then
			echo " done"
		else
			echo " failed. Please check /var/log/univention/listener.log"
			exit 1
		fi
	fi
	
    ;;
  stop)
    echo -n "Stopping ldap server(s):"
    echo -n " slapd"
	start-stop-daemon --stop --quiet --oknodo --retry 10 \
	    --pidfile "$pidfile" \
	    --exec /usr/sbin/slapd 2>&1
    echo "."
    ;;
  restart|force-reload)
    echo "Restarting ldap server(s):"
    echo -n "  "
    $0 stop
    sleep 2 # give it some time to die
    echo -n "  "
    $0 start
    ;;
  force-stop)
    echo -n "Stopping ldap servers (force): "
    killall slapd > /dev/null 2>&1
    echo "done."
    ;;
  crestart)
	if pidof slapd > /dev/null 2>&1
		then
		$0 restart
	else
		echo "No slapd process found, don't need to restart"
	fi
	;;
  *)
    echo "Usage: $0 {start|stop|restart|force-stop|crestart}"
    exit 1
    ;;
esac

exit 0
