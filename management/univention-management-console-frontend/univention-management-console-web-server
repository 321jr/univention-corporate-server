#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
#
# Univention Management Console
#  UMC web server
#
# Copyright 2011-2015 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

import httplib
import os
import threading
from optparse import OptionParser
import signal
import sys
import tempfile
import time
import traceback
import functools
import uuid
import datetime
import hashlib
import urllib
import json

import notifier
import cherrypy
import Queue
from ipaddr import IPAddress
from cherrypy import HTTPError, HTTPRedirect
from daemon.runner import DaemonRunner, DaemonRunnerStopFailureError, DaemonRunnerStartFailureError

import univention.management.console.protocol as umcp
from univention.management.console.log import CORE, log_init
from univention.management.console.log import log_reopen
from univention.config_registry import ConfigRegistry

from saml2 import BINDING_HTTP_POST, BINDING_HTTP_ARTIFACT, BINDING_HTTP_REDIRECT, element_to_extension_element, time_util, ecp
from saml2.client import Saml2Client
from saml2.extension.pefim import SPCertEnc
from saml2.metadata import create_metadata_string
from saml2.ecp_client import PAOS_HEADER_INFO
from saml2.httputil import make_cookie, parse_cookie
from saml2.response import VerificationError
from saml2.s_utils import UnknownPrincipal, UnsupportedBinding, sid, rndstr
from saml2.samlp import Extensions
#from saml2 import xmldsig as ds  # FIXME: pysaml2 v3 required

ucr = ConfigRegistry()
ucr.load()

_thread_http = None

try:
	_session_timeout = int(ucr.get('umc/http/session/timeout', 300))
except (TypeError, ValueError):
	CORE.process('Failed to read session timeout from UCR variable umc/http/session/timeout. Using default of 300 seconds')
	_session_timeout = 300


def log_exceptions(func):
	@functools.wraps(func)
	def _decorated(*args, **kwargs):
		try:
			return func(*args, **kwargs)
		except (HTTPError, HTTPRedirect, KeyboardInterrupt, SystemExit):
			raise # ignore system and common cherrypy exceptions
		except Exception:
			CORE.error('Traceback in %s(%r, %r):\n%s' % (func.__name__, args, kwargs, traceback.format_exc()))
			raise
	return _decorated


@log_exceptions
def _fix_uri_for_saml():
	cherrypy.request.uri = '%s://%s%s?%s' % (cherrypy.request.scheme, cherrypy.request.headers['Host'], cherrypy.request.path_info, cherrypy.request.query_string)
	foo = cherrypy.request.params
	try:
		cherrypy.request.params = {}
		cherrypy.request.process_query_string()
		cherrypy.request.query = cherrypy.request.params
	finally:
		cherrypy.request.params = foo
cherrypy.tools.fix_uri = cherrypy.Tool('before_handler', _fix_uri_for_saml)


class SessionClient(object):

	def __init__(self, timeout=300, ip=None, cookie=False):
		CORE.info('SessionClient(0x%x): creating new session' % (id(self),))
		self.client = umcp.Client()
		self.client.signal_connect('authenticated', self._authenticated)
		self.client.signal_connect('response', self._response)
		try:
			self.client.connect()
			CORE.info('SessionClient(0x%x): connected to UMC server' % (id(self),))
		except umcp.NoSocketError:
			CORE.warn('SessionClient(0x%x): connection to UMC server failed' % (id(self),))
			raise umcp.NoSocketError('Connection failed')
		self._auth_response = None
		self._auth_response_queue = None
		self._requestid2response_queue = {}
		self._timeout = timeout
		self._time_remaining = timeout
		self._timer()  # launch the timer
		self._lock = threading.Lock()
		self.ip = ip
		self.cookie = cookie

	def renew_timer(self):
		"""Refresh the remaining time the session is will be held open."""
		self._time_remaining = self._timeout

	def _timer(self):
		"""In order to avoid problems when the system time is changed (e.g.,
		via rdate), we register a timer event that counts down the session
		timeout second-wise."""
		# count down the remaining time
		self._time_remaining -= 1

		if self._time_remaining <= 0:
			# session has timed out
			self._timed_out()
		else:
			# count down the timer second-wise (in order to avoid problems when
			# changing the system time, e.g. via rdate)
			notifier.timer_add(1000, self._timer)

	def _timed_out(self):
		"""Timer event: the session has expired and therefor the
		connection to the UMC server is closed as long as there are no
		open requests."""
		CORE.info('SessionClient(0x%x): timed out!' % (id(self),))
		if self._requestid2response_queue:
			CORE.info('SessionClient(0x%x): There are open requests (%s). Postpone session shutdown' % (id(self), ','.join(self._requestid2response_queue.keys())))
			self._timeout = 0  # wait until all requests are answered
		else:
			CORE.info('SessionClient(0x%x): Closing connection to UMC server' % (id(self),))
			self.client.disconnect()
		return False

	def _authenticated(self, success, response):
		"""Callback function for 'authenticated' from UMCP-Server."""
		CORE.process('SessionClient(0x%x): _authenticated: success=%s  status=%s  message=%s' % (id(self), success, response.status, response.message))
		self._auth_response.status = response.status
		self._auth_response.result = response.result
		self._auth_response.message = response.message
		self._auth_response_queue.put(self._auth_response)
		# release queue object
		self._auth_response_queue = None

	def authenticate_user(self, request, response_queue):
		"""Send authentication request to UMC server."""
		CORE.info('SessionClient(0x%x): authenticate_user: sending authentication request for user %s' % (id(self), request.body['username']))
		self._auth_response = umcp.Response(request)
		self._auth_response.body['sessionid'] = request.body.get('sessionid', '')
		self._auth_response_queue = response_queue
		self.client.authenticate(request.body['username'], request.body['password'], request.body['new_password'], request.body['locale'])

	def _response(self, response):
		"""Queue response from UMC server."""
		self._lock.acquire()
		try:
			try:
				# get and remove queue for response
				queue = self._requestid2response_queue.pop(response.id)
			except KeyError:
				CORE.process('SessionClient(0x%x): no request(%s) found: status=%s' % (id(self), response.id, response.status))
			else:
				CORE.info('SessionClient(0x%x): got response(%s): status=%s queue=0x%x' % (id(self), response.id, response.status, id(queue)))
				queue.put(response)
		finally:
			self._lock.release()

		# shutdown connection when the session is expired and there are no open requests
		if self._timeout == 0 and not self._requestid2response_queue:
			self.client.disconnect()

	def send_request(self, request, response_queue):
		"""Send request to UMC server."""
		CORE.info('SessionClient(0x%x): sending request(%s)' % (id(self), request.id))
		self._lock.acquire()
		try:
			self._requestid2response_queue[request.id] = response_queue
		finally:
			self._lock.release()
		self.client.request(request)
		self.renew_timer()

	def cleanup_request(self, request):
		"""Remove request from mapping."""
		self._lock.acquire()
		try:
			del self._requestid2response_queue[request.id]
		finally:
			self._lock.release()


class LoginToken(object):

	def __init__(self, sessionid, username, timeout=None):
		self.sessionid = sessionid
		self.username = username
		if timeout is not None:
			self.timeout = timeout
		else:
			self.timeout = time.time() + int(ucr.get('umc/web/sso/timeout', 15))

	def repr(self):
		return '<LoginToken(username=%s, sessionid=%s, timeout=%d)>' % (self.username, self.sessionid, self.timeout)

	def is_valid(self):
		return self.timeout > time.time()


class LoginTokenDict(dict):

	def add_session(self, sessionid, username, timeout=None):
		""" adds a new session to dictionary """
		login_token = hashlib.sha256(sessionid).hexdigest()
		self[login_token] = LoginToken(sessionid, username, timeout)

	def remove_session(self, sessionid):
		""" remove specific session and all timed out sessions from dictionary """
		now = time.time()
		remove_list = [key for (key, value) in self.items() if value.sessionid == sessionid or value.timeout < now]
		for key in remove_list:
			del self[key]


class UMCP_Dispatcher(object):

	"""Dispatcher used to exchange the requests between CherryPy and UMC"""
	# sessionid ==> SessionClient
	sessions = {}
	# loginToken ==> LoginToken(sessionid, username, timeout)
	logintokens = LoginTokenDict()
	_queue_send = Queue.Queue()

	@classmethod
	@log_exceptions
	def check_queue(cls):
		while True:
			try:
				queuerequest = cls._queue_send.get_nowait()
			except Queue.Empty:
				# Queue is empty - nothing to do (for now)
				return True
			CORE.info('UMCP_Dispatcher: check_queue: new request: 0x%x' % (id(queuerequest),))

			if not isinstance(queuerequest.sessionid, basestring) and queuerequest.sessionid is not None:
				CORE.process('UMCP_Dispatcher: check_queue: got invalid sessionid: %r' % (queuerequest.sessionid,))
			if not isinstance(queuerequest.request, umcp.Request):
				CORE.process('UMCP_Dispatcher: check_queue: got invalid UMCP request: %r' % (queuerequest.request,))
			if not isinstance(queuerequest.response_queue, Queue.Queue):
				CORE.process('UMCP_Dispatcher: check_queue: got invalid response_queue: %r' % (queuerequest.response_queue,))

			# stop here if sessionid is missing or unknown and request is no AUTH request
			try:
				client = cls.sessions[queuerequest.sessionid]
				if queuerequest.ip != client.ip and not (queuerequest.ip in ('127.0.0.1', '::1') and client.ip in ('127.0.0.1', '::1')):
					CORE.process('The sessionid (ip=%s) is not valid for this IP address (%s)' % (client.ip, queuerequest.ip))
					raise ValueError()
			except (KeyError, ValueError):
				if queuerequest.request.command != 'AUTH':
					CORE.process('UMCP_Dispatcher: check_queue: invalid session: sessionid=%r' % (queuerequest.sessionid))
					response = umcp.Response(queuerequest.request)
					response.status = httplib.UNAUTHORIZED  # set status to unauthorized
					queuerequest.response_queue.put(response)
					continue  # with next request

			if queuerequest.request.command == 'AUTH':
				# AUTH request
				CORE.info('UMCP_Dispatcher: check_queue: AUTH request')
				if not queuerequest.sessionid:
					CORE.info('UMCP_Dispatcher: check_queue: creating new sessionid')
					# FIXME: create nice session id via uuid or something else
					queuerequest.sessionid = str(uuid.uuid4())
				# create new session / umcp client
				# add a small offset to the timeout in order to avoid a mismatch between frontend and backend
				try:
					client = SessionClient(timeout=_session_timeout + 5, ip=queuerequest.ip, cookie=queuerequest.cookie)
				except Exception as exc:
					CORE.process('Failed to create UMC connection: %s' % (exc,))
					response = umcp.Response(queuerequest.request)
					response.status = httplib.SERVICE_UNAVAILABLE
					response.message = '\n'.join((
						'The Univention Management Console Server is currently not running. ',
						'If you have root permissions on the system you can restart it by executing the following command:',
						' * invoke-rc.d univention-management-console-server restart',
						'The following logfile may contain information why the server is not running:',
						' * /var/log/univention/management-console-server.log',
						'Otherwise please contact an administrator or try again later.'
					))
					queuerequest.response_queue.put(response)
					continue

				cls.sessions[queuerequest.sessionid] = client
				callback = notifier.Callback(cls.cleanup_session, queuerequest.sessionid)
				client.client.signal_connect('closed', callback)

				# save new sessionid in UMCP request so it can be returned after authentication
				queuerequest.request.body['sessionid'] = queuerequest.sessionid
				client.authenticate_user(queuerequest.request, queuerequest.response_queue)
			else:
				# COMMAND / GET / SET request
				CORE.info('UMCP_Dispatcher: check_queue: normal request')
				try:
					client.send_request(queuerequest.request, queuerequest.response_queue)
				except umcp.client.NotAuthenticatedError:
					response = umcp.Response(queuerequest.request)
					response.status = httplib.UNAUTHORIZED  # set status to unauthorized
					queuerequest.response_queue.put(response)
					# remove response_queue from internal mapping
					client.cleanup_request(queuerequest.request)

	@classmethod
	def cleanup_session(cls, sessionid):
		"""Removes a session when the connection to the UMC server has died or the session is expired"""
		CORE.info('Open sessions: %s' % (','.join(cls.sessions.keys())))
		try:
			del cls.sessions[sessionid]
			CORE.info('Cleaning up session %s' % sessionid)
		except KeyError:
			CORE.info('Session %s not found' % sessionid)
		# remove onetime session keys
		cls.logintokens.remove_session(sessionid)


class UploadManager(dict):

	def add(self, request_id, store):
		tmpfile = tempfile.NamedTemporaryFile(prefix=request_id, dir=umcp.TEMPUPLOADDIR, delete=False)
		if hasattr(store, 'file') and store.file is None:
			tmpfile.write(store.value)
		else:
			tmpfile.write(store.file.read())
		tmpfile.close()
		if request_id in self:
			self[request_id].append(tmpfile.name)
		else:
			self[request_id] = [tmpfile.name]

		return tmpfile.name

	def cleanup(self, request_id):
		if request_id in self:
			filenames = self[request_id]
			for filename in filenames:
				if os.path.isfile(filename):
					os.unlink(filename)
			del self[request_id]
			return True

		return False

_upload_manager = UploadManager()


class QueueRequest(object):

	"""Element for the request queue containing the assoziated session
	ID, the request object, a response queue and the request ip address."""

	def __init__(self, sessionid, request, response_queue, ip, cookie=False):
		self.sessionid = sessionid
		self.request = request
		self.response_queue = response_queue
		self.ip = ip
		self.cookie = cookie


def default_error_page(status, message, traceback, version, result=None):
	""" The default error page for UMCP responses """
	cherrypy.response.headers['Content-type'] = umcp.MIMETYPE_JSON
	response = {
		'status': status,
		'message': cherrypy._cperror._escape(str(message), True)  # html escaped
	}
	if result:
		response['result'] = result
	return json.dumps(response)


class UMC_HTTPError(cherrypy.HTTPError):

	""" HTTPError which sets a error result """

	def __init__(self, status=500, message=None, body=None):
		cherrypy.HTTPError.__init__(self, status, message)
		self.body = body

	def set_response(self):
		cherrypy._cperror.clean_headers(self.status)

		cherrypy.response.status = self.status
		content = default_error_page(self.status, self._message, None, None, self.body)
		cherrypy.response.body = content

		cherrypy.response.headers['Content-Length'] = len(content)

		cherrypy._cperror._be_ie_unfriendly(self.status)


class CPgeneric(object):

	# NOTE: only use CORE.process, _not_ CORE.error; since CORE.error writes as
	#	   well to /var/log/syslog, this seems to cause problems with cherrypy.
	# (Bug #22634)
	_logOptions = {
		'error': CORE.process,
		'warn': CORE.warn,
		'info': CORE.info,
	}

	@property
	def name(self):
		"""returns class name"""
		return self.__class__.__name__

	def _log(self, loglevel, _msg):
		remote = cherrypy.request.remote
		msg = '%s (%s:%s) %s' % (self.name, get_ip_address(), remote.port, _msg)
		self._logOptions.get(loglevel, CORE.info)(msg)

	def get_request(self, path, args):
		return umcp.Request(['generic'], opts={})

	@log_exceptions
	def get_session_id(self):
		"""get the current session ID, either set via headers or cookie."""
		# check for a valid session key
		req = cherrypy.request
		if req.cookie.get('UMCSessionId'):
			sessionid = req.cookie['UMCSessionId'].value
		else:
			# a sessionid is required to use this command
			self._log('info', 'no sessionid found')
			raise cherrypy.HTTPError(httplib.UNAUTHORIZED)

		self._log('info', 'found sessionid')
		self._log(99, 'sessionid="%s"' % (sessionid))
		return sessionid

	def set_cookies(self, sessionid=None, username=None):
		# set the cookie once during successful authentication
		# force expiration of cookie in 5 years from now on...
		# IE does not support max-age
		expiration = datetime.datetime.now()
		expiration = expiration.replace(year=expiration.year + 5)
		expirationStr = expiration.strftime("%a, %d-%b-%Y %H:%M:%S GMT")
		if sessionid:
			cherrypy.response.cookie['UMCSessionId'] = sessionid
			cherrypy.response.cookie['UMCSessionId']['expires'] = expirationStr
			cherrypy.response.cookie['UMCSessionId']['version'] = 1
			cherrypy.response.cookie['UMCSessionId']['path'] = '/'
		if username:
			cherrypy.response.cookie['UMCUsername'] = username
			cherrypy.response.cookie['UMCUsername']['expires'] = expirationStr
			cherrypy.response.cookie['UMCUsername']['version'] = 1
			cherrypy.response.cookie['UMCUsername']['path'] = '/'

	@log_exceptions
	def load_json(self, body):
		try:
			json_ = json.loads(body)
			if not isinstance(json_, dict):
				raise cherrypy.HTTPError(httplib.BAD_REQUEST, 'JSON document have to be dict')
		except ValueError:
			self._log('error', 'cannot parse JSON body')
			raise cherrypy.HTTPError(httplib.BAD_REQUEST, 'Invalid JSON document')
		return json_

	@cherrypy.expose
	@log_exceptions
	def default(self, *path, **kwargs):
		self._log('info', 'got new request')

		# get the session id from the request
		sessionid = self.get_session_id()

		if cherrypy.request.headers.get('Content-Type', '').startswith('application/json'):  # normal (json) request
			# get body and parse json
			body = '{}'
			if cherrypy.request.method in cherrypy.request.methods_with_bodies:
				if not cherrypy.request.headers.get(u"Content-Length"):
					self._log('warn', 'missing Content-Length header')
					raise cherrypy.HTTPError(httplib.LENGTH_REQUIRED, 'Missing Content-Length header')
				body = cherrypy.request.body.read()

			args = self.load_json(body)
		else:
			# request is not json
			args = {'options': kwargs}
			if 'flavor' in kwargs:
				args['flavor'] = kwargs['flavor']

		return self.get_response(sessionid, path, args)

	@log_exceptions
	def get_response(self, sessionid, path, args):
		# create new UMCP request
		req = self.get_request('/'.join(path), args)

		# create new response queue
		response_queue = Queue.Queue()

		# send request to UMC server
		request = QueueRequest(sessionid, req, response_queue, get_ip_address())
		UMCP_Dispatcher._queue_send.put(request)

		self._log('info', 'pushed request(0x%x) to queue(0x%x) - waiting for response (sessionid="%s")' % (id(req), id(response_queue), sessionid))
		response = response_queue.get()
		self._log('info', 'got response(0x%x) from queue(0x%x): status=%s (sessionid="%s")' % (id(response), id(response_queue), response.status, sessionid))

		status = response.status
		body = response.body
		if status is None:
			# if status is not set, treat as SUCCESS. See Bug #29957
			# UMCP responses which are not json do not have a status
			status = 200
		if 200 <= status < 300:
			if response.mimetype == umcp.MIMETYPE_JSON:
				# convert data to JSON
				body = json.dumps(response.body)

			# return response
			cherrypy.response.headers['Content-Type'] = response.mimetype
			cherrypy.response.status = status
			return body

		# TODO: 3xx handling

		# something bad happened
		self._log('error', 'response status code: %s' % response.status)
		self._log('error', 'response message: %s' % response.message)
		self._log('error', 'response result: %s' % response.result)
		raise UMC_HTTPError(response.status, response.message, response.result)


class CPSingleSignOn(CPgeneric):

	@cherrypy.expose
	@log_exceptions
	def default(self, *path, **kwargs):
		self._log('info', 'got SSO request %r %r' % (path, kwargs))
		login_token = UMCP_Dispatcher.logintokens.get(kwargs.get('loginToken'))
		if login_token and not login_token.is_valid():
			login_token = None

		self._log('info', 'found login_token=%r' % (login_token,))
		if login_token:
			# update IP address of sesssion ==> address changes during single sign on
			UMCP_Dispatcher.sessions[login_token.sessionid].ip = get_ip_address()

			self.set_cookies(sessionid=login_token.sessionid, username=login_token.username)

			# invalidate login token after first use
			UMCP_Dispatcher.logintokens.remove_session(login_token.sessionid)
		else:
			self._log('error', 'Unknown SSO token: %r' % kwargs)

		# Redirect in any case to UMC start page
		targeturl = '/univention-management-console/'

		# copy query string
		query_args = {}
		query_args.update(kwargs)
		# remove some arguments from query string
		for remove_arg in ('loginToken', 'username', 'password'):
			if remove_arg in query_args:
				query_args.pop(remove_arg)
		if query_args:
			targeturl += '?%s' % urllib.urlencode(query_args)

		scheme = 'https' if cherrypy.request.headers.get('X-UMC-HTTPS') == 'on' else 'http'
		targeturl = '%s://%s%s' % (scheme, cherrypy.request.base.split('://')[1], targeturl)

		self._log('info', 'redirecting to %s' % targeturl)
		raise cherrypy.HTTPRedirect(targeturl)


class CPGet(CPgeneric):

	@log_exceptions
	def get_request(self, path, args):
		if not path:
			self._log('error', 'get_request: path is empty')
			raise cherrypy.HTTPError(httplib.NOT_FOUND)

		return umcp.Request('GET', arguments=[path], options=args.get('options', {}))


class IPAddresses(object):

	@cherrypy.expose
	@log_exceptions
	def default(self, *a, **kw):
		try:
			addresses = self.addresses
		except ValueError:
			# hacking attempt
			addresses = [cherrypy.request.remote.ip]
		return json.dumps(addresses)

	@property
	def addresses(self):
		addresses = cherrypy.request.headers.get('X-FORWARDED-FOR', cherrypy.request.remote.ip).split(',') + [cherrypy.request.remote.ip]
		addresses = set(map(IPAddress, map(str.strip, addresses)))
		addresses.discard(IPAddress('::1'))
		addresses.discard(IPAddress('127.0.0.1'))
		return tuple(address.exploded for address in addresses)


class CPSet(CPgeneric):

	@log_exceptions
	def get_request(self, path, args):
		return umcp.Request('SET', options=args.get('options', {}))


class CPUpload(CPgeneric):

	@log_exceptions
	def get_request(self, path, args):
		self._log('info', 'Handle upload command')
		global _upload_manager
		req = umcp.Request('UPLOAD', arguments=[path])

		options = []
		body = {}

		# check if enough free space is available
		min_size = int(ucr.get('umc/server/upload/min_free_space', 51200))  # kilobyte
		s = os.statvfs(umcp.TEMPUPLOADDIR)
		free_disk_space = s.f_bavail * s.f_frsize / 1024  # kilobyte
		if free_disk_space < min_size:
			self._log('error', 'there is not enough free space to upload files')
			raise cherrypy.HTTPError(httplib.BAD_REQUEST, 'There is not enough free space on disk')

		for iid, ifield in args.iteritems():
			if isinstance(ifield, cherrypy._cpreqbody.Part):
				options.append(self._check_field_storage(req, iid, ifield))
			elif isinstance(ifield, list):
				# multiple files
				for jfield in ifield:
					if isinstance(jfield, cherrypy._cpreqbody.Part):
						options.append(self._check_field_storage(req, iid, jfield))
					else:
						CORE.warn('Unknown type of multipart/form-data entry: %r=%r' % (iid, jfield))
			elif isinstance(ifield, basestring):
				# field is a string :)
				body[iid] = ifield
			else:
				CORE.warn('Unknown type of multipart/form-data entry: %r=%r' % (iid, ifield))

		req.body = body
		req.body['options'] = options
		return req

	def _check_field_storage(self, req, iid, ifield):
		# field is a FieldStorage object
		store = ifield
		tmpfile = _upload_manager.add(req.id, store)

		# check if filesize is allowed
		st = os.stat(tmpfile)
		max_size = int(ucr.get('umc/server/upload/max', 64)) * 1024
		if st.st_size > max_size:
			self._log('warn', 'file of size %d could not be uploaded' % (st.st_size))
			raise cherrypy.HTTPError(httplib.BAD_REQUEST, 'The size of the uploaded file is too large')

		filename = store.filename
		# some security
		for c in ('<>/'):
			filename = filename.replace(c, '_')

		return {'filename': filename, 'name': store.name, 'tmpfile': tmpfile}

	@cherrypy.expose
	@log_exceptions
	def default(self, *path, **kwargs):
		self._log('info', 'got new request')

		# get the session id from the request
		sessionid = self.get_session_id()

		if not cherrypy.request.headers.get('Content-Type', '').startswith('multipart/form-data'):
			raise cherrypy.HTTPError(httplib.BAD_REQUEST, 'Content type and URL do not match')

		response = self.get_response(sessionid, path, kwargs)

		# check if the request is a iframe upload
		if 'iframe' in kwargs and (kwargs['iframe'] not in ('false', False, 0, '0')):
			# this is a workaround to make iframe uploads work, they need the textarea field
			cherrypy.response.headers['Content-Type'] = umcp.MIMETYPE_HTML
			return '<html><body><textarea>%s</textarea></body></html>' % (response)

		return response


class CPCommand(CPgeneric):

	@log_exceptions
	def get_request(self, path, args):
		if not path:
			self._log('error', 'get_request: path is empty')
			raise cherrypy.HTTPError(httplib.NOT_FOUND)

		req = umcp.Command([path], options=args.get('options', {}))
		if 'flavor' in args:
			req.flavor = args['flavor']

		return req


class CPAuth(CPgeneric):

	@cherrypy.expose
	@log_exceptions
	def default(self, **kw):
		remote = cherrypy.request.remote
		CORE.info('CPRoot/auth: got new auth request (%s:%s <=> %s)' % (get_ip_address(), remote.port, remote.name))

		content_length = cherrypy.request.headers.get("Content-Length")
		if not content_length and content_length != 0:
			CORE.process('CPRoot/auth: missing Content-Length header')
			raise cherrypy.HTTPError(httplib.LENGTH_REQUIRED)

		# get body and parse json
		body = ''
		if cherrypy.request.method in cherrypy.request.methods_with_bodies:
			max_length = 512
			if content_length <= max_length:
				raise cherrypy.HTTPError(httplib.REQUEST_ENTITY_TOO_LARGE, 'Request data is too large, allowed length is %d' % max_length)
			body = cherrypy.request.body.read()

		data = self.load_json(body)

		CORE.info('CPRoot/command: request: command=%s' % cherrypy.request.path_info)

		# create new UMCP request
		req = umcp.Request('AUTH')
		req.body['username'] = data['options'].get('username', '')
		req.body['password'] = data['options'].get('password', '')
		req.body['new_password'] = data['options'].get('new_password')
		req.body['locale'] = (cherrypy.request.headers.values('Accept-Language') or ['C'])[0].replace('-', '_')

		# create new response queue
		response_queue = Queue.Queue()

		# send request to UMC server
		cookie = not bool(data['options'].get('version', ''))
		request = QueueRequest(None, req, response_queue, get_ip_address(), cookie=cookie)
		UMCP_Dispatcher._queue_send.put(request)

		CORE.info('CPRoot/auth: pushed request to queue - waiting for response')
		response = response_queue.get()
		CORE.info('CPRoot/auth: got response with status %s' % response.status)

		if response.status == umcp.SUCCESS and response.body.get('sessionid'):
			sessionid = response.body.pop('sessionid')
			CORE.info('CPRoot/auth: creating session with sessionid=%s' % (sessionid,))

			# add new one time session
			UMCP_Dispatcher.logintokens.add_session(sessionid, data['options'].get('username', ''))

			self.set_cookies(sessionid=sessionid)

			cherrypy.response.headers['Content-Type'] = response.mimetype
			if response.mimetype == 'application/json':
				return json.dumps(response.body)
			return response.body

		CORE.process('CPRoot/auth: username: %s, status code: %s' % (data.get('username'), response.status))
		raise cherrypy.HTTPError(response.status, response.message)


class CPRoot(object):

	@cherrypy.expose
	@log_exceptions
	def index(self, **kw):
		"""
		http://localhost:<ucr:umc/http/port>/
		"""
		raise HTTPRedirect('/univention-management-console/')


def get_ip_address():
	"""get the IP address of client by last entry (from apache) in X-FORWARDED-FOR header"""
	return cherrypy.request.headers.get('X-FORWARDED-FOR', cherrypy.request.remote.ip).rsplit(', ', 1).pop()


class SAML(object):

	def __init__(self):
		self.configfile = '/usr/share/univention-management-console/saml/sp.py'
		self.sp = Saml2Client(config_file=self.configfile)
		self.seed = 'SnabbtInspel'  # FIXME: generate a secure random seed?

		self.idp_query_param = "IdpQuery"
		self.wayf = None
		self.discosrv = None
		self.bindings = [BINDING_HTTP_REDIRECT, BINDING_HTTP_POST, BINDING_HTTP_ARTIFACT]

		self.uid2user = {}
		self.cookie_name = "spauthn"
		self.outstanding_queries = {}
		self.outstanding_certs = {}
		self.relay_state = {}
		self.user = {}

	@cherrypy.expose
	@log_exceptions
	@cherrypy.tools.fix_uri()
	def index(self, *args, **kwargs):
		user = self.get_user()

		if user is None:
			return self.do_single_sign_on()

		cherrypy.response.headers['Content-Type'] = 'text/html'
		return '<a href="./logout">logout</a>'

	@cherrypy.expose
	@log_exceptions
	@cherrypy.tools.fix_uri()
	def metadata(self, *args, **kwargs):
		metadata = create_metadata_string(self.configfile, None, valid='4', cert=None, keyfile=None, mid=None, name=None, sign=False)
		cherrypy.response.headers['Content-Type'] = 'text/xml'
		return metadata

	@cherrypy.expose
	@log_exceptions
	@cherrypy.tools.fix_uri()
	def acs(self, *args, **kwargs):  # attribute consuming service
		message, binding, relay_state = self._get_saml_arguments()

		try:
			response = self.sp.parse_authn_request_response(message, binding, self.outstanding_queries, self.outstanding_certs)
		except UnknownPrincipal as exc:
			raise HTTPError(500, "UnknownPrincipal: %s" % (exc,))
		except UnsupportedBinding as exc:
			raise HTTPError(500, "UnsupportedBinding: %s" % (exc,))
		except VerificationError as exc:
			raise HTTPError(500, "Verification error: %s" % (exc,))
		if response is None:
			raise HTTPError(400, "The SAML message is invalid for this service provider.")

		user = SAMLUser(response.name_id, response.ava)
		self.set_cookie(user)

		raise HTTPRedirect('/univention-management-console/')

	@cherrypy.expose
	@log_exceptions
	@cherrypy.tools.fix_uri()
	def slo(self, *args, **kwargs):  # single logout service
		message, binding, relay_state = self._get_saml_arguments()
		self.sp.parse_logout_request_response(message, binding)
		self.delete_cookie()
		cherrypy.response.headers['Content-Type'] = 'text/plain'
		return 'You are now logged out of this service'

	def _get_saml_arguments(self):
		if cherrypy.request.method not in ('GET', 'POST'):
			cherrypy.response.headers['Allow'] = 'GET, HEAD, POST'
			raise HTTPError(405)

		if cherrypy.request.method == 'GET':
			binding = BINDING_HTTP_REDIRECT
			args = cherrypy.request.query
		elif cherrypy.request.method == "POST":
			binding = BINDING_HTTP_POST
			args = cherrypy.request.params

		relay_state = args.get('RelayState', '')
		try:
			message = args['SAMLResponse']
		except KeyError:
			try:
				message = args['SAMLRequest']
			except KeyError:
				try:
					message = args['SAMLart']
				except KeyError:
					raise HTTPError(400, 'The HTTP request is missing required SAML parameter.')
				message = self.sp.artifact2message(message, 'spsso')
				binding = BINDING_HTTP_ARTIFACT

		return message, binding, relay_state

	@cherrypy.expose
	@log_exceptions
	@cherrypy.tools.fix_uri()
	def logout(self, *args, **kwargs):
		user = self.get_user()

		if user is None:
			return self.do_single_sign_on()

		# What if more than one
		data = self.sp.global_logout(user.name_id)

		for entity_id, logout_info in data.items():
			if not isinstance(logout_info, tuple):
				continue  # result from logout, should be OK

			binding, http_info = logout_info

			if binding == BINDING_HTTP_POST:
				body = ''.join(http_info['data'])
				cherrypy.response.headers['Content-Type'] = 'text/html'
				return body
			elif binding == BINDING_HTTP_REDIRECT:
				for key, value in http_info['headers']:
					if key.lower() == 'location':
						raise HTTPRedirect(value, status=302)
				raise HTTPError(500, 'Cannot redirect due to missing Location header')
			else:
				raise HTTPError(500, 'unknown logout binding: %s', binding)

		self.delete_cookie()
		cherrypy.response.headers['Content-Type'] = 'text/plain'
		return 'You are now logged out of this service'

	@cherrypy.expose
	@log_exceptions
	@cherrypy.tools.fix_uri()
	def disco(self, *args, **kwargs):
		try:
			sid = kwargs['sid']
			entity_id = kwargs['entityID']
		except KeyError as key:
			raise HTTPError(400, 'missing query string parameter: %s' % (key,))
		try:
			came_from = self.outstanding_queries[sid]
		except KeyError:
			raise HTTPError(400, 'unknown sid!')

		resp = self.redirect_to_auth(entity_id, came_from)

		# Add cookie
		key, value = make_cookie("ve_disco", entity_id, "SEED_SAW")  # TODO: find out why "SEED_SAW"
		cherrypy.response.headers[key] = value

		return resp

	def do_single_sign_on(self):
		# Which page was accessed to get here
		came_from = cherrypy.request.uri

		# If more than one idp and if none is selected, I have to do wayf
		(done, response) = self._pick_idp(came_from)
		# Two cases:
		#		0 I've got an IdP to send a request to
		#		>0 ECP in progress
		if done > 0:
			self.outstanding_queries[done] = came_from
			cherrypy.response.headers['Content-Type'] = 'text/xml'
			return response
		else:
			entity_id = response
			# Do the AuthnRequest
			return self.redirect_to_auth(entity_id, came_from)

	def _pick_idp(self, came_from):
		"""
		If more than one idp and if none is selected, I have to do wayf or
		disco
		"""

		if 'Paos' in cherrypy.request.headers:
			if cherrypy.request.headers['Paos'] != PAOS_HEADER_INFO:
				raise HTTPError(500, 'unknown ECP version')

			if 'application/vnd.paos+xml' not in cherrypy.request.headers.values('Accept'):
				raise HTTPError(500, 'Faulty Accept header')

			# Where should I redirect the user to
			# entityid -> the IdP to use
			# relay_state -> when back from authentication

			_rstate = rndstr()
			self.relay_state[_rstate] = cherrypy.request.uri
			_entityid = self.sp.config.ecp_endpoint(get_ip_address())  # get_ip_address instead of environ['REMOTE_ADDR']

			if not _entityid:
				raise HTTPError(500, "Could not determine identity provider.")
			return ecp.ecp_auth_request(self.sp, _entityid, _rstate)

		# Find all IdPs
		idps = self.sp.metadata.with_descriptor("idpsso")
		idp_entity_id = None

		kaka = cherrypy.request.headers.get('Cookie')
		if kaka:
			try:
				(idp_entity_id, _) = parse_cookie("ve_disco", "SEED_SAW", kaka)
			except (ValueError, TypeError):
				pass

		# Any specific IdP specified in a query part
		if not idp_entity_id and self.idp_query_param in cherrypy.request.query:
			_idp_entity_id = cherrypy.request.query[self.idp_query_param]
			if _idp_entity_id in idps:
				idp_entity_id = _idp_entity_id

		if not idp_entity_id:

			if self.wayf:
				wayf_selected = cherrypy.request.query.get('wayf_selected')
				if not wayf_selected:
					return self._wayf_redirect(came_from)
				idp_entity_id = wayf_selected
			elif self.discosrv:
				if cherrypy.request.query_string:
					idp_entity_id = self.sp.parse_discovery_service_response(query=cherrypy.request.query_string)
				if not idp_entity_id:
					sid_ = sid()
					self.outstanding_queries[sid_] = came_from
					eid = self.sp.config.entityid
					ret = self.sp.config.getattr("endpoints", "sp")["discovery_response"][0][0]
					ret += "?sid=%s" % sid_
					loc = self.sp.create_discovery_service_request(self.discosrv, eid, **{"return": ret})
					raise HTTPRedirect(loc, status=303)
			elif len(idps) == 1:
				# idps is a dictionary
				idp_entity_id = idps.keys()[0]
			elif not idps:
				raise HTTPError(500, 'Misconfiguration')
			else:
				raise HTTPError(501, "No WAYF or DS present!")

		return 0, idp_entity_id

	def _wayf_redirect(self, came_from):
		sid_ = sid()
		self.outstanding_queries[sid_] = came_from
		raise HTTPRedirect("%s?%s" % (self.wayf, sid_), status=303)

	def redirect_to_auth(self, entity_id, came_from, sigalg=""):
		# Picks a binding to use for sending the Request to the IDP
		_binding, destination = self.sp.pick_binding("single_sign_on_service", self.bindings, "idpsso", entity_id=entity_id)
		# Binding here is the response binding that is which binding the
		# IDP should use to return the response.
		acs = self.sp.config.getattr("endpoints", "sp")["assertion_consumer_service"]
		# just pick one
		endp, return_binding = acs[0]

		extensions = None
		cert = None
		if self.sp.config.generate_cert_func is not None:
			cert_str, req_key_str = self.sp.config.generate_cert_func()
			cert = {
				"cert": cert_str,
				"key": req_key_str
			}
			spcertenc = SPCertEnc(x509_data=ds.X509Data(x509_certificate=ds.X509Certificate(text=cert_str)))
			extensions = Extensions(extension_elements=[element_to_extension_element(spcertenc)])

		req_id, req = self.sp.create_authn_request(destination, binding=return_binding, extensions=extensions)
		_rstate = rndstr()
		self.relay_state[_rstate] = came_from
		ht_args = self.sp.apply_binding(_binding, "%s" % req, destination, relay_state=_rstate, sigalg=sigalg)
		_sid = req_id

		if cert is not None:
			self.outstanding_certs[_sid] = cert

		# remember the request
		self.outstanding_queries[_sid] = came_from
		return self.response(_binding, ht_args)

	def response(self, binding, http_args):
		for key, value in http_args["headers"]:
			cherrypy.response.headers[key] = value

		if binding == BINDING_HTTP_ARTIFACT:
			raise HTTPRedirect(None, status=302)
		elif binding == BINDING_HTTP_REDIRECT:
			for param, value in http_args["headers"]:
				if param == "Location":
					raise HTTPRedirect(str(value), status=303)
			raise HTTPError(500, "Parameter error")

		return http_args["data"]

	def get_user(self):
		morsel = cherrypy.request.cookie.get(self.cookie_name, None)
		if morsel:
			try:
				return self.uid2user[morsel.value]
			except KeyError:
				pass

	def delete_cookie(self):
		cookie = cherrypy.response.cookie
		cookie[self.cookie_name] = ""
		cookie[self.cookie_name]['path'] = "/"  # FIXME?
		cookie[self.cookie_name]["expires"] = self._expiration()

	def set_cookie(self, user):
		uid = rndstr(32)
		self.uid2user[uid] = user
		cookie = cherrypy.response.cookie
		cookie[self.cookie_name] = uid
		cookie[self.cookie_name]['path'] = "/"  # FIXME?
		cookie[self.cookie_name]["expires"] = self._expiration(480)

	def _expiration(self, timeout=None, tformat='%a, %d-%b-%Y %T GMT'):
		if timeout is None:  # now
			return time_util.instant(tformat)
		# validity time should match lifetime of assertions
		return time_util.in_a_while(minutes=timeout, format=tformat)


class SAMLUser(object):

	def __init__(self, name_id, data):
		self.name_id = name_id
		self.data = data



@log_exceptions
def run_cherrypy():
	# TODO FIXME Folgenden Configeintrag einbauen, wenn loglevel in (0,1,2)
	# 'server.environment': 'production',
	cherrypy.config.update({
		'server.socket_port': int(ucr.get('umc/http/port', 8090)),
		'server.socket_host': ucr.get('umc/http/interface', '127.0.0.1'),
		'server.request_queue_size': int(ucr.get('umc/http/requestqueuesize', 100)),
		'server.thread_pool': int(ucr.get('umc/http/maxthreads', 35)),
		'response.timeout': _session_timeout,
		'engine.autoreload_on': False,
		'tools.response_headers.on': True,
		'tools.response_headers.headers': [
			('Content-Type', umcp.MIMETYPE_JSON)
		],
		'error_page.default': default_error_page
	})
	cherrypy.tools.proxy(base=None, local='X-Forwarded-Host', remote='X-Forwarded-For', scheme='X-Forwarded-Proto')

	root = CPRoot()
	root.command = CPCommand()
	root.auth = CPAuth()
	root.get = CPGet()
	root.set = CPSet()
	root.upload = CPUpload()
	root.sso = CPSingleSignOn()
	try:
		root.saml = SAML()
	except:
		CORE.error('Cannot support SAML2.0 single sign on\n%s' % (traceback.format_exc(),))
	root.get.ipaddress = IPAddresses()

	cherrypy.quickstart(root=root)


class UMC_HTTP_Daemon(DaemonRunner):

	def __init__(self):
		self.parser = OptionParser()
		self.parser.add_option('-n', '--no-daemon', action='store_false',
			dest='daemon_mode', default=True,
			help='if set the process will not fork into the background'
		)
		try:
			default_debug = int(ucr.get('umc/server/debug/level', '1'))
		except:
			default_debug = 1
		self.parser.add_option('-d', '--debug', action='store', type='int', dest='debug', default=default_debug,
			help='if given than debugging is activated and set to the specified level [default: %default]'
		)
		self.parser.add_option('-L', '--log-file', action='store', dest='logfile', default='management-console-web-server',
			help='specifies an alternative log file [default: %default]'
		)
		(self.options, self.arguments) = self.parser.parse_args()

		# cleanup environment
		os.environ.clear()
		os.environ['PATH'] = '/bin:/sbin:/usr/bin:/usr/sbin'

		# init logging
		if not self.options.daemon_mode:
			debug_fd = log_init('/dev/stderr', self.options.debug)
		else:
			debug_fd = log_init(self.options.logfile, self.options.debug)

		# default action: start
		if not self.arguments:
			sys.argv[1:] = ['start']
		elif self.arguments:
			sys.argv[1:] = self.arguments

		# for daemon runner
		if self.options.daemon_mode:
			self.stdin_path = os.path.devnull
			self.stdout_path = os.path.devnull
			self.stderr_path = os.path.devnull
		else:
			self.stdin_path = '/dev/stdin'
			self.stdout_path = '/dev/stdout'
			self.stderr_path = '/dev/stderr'
		self.pidfile_path = '/var/run/umc-web-server.pid'
		self.pidfile_timeout = 10

		# init daemon runner
		DaemonRunner.__init__(self, self)
		self.daemon_context.prevent_core = False
		self.daemon_context.detach_process = self.options.daemon_mode
		self.daemon_context.umask = 0077
		self.daemon_context.files_preserve = [debug_fd]

	def _restart(self):
		"""Handler for the restart action. """
		if self.pidfile.is_locked():
			CORE.process('Stopping UMC web server ...')
			self._stop()

		CORE.process('Starting UMC web server ...')
		self._start()

	def _crestart(self):
		"""Handler for the crestart action. """
		if not self.pidfile.is_locked():
			CORE.process('The UMC web server will not be restarted as it is not running currently')
			return

		CORE.process('Stopping UMC web server ...')
		self._stop()
		CORE.process('Starting UMC web server ...')
		self._start()

	DaemonRunner.action_funcs['restart'] = _restart
	DaemonRunner.action_funcs['crestart'] = _crestart

	def _terminate_daemon_process(self):
		""" Terminate the daemon process specified in the current PID file.
				"""
		pid = self.pidfile.read_pid()
		try:
			os.kill(pid, signal.SIGTERM)
		except OSError as exc:
			raise DaemonRunnerStopFailureError("Failed to terminate %d: %s" % (pid, exc))

		if self.pidfile.is_locked():
			CORE.process('The UMC web server is still running. Will wait for 5 seconds')
			count = 10
			while count:
				time.sleep(0.5)
				if not self.pidfile.is_locked():
					break
				count -= 1
			if self.pidfile.is_locked():
				CORE.process('The UMC web server is still running. Kill it!')
				os.kill(pid, signal.SIGKILL)
				self.pidfile.break_lock()

	def _usage_exit(self, argv):
		self.parser.error('invalid action')
		sys.exit(1)

	def run(self):
		# cherrypy runs in a thread. signals can only be registered in the main thread
		# to prevent race conditions this must be called before the cherrypy thread gets created
		cherrypy.engine.signal_handler.handlers['SIGHUP'] = log_reopen
		cherrypy.engine.signal_handler.subscribe()

		# start webserver as separate thread
		_thread_http = threading.Thread(target=run_cherrypy)
		_thread_http.deamon = True
		_thread_http.start()

		try:
			# start notifier loop
			notifier.init(notifier.GENERIC)
			notifier.dispatcher_add(UMCP_Dispatcher.check_queue)
			notifier.loop()
		except (SystemExit, KeyboardInterrupt) as e:
			# stop the web server
			CORE.info('stopping cherrypy: %s' % str(e))
			cherrypy.engine.exit()
			CORE.info('cherrypy stopped')

if __name__ == '__main__':
	http_daemon = UMC_HTTP_Daemon()
	try:
		http_daemon.do_action()
	except DaemonRunnerStopFailureError as e:
		CORE.process('Failed to shutdown server gracefully (may be its already dead): %s' % str(e))
	except DaemonRunnerStartFailureError as e:
		CORE.process('Failed to start server: %s' % str(e))
