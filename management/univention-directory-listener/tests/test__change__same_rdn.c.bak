#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <ldap.h>
//#include "change.h"

static bool
same_rdn(LDAPRDN left, LDAPRDN right)
{
	int i, j;

	for (i = 0; left[i]; i++) {
		for (j = 0; right[j]; j++) {
			if (left[i]->la_attr.bv_len != right[j]->la_attr.bv_len)
				continue; // inner
			if (left[i]->la_value.bv_len != right[j]->la_value.bv_len)
				continue; // inner
			if (memcmp(left[i]->la_attr.bv_val, right[j]->la_attr.bv_val, left[i]->la_attr.bv_len) == 0 &&
			    memcmp(left[i]->la_value.bv_val, right[j]->la_value.bv_val, left[i]->la_value.bv_len) == 0)
				break; // to outer
		}
		if (!right[j])
			return false;
	}

	for (j = 0; right[j]; j++)
		;
	return i == j;
}

static bool _test(const char *left, const char *right, bool expected) {
	bool rv;
	LDAPDN a = NULL, b = NULL;
	ldap_str2dn(left, &a, 0);
	ldap_str2dn(right, &b, 0);
	rv = same_rdn(a[0], b[0]);
	ldap_dnfree(a);
	ldap_dnfree(b);
	return rv == expected;
}
struct test_info {
	const char *name;
	bool (*func)(void);
};
#define TEST(n, a, b, e) \
	static bool test_##e(void) { return _test(a, b, e)A; } \
	static struct test_info __test_##n __attribute((__section__("my_tests"))) __attribute((__used__)) = { \
		.name = "test_" # n, \
		.func = test_##n, \
	}

static bool test_same(void) {
	return _test("cn=foo,dc=univention,dc=de", "cn=foo,dc=univention,dc=de", true);
}
static bool test_different(void) {
	return _test("cn=foo,dc=univention,dc=de", "cn=bar,dc=univention,dc=de", false);
}
static bool test_same_rdn(void) {
	return _test("cn=foo+cn=bar,dc=univention,dc=de", "cn=foo+cn=bar,dc=univention,dc=de", true);
}
static bool test_different_rdn(void) {
	return _test("cn=foo+cn=baz,dc=univention,dc=de", "cn=bar+cn=baz,dc=univention,dc=de", false);
}
static bool test_subset_rdn(void) {
	return _test("cn=foo,dc=univention,dc=de", "cn=foo+cn=bar,dc=univention,dc=de", false);
}
static bool test_swapped_rdn(void) {
	return _test("cn=foo+cn=bar,dc=univention,dc=de", "cn=bar+cn=foo,dc=univention,dc=de", true);
}
extern struct test_info __start_my_tests;
extern struct test_info __stop_my_tests

#define TEST(n) { .name = "test_" # n, .func = test_##n }
struct tests {
	const char *name;
	bool (*func)(void);
} tests[] = {
	TEST(same),
	TEST(different),
	TEST(same_rdn),
	TEST(different_rdn),
	TEST(subset_rdn),
	TEST(swapped_rdn),
};
#define ARRAY_SIZE(x) (sizeof(x) / sizeof(*(x)))

int main(int argc, char *argv[]) {
	int i, failed = 0;
	for (i = 0; i < ARRAY_SIZE(tests); i++)
		if (tests[i].func()) {
			fprintf(stdout, "+%s\n", tests[i].name);
		} else {
			fprintf(stdout, "-%s\n", tests[i].name);
			failed++;
		}
	return failed;
}
