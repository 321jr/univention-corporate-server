#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
#
# Copyright 2017 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

import os
import json
import stat
import subprocess
import pylibmc
from univention.listener.handler_logging import info_to_syslog
from univention.listener.async.utils import get_all_configuration_classes
from univention.listener.async.memcached import (
	ListenerJob, MEMCACHED_SOCKET, MemcachedQueue, MemcachedVariable, TasksQueue, TASK_TYPE_HANDLER
)
from univention.listener.async.utils import entry_uuid_var_name


__memcached_persistence_path = '/var/cache/univention-directory-listener/memcached_persistence.json'
__memcached_process_pattern = '/usr/bin/memcached.*/var/lib/univention-directory-listener/memcached.socket'


memcache = pylibmc.Client([MEMCACHED_SOCKET], binary=True, behaviors={'tcp_nodelay': True, 'ketama': True})
data = dict()

for conf_class in get_all_configuration_classes():
	conf_obj = conf_class()
	if conf_obj.get_run_asynchronously():
		lm_name = conf_obj.get_name()
		info_to_syslog('Reading memcached data of listener module {!r}...'.format(lm_name))
		data[lm_name] = dict()
		tasks_queue = TasksQueue(memcache, lm_name, 'TasksQueue')
		with tasks_queue.lock():
			data[lm_name]['tasks_queue'] = tasks_queue.get()
			tasks_taken = MemcachedQueue(memcache, lm_name, 'TasksTaken')
			data[lm_name]['tasks_taken'] = tasks_taken.get()
			data[lm_name]['entryUUIDs'] = list()
			data[lm_name]['listener_jobs'] = dict()
			for task in tasks_queue.get():
				listener_job = ListenerJob.from_memcache(memcache, lm_name, task.id)
				data[lm_name]['listener_jobs'][task.id] = dict((k, v) for k, v in listener_job.__dict__.items() if not k.startswith('_'))
				if task.type == TASK_TYPE_HANDLER:
					euuid_var_name = entry_uuid_var_name(task.entry_uuid)
					euuid_var = MemcachedVariable(memcache, lm_name, euuid_var_name)
					with euuid_var.lock():
						data[lm_name]['entryUUIDs'].append({
							'lm_name': lm_name,
							'var_name': euuid_var_name,
							'value': euuid_var.get()
						})

with open(__memcached_persistence_path, 'wb') as fp:
	os.fchown(fp.fileno(), 0, 0)
	os.fchmod(fp.fileno(), stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP)
	json.dump(data, fp, indent=4)

subprocess.call(['pkill', '-f', __memcached_process_pattern])
