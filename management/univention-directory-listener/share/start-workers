#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
#
# Copyright 2017-2018 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

import inspect
from univention.listener.handler_logging import info_to_syslog
from univention.listener.async.utils import get_all_configuration_classes
from univention.listener.async.tasks import async_listener_job


for conf_class in get_all_configuration_classes():
	conf_obj = conf_class()
	if conf_obj.get_run_asynchronously():
		parallelism = conf_obj.get_parallelism()
		info_to_syslog('Poking {!r} Celery workers of listener module {!r}...'.format(parallelism, conf_obj.get_name()))
		lm_path = inspect.getsourcefile(conf_class)
		for num in range(parallelism, ):
			result = async_listener_job.apply_async(args=[lm_path, conf_obj.get_name()], queue=conf_obj.get_name())
			info_to_syslog('Poked worker {}/{} with task ID {!r}.'.format(num + 1, parallelism, result.id))
