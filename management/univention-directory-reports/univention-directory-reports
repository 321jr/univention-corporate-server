#!/usr/bin/python2.4 -OO
# -*- coding: utf-8 -*-
#
# Univention Reports
#  Creates reports from LaTeX templates
#
# Copyright (C) 2007 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# Binary versions of this file provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

import univention.debug as ud

import locale, os, sys, string, time

from optparse import OptionParser

import os
import socket
import signal
import sys

import univention.directory.reports as udr

import univention_baseconfig

baseConfig = univention_baseconfig.baseConfig()
baseConfig.load()

def main():
	parser = OptionParser( usage = 'usage: %prog -m <module> [options] dn1 dn2 ...' )
	parser.add_option( '-u', '--user', action = 'store',
					   dest = 'user', default = None,
					   help = 'location of the configuration file' )
	parser.add_option( '-p', '--password', action = 'store',
					   dest = 'password', default = None,
					   help = 'location of the configuration file' )
	parser.add_option( '-H', '--header', action = 'store',
					   dest = 'header', default = None,
					   help = 'file containing the header for the report' )
	parser.add_option( '-F', '--footer', action = 'store',
					   dest = 'footer', default = None,
					   help = 'file containing the footer for the report' )
	parser.add_option( '-s', '--server', action = 'store',
					   dest = 'server', default = baseConfig.get( 'ldap/server/name', 'localhost' ),
					   help = 'LDAP server' )
	parser.add_option( '-b', '--base', action = 'store',
					   dest = 'base', default = baseConfig.get( 'ldap/base', '' ),
					   help = 'LDAP base' )
	parser.add_option( '-m', '--module', action = 'store',
					   dest = 'module', default = None,
					   help = 'admin module defining the report to generate' )
	parser.add_option( '-r', '--report', action = 'store',
					   dest = 'report', default = None,
					   help = 'Name of the report to use' )
	parser.add_option( '-l', '--list', action = 'store_true',
					   dest = 'list_reports', default = False,
					   help = 'List names of available reports' )
	parser.add_option( '-n', '--no-cleanup', action = 'store_true',
					   dest = 'no_cleanup', default = False,
					   help = 'do not remove the temporary LaTeX file (for debugging)' )
	parser.add_option( '-c', '--config', action = 'store',
					   dest = 'config', default = '/etc/univention/directory/reports/config.ini',
					   help = 'location of the configuration file' )
	parser.add_option( '-d', '--debug', action = 'store', type = 'int',
					   dest = 'debug', default = 0,
					   help = 'if given than debugging is activated and set to the specified level' )

	( options, args ) = parser.parse_args()

	if not options.user or not options.password:
		try:
			pwdfile = '/etc/machine.secret'
			options.user = baseConfig[ 'ldap/hostdn' ]
			if baseConfig[ 'server/role' ] == 'domaincontroller_master':
				pwdfile = '/etc/ldap.secret'
				options.user = 'cn=admin,%s' % baseConfig[ 'ldap/base' ]
			fd = open( pwdfile, 'r' )
			options.password = fd.readline()[ : -1 ]
			fd.close()
		except:
			print >>sys.stderr, "error: user and/or password not specified"
			parser.print_help()
			sys.exit( 1 )

	if not options.module:
		print >>sys.stderr, "error: module not specified (use -m)"
		parser.print_help()
		sys.exit( 1 )

	ud.init( '/var/log/univention/directory-reports.log', 1, 1 )
	ud.set_level( ud.ADMIN, options.debug )

	cfg = udr.Config()
	if options.list_reports:
		print 'Reports for module:', options.module
		for name in cfg.get_report_names( options.module ):
			print ' -', name
		sys.exit( 0 )

	udr.admin.connect( options.user, options.password, host = options.server,
					   base = options.base, start_tls = 0 )

	template = cfg.get_report( options.module, options.report )
	doc = udr.Document( template, header = cfg.get_header(), footer = cfg.get_footer() )
	tmpfile = doc.create_source( args )
	if template.endswith( '.tex' ):
		pdffile = doc.create_pdf( tmpfile )
	else:
		pdffile = None
	if options.no_cleanup:
		print 'kept temporary source file at', tmpfile
	else:
		os.unlink( tmpfile )
		if template.endswith( '.tex' ):
			os.unlink( tmpfile[ : -4 ] + '.aux' )
			os.unlink( tmpfile[ : -4 ] + '.log' )

	if pdffile:
		print 'create PDF file:', pdffile
		sys.exit( 0 )
	elif template.endswith( '.csv' ):
		print 'create CSV file:', tmpfile
	else:
		print >>sys.stderr, "error: PDF file could not be created"
		sys.exit( 1 )

if __name__ == "__main__":
	main()
