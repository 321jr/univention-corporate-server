#!/usr/bin/python2.6
# -*- coding: utf-8 -*-
#
# Univention Configuration Registry
#  build UMC module
#
# Copyright 2011 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

import os
import sys

import json
import polib

import univention.debhelper as dh_ucs
import univention.dh_umc as dh_umc

"""Helps installing UMC modules. It parses a RFC 822 file called
$(package).umc-modules and installs the specified components of a module
into the correct directories."""

JSON_HEADER = '// This file is generated by dh-umc-module-build and should not be edited!'

def create_po_file( po_file, package, files, language = 'python' ):
	"""Create a PO file for a defined set of files"""
	message_po = '%s/messages.po' % os.path.dirname( po_file )

	if os.path.isfile( message_po ):
		os.unlink( message_po )
	dh_ucs.doIt( 'xgettext', '--force-po', '--from-code=UTF-8', '--sort-output', '--package-name=%s' % package, '--msgid-bugs-address=packages@univention.de', '--copyright-holder=Univention GmbH', '--language', language, '-o', message_po, files )
	if os.path.isfile( po_file ):
		dh_ucs.doIt( 'msgmerge', '--update', '--sort-output', po_file, message_po )
		if os.path.isfile( message_po ):
			os.unlink( message_po )
	else:
		dh_ucs.doIt( 'mv', message_po, po_file )

def create_mo_file( po_file ):
	dh_ucs.doIt( 'msgfmt', '--check', '--output-file', po_file.replace( '.po', '.mo' ), po_file )

def create_json_file( po_file ):
	json_file = po_file.replace( '.po', '.json' )
	json_fd = open( json_file, 'w' )
	pofile = polib.pofile( po_file )
	data = {}
	for entry in pofile:
		data[ entry.msgid ] = entry.msgstr

	json_fd.write( json.dumps( data ) )
	json_fd.close()

def do_package( package ):
	try:
		modules = dh_umc.read_modules( package )
	except AttributeError, e:
		print >>sys.stderr, str( e )
		sys.exit( 1 )

	# build python PO files
	for module in modules:
		for po_file in module.python_po_files:
			create_po_file( po_file, package, *module.python_files )
			create_mo_file( po_file )

	# build javascript PO files
	for module in modules:
		for po_file in module.js_po_files:
			# using python as language seems to work better than perl
			create_po_file( po_file, package, module.js_filename, 'python' )
			create_json_file( po_file )

if __name__ == '__main__':
	for package in dh_ucs.binary_packages():
		do_package( package )
