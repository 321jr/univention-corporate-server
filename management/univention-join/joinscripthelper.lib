# Helper lib for writing join-scripts.
#
# Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# Binary versions of this file provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# Usage:
#--------------------------------------------------------------------
#VERSION=x
#. /usr/share/univention-join/joinscripthelper.lib
#joinscript_init
#
# Do fancy stuff
#
#joinscript_save_current_version
#--------------------------------------------------------------------

JS_SCRIPT_FULLNAME="`readlink -f \"$0\"`"
JS_STATUSFILE=/var/univention-join/status

#The Value 0 means, that the script has never been executed.
JS_LAST_EXECUTED_VERSION=
JS_PACKAGE=`echo ${JS_SCRIPT_FULLNAME%.inst} | sed 's/.*\///' | sed 's/^[0-9]\+//'`

#Returns 0 if any version of the script has been previously executed, 1 otherwise
function joinscript_check_any_version_executed () {
	touch $JS_STATUSFILE
	test -n "`grep -e "${JS_PACKAGE} v[0-9]\+ successful" $JS_STATUSFILE`"
}

#Requires 1 parameter specifying the version to check for.
#
#Returns 0 if the specified version of the script has been previously
#executed, 1 otherwise.
function joinscript_check_specific_version_executed () {
	local version=$1

	touch $JS_STATUSFILE
	test -n "`grep "${JS_PACKAGE} v${version} successful" $JS_STATUSFILE`"
}

#Requires 2 parameters specifying the minimum and maximum version to check for.
#
#Returns 0 if any version of the script within the specified range has been previously
#executed, 1 otherwise.
function joinscript_check_version_in_range_executed () {
	local min=$1
	local max=$2

	for i in $( seq $min $max )
	do
		joinscript_check_specific_version_executed $i && return 0
	done

	return 1
}

#Permanently stores the current execution of the script
function joinscript_save_current_version () {
	joinscript_check_specific_version_executed $VERSION \
		|| echo "${JS_PACKAGE} v${VERSION} successful" >>$JS_STATUSFILE

	if [ $VERSION -gt $JS_LAST_EXECUTED_VERSION ]; then
		JS_LAST_EXECUTED_VERSION=$VERSION
	fi
}

function joinscript_get_last_executed_version () {

	joinscript_check_any_version_executed
	if [ $? -ne 0 ]; then
		JS_LAST_EXECUTED_VERSION=0
		return 0
	fi

	JS_LAST_EXECUTED_VERSION=`grep -e "${JS_PACKAGE} v[0-9]\+ successful" $JS_STATUSFILE \
		| sed s/"^${JS_PACKAGE} v"// \
		| sed s/" successful$"// \
		| sort -n \
		| tail -n 1`

	return 0
}

function joinscript_check_joinstatus () {
	if ! test -e "/usr/share/univention-join/.joined"; then
		echo "The server has not joined yet"
		exit 1
	fi
}

function joinscript_check_already_executed () {
	joinscript_check_specific_version_executed $VERSION && exit 1
}

function joinscript_init () {
	joinscript_check_joinstatus
	joinscript_check_already_executed
	joinscript_get_last_executed_version
}
