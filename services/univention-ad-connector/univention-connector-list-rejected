#!/usr/bin/python2.4 -OO
# -*- coding: utf-8 -*-
#
# Univention AD Connector
#  List all rejected objects
#
# Copyright (C) 2004-2010 Univention GmbH
#
# http://www.univention.de/
# 
# All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# Binary versions of this file provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


import sys, string, os, time, signal, shutil

import ldap, traceback
import univention
import univention.connector
import univention.connector.ad

import univention_baseconfig

CONFIGBASENAME="connector"

def usage():
    print ""
    print "This is univention-connector-list-rejected"
    print ""
    print "Univention-connector-list-rejected tries to summarize the objects which are rejected due to sync failures"
    print ""
    print "Usage:"
    print "univention-connector-list-rejected [-c configbase]"
    print ""
    print "The default configbase is \"connector\"."


if len(sys.argv) > 1:
	if sys.argv[1] in ['-h', '--help', '-?']:
		usage()
		sys.exit(0)
	if sys.argv[1] == '-c':
		if len(sys.argv) != 3:
			print "ERROR: option \"-c\" needs an argument!"
			usage()
			sys.exit(1)
		else:
			CONFIGBASENAME = sys.argv[2]
			print "use configbase %s" % CONFIGBASENAME
	

sys.path=['/etc/univention/%s/ad/'%CONFIGBASENAME]+sys.path
import mapping

def main():
	baseConfig=univention_baseconfig.baseConfig()
	baseConfig.load()

	if not baseConfig.has_key('%s/ad/ldap/host' % CONFIGBASENAME):
		print '%s/ad/ldap/host not set' % CONFIGBASENAME
		sys.exit(1)
	if not baseConfig.has_key('%s/ad/ldap/port' % CONFIGBASENAME):
		print '%s/ad/ldap/port not set' % CONFIGBASENAME
		sys.exit(1)
	if not baseConfig.has_key('%s/ad/ldap/base' % CONFIGBASENAME):
		print '%s/ad/ldap/base not set' % CONFIGBASENAME
		sys.exit(1)
	if not baseConfig.has_key('%s/ad/ldap/binddn' % CONFIGBASENAME):
		print '%s/ad/ldap/binddn not set' % CONFIGBASENAME
		sys.exit(1)
	if not baseConfig.has_key('%s/ad/ldap/bindpw' % CONFIGBASENAME):
		print '%s/ad/ldap/bindpw not set' % CONFIGBASENAME
		sys.exit(1)

	if not baseConfig.has_key('%s/ad/ldap/certificate' % CONFIGBASENAME) and not (baseConfig.has_key('%s/ad/ldap/ssl' % CONFIGBASENAME) and baseConfig['%s/ad/ldap/ssl' % CONFIGBASENAME] == 'no') :
		print '%s/ad/ldap/certificate not set' % CONFIGBASENAME
		sys.exit(1)

	if not baseConfig.has_key('%s/ad/listener/dir' % CONFIGBASENAME):
		print '%s/ad/listener/dir not set' % CONFIGBASENAME
		sys.exit(1)

	if not baseConfig.has_key('%s/ad/retryrejected' % CONFIGBASENAME):
		baseconfig_retry_rejected=10
	else:
		baseconfig_retry_rejected=baseConfig['%s/ad/retryrejected' % CONFIGBASENAME]

	ad_ldap_bindpw=open(baseConfig['%s/ad/ldap/bindpw' % CONFIGBASENAME]).read()
	if ad_ldap_bindpw[-1] == '\n':
		ad_ldap_bindpw=ad_ldap_bindpw[0:-1]
	
	poll_sleep=int(baseConfig['%s/ad/poll/sleep' % CONFIGBASENAME])


	#try:
	ad=univention.connector.ad.ad( CONFIGBASENAME,
				       mapping.ad_mapping,
				       baseConfig,
				       baseConfig['%s/ad/ldap/host' % CONFIGBASENAME],
				       baseConfig['%s/ad/ldap/port' % CONFIGBASENAME],
				       baseConfig['%s/ad/ldap/base' % CONFIGBASENAME],
				       baseConfig['%s/ad/ldap/binddn' % CONFIGBASENAME],
				       ad_ldap_bindpw,
				       baseConfig['%s/ad/ldap/certificate' % CONFIGBASENAME],
				       baseConfig['%s/ad/listener/dir' % CONFIGBASENAME])
	#except:
	#	print "Failed to read Connector-Config. This may happen if the connector is running."		
	#	sys.exit(1)

	found_rejected = False
	print "\n\tUCS rejected\n"
	for filename,dn in ad.list_rejected_ucs():
		found_rejected = True
		print "%s" % univention.connector.ad.encode_attrib(dn).encode('latin')
		print "\t-> %s" % univention.connector.ad.encode_attrib(ad.get_dn_by_ucs(dn)).encode('latin')

	print "\n\tAD rejected\n"
	for id,dn in ad.list_rejected():
		found_rejected = True
		print "%s" % univention.connector.ad.encode_attrib(dn).encode('latin')
		print "\t-> %s" % univention.connector.ad.encode_attrib(ad.get_dn_by_con(dn)).encode('latin')

	if not found_rejected:
		print "\nThere may be no rejected DNs if the connector is in progress, to be\nsure stop the connector before running this script.\n"

	print "\n\tlast synced USN: %s" % ad.get_lastUSN()	

if __name__ == "__main__":
	main()

