#!/usr/bin/python2.4
#
# Univention Apache
#  helper script for handling registrations of apache modules
#
# Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# Binary versions of this file provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA	 02110-1301	 USA

import sys, os, string, glob, re

class module_db:
	file = '/var/lib/univention-apache/modules'
	file2= '/etc/apache/httpd.conf'
	#file = '/tmp/modules'
	packages = {}
	modified = 0
	def __init__(self):
		if os.path.isfile(self.file):
			fp = open(self.file, 'r')
			for line in fp.readlines():
				line = line[0:-1]
				entry = line.split(' ')
				self.packages[entry[0]] = entry[1:]
			fp.close()

	def register(self, package, modules):
		self.modified = 1
		if self.packages.has_key(package):
			for module in modules:
				if not module in self.packages[package]:
					self.packages[package].append(module)
		else:
			self.packages[package] = modules

	def unregister(self, package, modules):
		self.modified = 1
		if self.packages.has_key(package):
			for module in modules:
				if module in self.packages[package]:
					self.packages[package].remove(module)

	def modules(self):
		modules = []
		for package in self.packages.keys():
			for module in self.packages[package]:
				if not module in modules:
					modules.append(module)
		return modules

	def commit(self):
		if self.modified == 0: return
		fp = open(self.file, 'w')
		for package in self.packages.keys():
			if len(self.packages[package]) > 0:
				fp.write(package + ' ' + string.join(self.packages[package], ' ')+'\n')
		fp.close()

class readinfo:
	module = ''
	loadmodule = ''
	def __init__(self, file):
		nameMatch = re.compile('^[0-9]+([^.]+).info$')
		loadmoduleMatch = re.compile('^LoadModule: .*$')
		self.module = nameMatch.findall(os.path.basename(file))[0]
		fp = open(file, 'r')
		for line in fp.readlines():
			if loadmoduleMatch.match(line) and line.find('1.3') != -1:
				self.loadmodule = line.replace(':', '')
		fp.close()

def usage():
	print 'usage: %s registermodule <package> <module>' % sys.argv[0]
	print '       %s unregistermodule <package> <module>' % sys.argv[0]
	print '       %s commit' % sys.argv[0]

if len(sys.argv) < 2:
	usage()
	sys.exit(1)

command = sys.argv[1]
arguments = sys.argv[2:]

mod = module_db()
if command == 'registermodule':
	package = arguments[0]
	modules = arguments[1:]
	mod.register(package, modules)
elif command == 'unregistermodule':
	package = arguments[0]
	modules = arguments[1:]
	mod.unregister(package, modules)
elif command == 'commit':
	modules = mod.modules()
	fp = open('/etc/univention/apache/10modules', 'w')
	files = glob.glob('/usr/lib/apache/1.3/*info');
	files.sort();
	for file in files:
		info = readinfo(file)
		if info.module in modules:
			fp.write(info.loadmodule)
	fp.close()
else:
	usage()
	sys.exit(1)

mod.commit()
