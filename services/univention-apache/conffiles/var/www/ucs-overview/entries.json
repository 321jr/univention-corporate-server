@!@
import re
import json
import socket
import fcntl
import struct
import urllib2
from univention.config_registry.interfaces import Interfaces


regEntries = re.compile(r'^ucs/web/overview/entries/(?P<category>[^/]+)/(?P<id>[^/]+)/(?P<key>[^/]+)(/(?P<lang>\w+))?$')
tracebacks = []

class LocalizedString:
	def __init__(self):
		self._data = dict(C='')

	def set(self, value, lang=None):
		lang = lang or 'C'
		self._data[lang] = value

	def toDict(self):
		if len(self._data.keys()) == 1 and 'C' in self._data:
			return self._data['C']
		return self._data

	def __str__(self):
		return str(self.toDict())

class Entry:
	def __init__(self):
		self._data = dict(icon='', priority='~', port_http='', port_https='', link=LocalizedString(), label=LocalizedString(), description=LocalizedString())

	def set(self, key, value, lang=None):
		lang = lang or 'C'
		if not key in self._data:
			return
		if isinstance(self._data[key], LocalizedString):
			self._data[key].set(value, lang)
		else:
			self._data[key] = value

	def toDict(self):
		returnDict = dict()
		for ikey, ival in self._data.iteritems():
			if isinstance(self._data[ikey], LocalizedString):
				returnDict[ikey] = ival.toDict()
			else:
				returnDict[ikey] = ival
		return returnDict

	def __str__(self):
		return str(self.toDict())

def getEntries(category):
	entries = dict()
	for iucr, ival in configRegistry.items():
		m = regEntries.match(iucr)
		if not m:
			# no match
			continue

		cat = m.group('category')
		if not cat == category:
			continue

		id = m.group('id')
		if not id in entries:
			entries[id] = Entry()

		key = m.group('key')
		lang = m.group('lang')
		entries[id].set(key, ival, lang)

	# sort entries by priority and label
	entries = [ ival.toDict() for ival in entries.itervalues() ]
	entries.sort(key = lambda x: x.get('label'))
	entries.sort(key = lambda x: x.get('priority', float('inf')))
	return entries


def query_ec2(key):
	url = 'http://169.254.169.254/latest/meta-data/' + key
	try:
		result = urllib2.urlopen(url, timeout=2)
		value = result.read().strip()
		return value
	except (urllib2.URLError, socket.error, socket.timeout) as ex:
		tracebacks.append('%s %s' % (url, ex))
		return None


def get_ip_address(ifname):
	SIOCGIFADDR = 0x8915
	try:
		sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
		try:
			addr = socket.inet_ntoa(
				fcntl.ioctl(
					sock.fileno(),
					SIOCGIFADDR,
					struct.pack('256s', ifname[:15])
				)[20:24]
			)
		finally:
			sock.close()
	except IOError as ex:
		tracebacks.append('%s %s %d' % (ifname, ex, ex.errno))
		addr = None
	return addr


def get_ec2_address():
	# EC2 meta data
	if configRegistry.is_true('server/amazon'):
		for key in ('public-hostname', 'public-ipv4', 'local-ipv4'):
			addr = query_ec2(key)
			if addr:
				return addr

	# UCR
	DHCP = {'dhcp', 'dynamic'}
	interfaces = Interfaces(configRegistry)
	for ifname, iface in interfaces.all_interfaces:
		# IPv4
		addr = get_ip_address(ifname) if iface.type in DHCP else iface.ipv4_address()
		if addr:
			return '%s' % (addr.ip,)
		# IPv6
		addr = iface.ipv6_address()
		if addr:
			return '[%s]' % (addr.ip,)

	# runtime data
	for ifname, iface in interfaces.all_interfaces:
		addr = get_ip_address(ifname)
		if addr:
			return '%s' % (addr.ip,)

	# fallback
	return socket.getfqdn()


data = dict(
	service=getEntries('service'),
	admin=getEntries('admin'),
	ucr=dict(
		domainname=configRegistry['domainname'],
		hostname=configRegistry['hostname'],
		serveraddress=get_ec2_address(),
	),
	tracebacks=tracebacks,
)

print json.dumps(data, indent=2)
@!@
