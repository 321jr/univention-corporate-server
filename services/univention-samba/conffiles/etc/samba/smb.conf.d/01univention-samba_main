@%@UCRWARNING=# @%@

[global]
@!@
print '\tdebug level\t= %s' % configRegistry.get('samba/debug/level', 0)
print '\tlogging\t\t= file'
print '\tmax log size\t= %s\n' % configRegistry.get('samba/max_log_size', 0)

max_open_files = configRegistry.get('samba/max_open_files')
if max_open_files:
	print '\tmax open files = %s' % max_open_files
if configRegistry.get('samba/serverstring'):
	print '\tserver string = %s' % configRegistry['samba/serverstring']
else:
	print '\tserver string = %h univention corporate server'

for key, smbstring in [('samba/interfaces','interfaces'),
		       ('samba/charset/dos', 'dos charset'),
		       ('samba/charset/unix', 'unix charset'),
		       ('samba/charset/display', 'display charset'),
		       ('samba/enable-privileges', 'enable privileges'),
			   ('samba/interfaces/bindonly', 'bind interfaces only'),]:
	if configRegistry.get(key):
		print '\t%s = %s' % (smbstring, configRegistry[key])

if configRegistry.get('samba/socket_options'):
	print '\tsocket options = %s' % configRegistry['samba/socket_options']

print '\tmachine password timeout\t= %d' % int(configRegistry.get('samba/machine_password_timeout', 0))

if configRegistry.is_true('samba/acl/allow/execute/always', True):
	print '\tacl allow execute always = True'

if configRegistry.get('samba/register/exclude/interfaces') and not configRegistry.is_true('samba/interfaces/bindonly', False):
	import netifaces
	interfaces = netifaces.interfaces()
	for ignore in configRegistry['samba/register/exclude/interfaces'].split(' '):
		interfaces.remove(ignore)
	# also ignore appliance-mode-temporary interface
	for iface in interfaces[:]:
		if configRegistry.get('interfaces/%s/type' % iface, '') == 'appliance-mode-temporary':
			interfaces.remove(iface)
	if interfaces:
		print
		print '\t# ignore interfaces in samba/register/exclude/interfaces'
		print '\tbind interfaces only = yes'
		print '\tinterfaces = %s' % ' '.join(interfaces)
@!@
