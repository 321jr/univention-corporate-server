# Warning: This file is auto-generated and might be overwritten by
#          univention-config-registry.
#          Please edit the following file instead:
# Warnung: Diese Datei wurde automatisch generiert und kann durch
#          univention-config-registry Ã¼berschrieben werden.
#          Bitte bearbeiten Sie an Stelle dessen die folgende Datei:
#
# 	/etc/univention/templates/files/etc/dhcp3/dhcpd.conf
#

include "/etc/dhcp3/univention.conf";
include "/etc/dhcp3/local.conf";

option ldap-servers code 128 = array of ip-address;
option ldap-base code 129 = string;

ldap-server "@%@ldap/server/name@%@";
ldap-port 389;
ldap-username "";
ldap-password "";
@!@
if baseConfig.has_key('dhcpd/ldap/base') and baseConfig['dhcpd/ldap/base']:
	print 'ldap-base-dn "%s";'%baseConfig['dhcpd/ldap/base']
else:
	print 'ldap-base-dn "cn=dhcp,%s";'%baseConfig['ldap/base']
@!@ldap-method dynamic;

# dynamic DNS: with external name server only!
@!@
import os

if configRegistry.get( 'dhcpd/ddns', 'no' ).lower() in ( 'yes', 'true' ):
	print 'ddns-updates on;'
	print 'ddns-update-style %s;' % configRegistry.get( 'dhcpd/ddns/style', 'interim' )
	print 'ddns-domainname "%s";' % configRegistry.get( 'dhcpd/ddns/domainname',
													   configRegistry[ 'domainname' ] )
	hostname_default = 'binary-to-ascii (16, 8, "-",substring (hardware, 1, 12))'
	print 'ddns-hostname = %s;' % configRegistry.get( 'dhcpd/ddns/hostname', hostname_default )
	if configRegistry.get( 'dhcpd/ddns/static', 'no' ).lower() in ( 'yes', 'true' ):
		print 'update-static-leases true;'
	else:
		print 'update-static-leases false;'

	# security?
	security = None
	if configRegistry.get( 'dhcpd/ddns/security', 'no' ).lower() in ( 'yes', 'true' ):
		security = configRegistry.get( 'dhcpd/ddns/security/key', 'DHCP_UPDATER' )
		secret = configRegistry.get( 'dhcpd/ddns/security/secret', None )
		if secret and os.path.exists( secret ):
			secret = open( secret ).readline()
			if secret[ -1 ] == '\n':
				secret = secret[ : -1 ]
		else:
			secret = ''
		print '''
key %s {
	algorithm %s;
	secret "%s";
}

''' % ( security, configRegistry.get( 'dhcpd/ddns/security/algorithm', 'HMAC-MD5.SIG-ALG.REG.INT' ),
		secret )

	# zones to update
	zones = []
	for key in configRegistry.keys():
		if not key.startswith( 'dhcpd/ddns/zone/' ):
			continue
		num, info = key[ 16 : ].split( '/', 1 )
		if not num in zones:
			zones.append( num )

	for zone in zones:
		prefix = 'dhcpd/ddns/zone/' + zone
		if configRegistry.has_key( prefix + '/name' ) and \
		   configRegistry.has_key( prefix + '/primary' ):
			if security:
				key = 'key %s;' % security
			else:
				key = ''
			print '''
zone %s {
	primary %s;
	%s
}

''' % ( configRegistry[ prefix + '/name' ], configRegistry[ prefix + '/primary' ], key )

@!@
