@%@BCWARNING=#@%@

include /etc/squid/local.conf

access_log /var/log/squid/access.log
hierarchy_stoplist cgi-bin ?
acl QUERY urlpath_regex cgi-bin \?
no_cache deny QUERY
refresh_pattern ^ftp:		1440	20%	10080
refresh_pattern ^gopher:	1440	0%	1440
refresh_pattern .		0	20%	4320
acl all src 0.0.0.0/0.0.0.0
acl manager proto cache_object
acl localhost src 127.0.0.1/255.255.255.255
acl to_localhost dst 127.0.0.0/8

@!@

eth_devices = []
allowLocalNetExists = False

for key,value in configRegistry.items():
	if key.startswith('interfaces/eth'):
		k = key.split("/")[1:2][0]
		if k not in eth_devices:
			eth_devices.append(k)

if configRegistry.get( 'squid/cache', 'yes' ).lower() in ( 'no', 'false' ):
   print '''
cache deny all
cache_dir null /tmp
'''

if 'yes' in [ configRegistry.get('squid/virusscan', ''), configRegistry.get('squid/contentscan', '') ]:
   	# dansguardian runs on the default port in this case
	try:
	        squidport = int(configRegistry.get('squid/httpport', '3128'))+1
	        print "http_port %s" % squidport
	except:
   		print "http_port 3129"
else:
	transparent = ''
	if configRegistry.get('squid/transparentproxy','no').lower() in ['yes', 'true']:
		transparent = 'transparent'
	print "http_port %s %s" % ( configRegistry.get('squid/httpport', '3128'), transparent )

print ''

authentication = False
if configRegistry['squid/ldapauth'] == 'yes':
	authentication = True
	print 'auth_param basic program /usr/lib/squid/ldap_auth -h '+configRegistry['ldap/server/name']+' -b "'+configRegistry['ldap/base']+'" -s sub -f "(&(objectClass=organizationalPerson)(uid=%s))"'
	print 'auth_param basic children %s'  % configRegistry.get( 'squid/ldapauth/children', '5' )
	print 'auth_param basic realm Univention Proxy Server'
	print 'auth_param basic credentialsttl 2 hours'

print ''

if configRegistry['squid/ntlmauth'] == 'yes':
	authentication = True
	print 'auth_param ntlm program /usr/bin/ntlm_auth --helper-protocol=squid-2.5-ntlmssp'
	print 'auth_param ntlm children %s' % configRegistry.get( 'squid/ntlmauth/children', '10' )
	if not configRegistry.get('squid/ntlmauth/keepalive', '').lower() in ['no', 'false']:
		print 'auth_param ntlm keep_alive on'

print ''

if configRegistry['squid/basicauth'] == 'yes':
	authentication = True
	print 'auth_param basic program /usr/bin/ntlm_auth --helper-protocol=squid-2.5-basic'
	print 'auth_param basic children %s'  % configRegistry.get( 'squid/basicauth/children', '5' )
	print 'auth_param basic realm Univention Proxy Server'
	print 'auth_param basic credentialsttl 2 hours'

for port in configRegistry.get('squid/webports', '80 443 21').split(" "):
	print "acl web_ports port %s" % port
print 'http_access deny !web_ports'

if authentication:
	print "# Allow access based on ldap group membership"
	groups = configRegistry.get('squid/ldapauth/groups', 'www-access')
	groupString=""
	for group in groups.split(';'):
		groupString += '%s ' % group
	print 'external_acl_type unix_group %LOGIN /usr/lib/squid/squid_unix_group -p'
	print 'acl inetusers external unix_group %s' % groupString
	print 'http_access deny !inetusers'

	print '''

acl AuthorizedUsers proxy_auth REQUIRED
http_access allow AuthorizedUsers
'''
else:
	print "# Allow access based on networks"

	# Create list of source networks. This includes all interfaces as well as
	# additional networks indicated by squid/allowfrom
	# If virus or content scanning is enabled, only access from localhost is allowed

	allowFrom=[]

	if not 'yes' in [ configRegistry.get('squid/virusscan', ''), configRegistry.get('squid/contentscan', '') ]:

		for i in eth_devices:
			if configRegistry.get('interfaces/%s/address' % i):
				if configRegistry.get('interfaces/%s/network' % i):
					 if configRegistry.get('interfaces/%s/netmask' % i):
						allowFrom.append((
							configRegistry['interfaces/%s/network' % i], 
							configRegistry['interfaces/%s/netmask' % i]))

		addNetworks=configRegistry.get('squid/allowfrom', '')

		if not addNetworks=='':
			for entry in addNetworks.split(" "):
				try:
					network, netmask = entry.split('/')
					allowFrom.append( (network, netmask) )
				except:
					print "# wrong entry in squid/allowfrom: %s " % entry

		count = 0
		for network, netmask in allowFrom:
			print 'acl localnet%s src %s/%s' % (count, network, netmask)
			count+=1

		print 'http_access allow localhost'
		for rulenum in range(0, count):
			print 'http_access allow localnet%s' % rulenum
			allowLocalNetExists = True
	else:
		print 'http_access allow localhost'


print "acl purge method PURGE"
print "acl CONNECT method CONNECT"
print ""
print "http_access allow manager localhost"
print "http_access deny manager"
print "http_access allow purge localhost"
print "http_access deny purge"
print "#http_access deny !Safe_ports"
print "#http_access deny CONNECT !SSL_ports"

if configRegistry['squid/allow/localnet'] == 'yes':
	print 'http_access allow localhost'
	
	if not allowLocalNetExists:
		ifaceCounter = 0
		for i in eth_devices:
			if configRegistry.get('interfaces/%s/address' % i):
				if configRegistry.get('interfaces/%s/network' % i):
					 if configRegistry.get('interfaces/%s/netmask' % i):
						print 'http_access allow localnet%s' % ifaceCounter
						ifaceCounter += 1

print ""
print "http_access deny all"
print "http_reply_access allow all"
print "icp_access allow all"
print "coredump_dir /var/spool/squid"
print ""
print "forwarded_for off"

if configRegistry['squid/parent/host']:
	print 'cache_peer '+configRegistry['squid/parent/host']+' parent '+configRegistry.get( 'squid/parent/port', '3128' ) +' 0 default'
	print 'always_direct allow to_localhost'

	directTo=[]

	for i in eth_devices:
			if configRegistry.get('interfaces/%s/address' % i):
				if configRegistry.get('interfaces/%s/network' % i):
					 if configRegistry.get('interfaces/%s/netmask' % i):
						directTo.append((
							configRegistry['interfaces/%s/network' % i],
							configRegistry['interfaces/%s/netmask' % i]))
		
	directNetworks = configRegistry.get( 'squid/parent/directnetworks', '' )

	if not directNetworks == '':
		for entry in directNetworks.split(" "):
			try:
				directTo.append( ( entry.split('/')[0], entry.split('/')[1] ) )
			except:
				print "# wrong entry in squid/parent/directnetworks: %s " % entry
		
	count = 0
	for network, netmask in directTo:
		print 'acl to_localnet%s dst %s/%s' % (count, network, netmask)
		count+=1
		
	for rulenum in range(0, count):
		print 'always_direct allow to_localnet%s' % rulenum

	print 'never_direct allow all'

try:
	ipauth_ttl = int( configRegistry.get( 'squid/ipauth/ttl', '0' ) )
except:
	ipauth_ttl = 0
if ipauth_ttl:
	print 'authenticate_ip_shortcircuit_ttl %d seconds' % ipauth_ttl

	for right in ( 'deny', 'allow' ):
		i = 0
		ipauth_acls = configRegistry.get( 'squid/ipauth/%s' % right, '' )
		if not ipauth_acls:
			continue
		acl_prefix = 'ipauth_%s_%%d' % right
		for network in ipauth_acls.split( ' ' ):
			acl_name = acl_prefix % i
			i += 1
			print 'acl %s src %s' % ( acl_name, network )
			print 'authenticate_ip_shortcircuit_access %s %s' % ( right, acl_name )

@!@
