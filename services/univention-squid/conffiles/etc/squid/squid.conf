# Warning: This file is auto-generated and might be overwritten by
#          univention-baseconfig.
#          Please edit the files in the following directory instead:
# Warnung: Diese Datei wurde automatisch generiert und kann durch
#          univention-baseconfig ueberschrieben werden.
#          Bitte bearbeiten Sie an Stelle dessen die Dateien in
#          folgendem Verzeichnis:
#
#       /etc/univention/templates/files/etc/squid/squid.conf
#

# Standard options, general access control

@!@
if 'yes' in [ baseConfig.get('squid/virusscan', ''), baseConfig.get('squid/contentscan', '') ]:
   	# dansguardian runs on the default port in this case
   	print "http_port 3129"
else:
	print "http_port %s" % baseConfig.get('squid/httpport', '3128)
@!@

hierarchy_stoplist cgi-bin ?
acl QUERY urlpath_regex cgi-bin \?
no_cache deny QUERY
refresh_pattern ^ftp:		1440	20%	10080
refresh_pattern ^gopher:	1440	0%	1440
refresh_pattern .		0	20%	4320

acl localhost src 127.0.0.1/255.255.255.255
acl to_localhost dst 127.0.0.0/8

acl manager proto cache_object
acl purge method PURGE
http_access allow manager localhost
http_access deny manager
http_access allow purge localhost
http_access deny purge

@!@
for port in baseConfig.get('squid/webports', '80 443 21'):
	print "acl web_ports port %s" % port
@!@
http_access deny !web_ports


@!@
if baseConfig.get('squid/ldapauth') == 'yes':
	print "# Allow access based on ldap group membership"
	groups = baseConfig.get('squid/ldapauth/groups', 'www-access')
	groupString=""
	for group in groups.split(';'):
		groupString += '"%s" ' % group
	print 'auth_param basic program /usr/lib/squid/ldap_auth -h '+baseConfig['ldap/server/name']+' -b "'+baseConfig['ldap/base']+'" -s sub -f "(&(objectClass=organizationalPerson)(uid=%s))"'
	print 'auth_param basic children 5'
	print 'auth_param basic realm Univention proxy server'
	print 'auth_param basic credentialsttl 2 hours'
	print 'external_acl_type unix_group %LOGIN /usr/lib/squid/squid_unix_group -p'
	print 'acl inetusers external unix_group %s' % groupString
	print 'http_access allow inetusers'
else:

	print "# Allow access based on networks"

	# Create list of source networks. This includes all interfaces as well as
	# additional networks indicated by squid/allowfrom

	allowFrom=[]

	for i in range(0,4):
		if baseConfig['interfaces/eth%s/address' % i]:
			allowFrom.append(baseConfig['interfaces/eth%s/network' % i], baseConfig['interfaces/eth%s/netmask' % i])
		for j in range(0,4):
			if baseConfig['interfaces/eth%s_%s/address' % (i,j) ]:
				allowFrom.append(baseConfig['interfaces/eth%s_%s/network' % (i, j)], baseConfig['interfaces/eth%s_%s/netmask' % (i, j)])

	addNetworks=baseConfig.get('squid/allowfrom', '')

	for entry in addNetworks.split(" "):
		try:
			allowFrom.append( entry.split('/') )
		except:
			print "# wrong entry in squid/allowfrom: %s " % entry

	for network, netmask in allowFrom:
		print 'acl localnet%s src %s/%s' % (counter, network, netmask)
		count+=1

	print 'http_access allow localhost'
	for rulenum in range(0, count):
		print 'http_access allow localnet%s' % rulenum
@!@
http_access deny all
http_reply_access allow all
icp_access allow all
coredump_dir /var/spool/squid
forwarded_for off
@!@
if baseConfig.get('squid/parent/host', '') != '':
	print '# configuration for parent proxy
	print 'cache_peer %s parent %s 0 defauld' % ( baseConfig['squid/parent/host'], baseConfig.get('squid/parent/port', '3128) )
	print 'always_direct allow to_localhost'

	directTo=[]
	for i in range(0,4):
		if baseConfig['interfaces/eth%s/address' % i]:
			directTo.append(baseConfig['interfaces/eth%s/network' % i], baseConfig['interfaces/eth%s/netmask' % i])
		for j in range(0,4):
			if baseConfig['interfaces/eth%s_%s/address' % (i,j) ]:
				directTo.append(baseConfig['interfaces/eth%s_%s/network' % (i, j)], baseConfig['interfaces/eth%s_%s/netmask' % (i, j)])

		directNetworks=baseConfig.get('squid/parent/directnetworks', '')

		for entry in directNetworks.split(" "):
			try:
				directTo.append( entry.split('/') )
			except:
				print "# wrong entry in squid/parent/directnetworks: %s " % entry
		
		count = 0
		for network, netmask in allowFrom:
			print 'acl to_localnet%s dst %s/%s' % (counter, network, netmask)
			count+=1
		
		for rulenum in range(0, count):
			print 'always_direct allow to_localnet%s' % i
	print 'never_direct allow all'
@!@
