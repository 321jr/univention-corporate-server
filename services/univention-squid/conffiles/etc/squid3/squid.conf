@%@UCRWARNING=#@%@

include /etc/squid3/local.conf

access_log /var/log/squid3/access.log
cache_log /var/log/squid3/cache.log

@!@
if configRegistry['squid/debug/level']:
	print "debug_options %s" % ( configRegistry.get('squid/debug/level'))
@!@

# Recommended by Squid developers, causes the object to be handled directly
# by a cache 
hierarchy_stoplist cgi-bin ?

acl QUERY urlpath_regex cgi-bin \?
no_cache deny QUERY

# Adapted from squeeze default configuration
refresh_pattern ^ftp:		1440	20%	10080
refresh_pattern ^gopher:	1440	0%	1440
refresh_pattern -i (/cgi-bin/|\?) 0	0%	0
refresh_pattern .		0	20%	4320

acl manager proto cache_object
acl localhost src 127.0.0.1/32

@!@
if configRegistry.get( 'squid/cache', 'yes' ).lower() in ( 'no', 'false' ):
   print '''
cache deny all
cache_dir null /tmp
'''
@!@

@!@

import ipaddr

for i in range(0,4):
	if configRegistry['interfaces/eth%s/address' % i]:
		netprefix = ipaddr.IPv4Network(configRegistry['interfaces/eth%s/network' % i] + "/" + configRegistry['interfaces/eth%s/netmask' % i]).prefixlen
		print 'acl localnet%s src %s/%s' % (i, configRegistry['interfaces/eth%s/network' % i], netprefix)
	for j in range(0,4):
		if configRegistry['interfaces/eth%s_%s/address' % (i,j) ]:
			netprefix = ipaddr.IPv4Network(configRegistry['interfaces/eth%s_%s/network' % (i,j)] + "/" + configRegistry['interfaces/eth%s_%s/netmask' % (i,j)]).prefixlen
			print 'acl localnet%s%s src %s/%s' % (i,j, configRegistry['interfaces/eth%s_%s/network' % (i,j)], netprefix)
@!@
acl to_localhost dst 127.0.0.0/8
@!@

import ipaddr

for i in range(0,4):
	if configRegistry['interfaces/eth%s/address' % i]:
		netprefix = ipaddr.IPv4Network(configRegistry['interfaces/eth%s/network' % i] + "/" + configRegistry['interfaces/eth%s/netmask' % i]).prefixlen
		print 'acl to_localnet%s dst %s/%s' % (i, configRegistry['interfaces/eth%s/network' % i], netprefix)
	for j in range(0,4):
		if configRegistry['interfaces/eth%s_%s/address' % (i,j) ]:
			netprefix = ipaddr.IPv4Network(configRegistry['interfaces/eth%s_%s/network' % (i,j)] + "/" + configRegistry['interfaces/eth%s_%s/netmask' % (i,j)]).prefixlen
			print 'acl to_localnet%s%s dst %s/%s' % (i,j, configRegistry['interfaces/eth%s_%s/network' % (i,j)], netprefix)

print ''

if 'yes' in [ configRegistry.get('squid/virusscan', ''), configRegistry.get('squid/contentscan', '') ]:
   	# dansguardian runs on the default port in this case
	try:
	        squidport = int(configRegistry.get('squid/httpport', '3128'))+1
	        print "http_port %s" % squidport
	except:
   		print "http_port 3129"
else:
	transparent = ''
	if configRegistry.get('squid/transparentproxy','no').lower() in ['yes', 'true']:
		transparent = 'transparent'
	print "http_port %s %s" % ( configRegistry.get('squid/httpport', '3128'), transparent )

print ''

authentication = False
if configRegistry['squid/ldapauth'] == 'yes':
	authentication = True
	print 'auth_param basic program /usr/lib/squid3/squid_ldap_auth -h '+configRegistry['ldap/server/name']+' -b "'+configRegistry['ldap/base']+'" -D ' + configRegistry['ldap/hostdn'] + ' -W /etc/squid3.secret  -s sub -f "(&(objectClass=organizationalPerson)(uid=%s))"'
	print 'auth_param basic children %s'  % configRegistry.get( 'squid/ldapauth/children', '5' )
	print 'auth_param basic realm Univention Proxy Server'
	print 'auth_param basic credentialsttl 2 hours'

print ''

if configRegistry['squid/ntlmauth'] == 'yes':
	authentication = True
	print 'auth_param ntlm program /usr/bin/ntlm_auth --helper-protocol=squid-2.5-ntlmssp'
	print 'auth_param ntlm children %s' % configRegistry.get( 'squid/ntlmauth/children', '10' )
	if not configRegistry.get('squid/ntlmauth/keepalive', '').lower() in ['no', 'false']:
		print 'auth_param ntlm keep_alive on'

print ''

if configRegistry['squid/basicauth'] == 'yes':
	authentication = True
	print 'auth_param basic program /usr/bin/ntlm_auth --helper-protocol=squid-2.5-basic'
	print 'auth_param basic children %s'  % configRegistry.get( 'squid/basicauth/children', '5' )
	print 'auth_param basic realm Univention Proxy Server'
	print 'auth_param basic credentialsttl 2 hours'

for port in configRegistry.get('squid/webports', '80 443 21').split(" "):
	print "acl web_ports port %s" % port
print 'http_access deny !web_ports'

if authentication:
	print "# Allow access based on ldap group membership"
	groups = configRegistry.get('squid/ldapauth/groups', 'www-access')
	groupString=""
	for group in groups.split(';'):
		groupString += '%s ' % group
	print 'external_acl_type ldap_group %LOGIN /usr/lib/squid3/squid_ldap_group -h ' + configRegistry['ldap/server/name'] + ' -B "'+configRegistry['ldap/base'] + '" -b "'+configRegistry['ldap/base'] + '" -s sub -F "(uid=%s)" -D ' + configRegistry['ldap/hostdn'] + ' -W /etc/squid3.secret -f "(&(objectclass=univentionGroup)(uniqueMember=%u))"'
	print 'acl inetusers external ldap_group %s' % groupString
	print 'http_access deny !inetusers'

	print '''

acl AuthorizedUsers proxy_auth REQUIRED
http_access allow AuthorizedUsers
'''
else:
	print "# Allow access based on networks"

	# Create list of source networks. This includes all interfaces as well as
	# additional networks indicated by squid/allowfrom
	# If virus or content scanning is enabled, only access from localhost is allowed

	allowFrom=[]

	if not 'yes' in [ configRegistry.get('squid/virusscan', ''), configRegistry.get('squid/contentscan', '') ]:
		for i in range(0,4):
			if configRegistry['interfaces/eth%s/address' % i]:
				netprefix = ipaddr.IPv4Network(configRegistry['interfaces/eth%s/network' % i] + "/" + configRegistry['interfaces/eth%s/netmask' % i]).prefixlen
				allowFrom.append((configRegistry['interfaces/eth%s/network' % i], netprefix))
			for j in range(0,4):
				if configRegistry['interfaces/eth%s_%s/address' % (i,j) ]:
					netprefix = ipaddr.IPv4Network(configRegistry['interfaces/eth%s_%s/network' % (i,j)] + "/" + configRegistry['interfaces/eth%s_%s/netmask' % (i,j)]).prefixlen
					allowFrom.append( (configRegistry['interfaces/eth%s_%s/network' % (i, j)], netprefix ) )

		addNetworks=configRegistry.get('squid/allowfrom', '')

		if not addNetworks=='':
			for entry in addNetworks.split(" "):
				try:
					network, netmask = entry.split('/')
					allowFrom.append( (network, netmask) )
				except:
					print "# wrong entry in squid/allowfrom: %s " % entry

		count = 0
		for network, netmask in allowFrom:
			print 'acl localnet%s src %s/%s' % (count, network, netmask)
			count+=1

		print 'http_access allow localhost'
		for rulenum in range(0, count):
			print 'http_access allow localnet%s' % rulenum
	else:
		print 'http_access allow localhost'

@!@
acl purge method PURGE
acl CONNECT method CONNECT

http_access allow manager localhost
http_access deny manager
http_access allow purge localhost
http_access deny purge
#http_access deny !Safe_ports
#http_access deny CONNECT !SSL_ports
@!@
if configRegistry['squid/allow/localnet'] == 'yes':
	print 'http_access allow localhost'
	for i in range(0,4):
		if configRegistry['interfaces/eth%s/address' % i]:
			print 'http_access allow localnet%s' % i
		for j in range(0,4):
			if configRegistry['interfaces/eth%s_%s/address' % (i,j) ]:
				print 'http_access allow localnet%s%s' % (i,j)
@!@

http_access deny all
http_reply_access allow all
icp_access allow all
coredump_dir /var/spool/squid3

forwarded_for off
@!@
if configRegistry['squid/parent/host']:
	print 'cache_peer '+configRegistry['squid/parent/host']+' parent '+configRegistry.get( 'squid/parent/port', '3128' ) +' 0 default'
	print 'always_direct allow to_localhost'

	directTo=[]
	for i in range(0,4):
		if configRegistry['interfaces/eth%s/address' % i]:
			netprefix = ipaddr.IPv4Network(configRegistry['interfaces/eth%s/network' % i] + "/" + configRegistry['interfaces/eth%s/netmask' % i]).prefixlen
			directTo.append( ( configRegistry[ 'interfaces/eth%s/network' % i ], prefixlen ) )
		for j in range(0,4):
			if configRegistry['interfaces/eth%s_%s/address' % (i,j) ]:
				netprefix = ipaddr.IPv4Network(configRegistry['interfaces/eth%s_%s/network' % (i,j)] + "/" + configRegistry['interfaces/eth%s_%s/netmask' % (i,j)]).prefixlen
				directTo.append( ( configRegistry[ 'interfaces/eth%s_%s/network' % ( i, j ) ], netprefix ) )

	directNetworks = configRegistry.get( 'squid/parent/directnetworks', '' )

	if not directNetworks == '':
		for entry in directNetworks.split(" "):
			try:
				directTo.append( ( entry.split('/')[0], entry.split('/')[1] ) )
			except:
				print "# wrong entry in squid/parent/directnetworks: %s " % entry
		
	count = 0
	for network, netmask in directTo:
		print 'acl to_localnet%s dst %s/%s' % (count, network, netmask)
		count+=1
		
	for rulenum in range(0, count):
		print 'always_direct allow to_localnet%s' % rulenum

	print 'never_direct allow all'
@!@

