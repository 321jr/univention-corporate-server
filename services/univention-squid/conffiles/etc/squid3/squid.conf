@%@UCRWARNING=#@%@

include /etc/squid3/local.conf

access_log /var/log/squid3/access.log
cache_log /var/log/squid3/cache.log

cache_dir ufs /var/spool/squid3 256 16 256

# Recommended by Squid developers, causes the object to be handled directly
# by a cache 
hierarchy_stoplist cgi-bin ?

acl QUERY urlpath_regex cgi-bin \?
no_cache deny QUERY

# Adapted from squeeze default configuration
refresh_pattern ^ftp:		1440	20%	10080
refresh_pattern ^gopher:	1440	0%	1440
refresh_pattern -i (/cgi-bin/|\?) 0	0%	0
refresh_pattern .		0	20%	4320

@!@
import ipaddr

# globales
myNetworks = {}
allowFrom = []
allowAll = False
authentication = False
authenticationGroups = False

# get local networks
for key,value in configRegistry.items():
	if key.startswith('interfaces/eth'):
		interface = key.split("/")[1]
		network = configRegistry.get('interfaces/%s/network' % interface, "")
		netmask = configRegistry.get('interfaces/%s/netmask' % interface, "")
		address = configRegistry.get('interfaces/%s/address' % interface, "")
		if network and netmask and address:
			myNetworks[network] = netmask

for network in myNetworks:
	allowFrom.append((network, myNetworks[network]))

# get networks from ucs
for entry in configRegistry.get("squid/allowfrom", "").split(" "):
	if not entry:
		continue
	if entry == "all":
		allowAll = True
	else:
		try:
			network, netmask = entry.split('/')
			allowFrom.append( (network, netmask) )
		except:
			print "# wrong entry in squid/allowfrom: -%s-" % entry

print "# debug options"
if configRegistry['squid/debug/level']:
	print "debug_options %s" % ( configRegistry.get('squid/debug/level'))
	print 

if configRegistry.is_false('squid/cache'):
	print "cache deny all"

if configRegistry.is_true('squid/virusscan') or configRegistry.is_true('squid/contentscan'):
	# dansguardian runs on the default port in this case
	try:
		squidport = int(configRegistry.get('squid/httpport', 3128)) + 1
		print "http_port %d" % squidport
	except:
		print "http_port 3129"
else:
	transparent = 'transparent' if configRegistry.is_true('squid/transparentproxy') else ''
	print "http_port %d %s" % ( int(configRegistry.get('squid/httpport', 3128)), transparent )

print

# authentication
if configRegistry.is_true('squid/krb5auth'):
	authentication = True
	print "# auth negotiate"
	print 'auth_param negotiate program %s' % configRegistry.get("squid/krb5auth/tool", "/usr/lib/squid3/squid_ldap_ntlm_auth --gss-spnego --gss-spnego-strip-realm")
	print 'auth_param negotiate children %s' % configRegistry.get( 'squid/krb5auth/children', '10' )
	if configRegistry.is_true('squid/krb5auth/keepalive'):
		print 'auth_param negotiate keep_alive on'
	print
if configRegistry.is_true('squid/ntlmauth'):
	authentication = True
	print "# auth ntlm"
	print 'auth_param ntlm program %s' % configRegistry.get("squid/ntlmauth/tool", "/usr/lib/squid3/squid_ldap_ntlm_auth")
	print 'auth_param ntlm children %s' % configRegistry.get('squid/ntlmauth/children', '10')
	if configRegistry.is_true("squid/ntlmauth/keepalive"):
		print 'auth_param ntlm keep_alive on'
	else:
		print 'auth_param ntlm keep_alive off'
	print
if configRegistry.is_true('squid/basicauth'):
	authentication = True
	print "# auth basic"
	auth = 'auth_param basic program /usr/lib/squid3/squid_ldap_auth'
	auth += ' -h %s' % configRegistry.get("ldap/server/name", "")
	auth += ' -p %d' % int(configRegistry.get("ldap/server/port", 7389))
	auth += ' -b "%s"' % configRegistry.get("ldap/base", "")
	auth += ' -D "%s"' % configRegistry.get("ldap/hostdn", "")
	auth += ' -W /etc/squid3.secret'
	auth += ' -s sub'
	auth += ' -f "(&(objectClass=organizationalPerson)(uid=%s))"'
	print auth
	print 'auth_param basic children %s' % configRegistry.get( 'squid/basicauth/children', '5' )
	print 'auth_param basic realm Univention Proxy Server'
	print 'auth_param basic credentialsttl 2 hours'
	print

print "#########"
print "# acl's #"
print "#########"
print
print "# default"
print "acl manager proto cache_object"
print "acl localhost src 127.0.0.1/32"
print "acl to_localhost dst 127.0.0.0/8"
print "acl purge method PURGE"
print "acl CONNECT method CONNECT"
for port in configRegistry.get('squid/webports', '80 443 21').split(" "):
	print "acl web_ports port %d" % int(port)
print

if authentication:
	print "# authentication acl's"
	if configRegistry.get("squid/auth/allowed_groups"):
		authenticationGroups = True
		ldapGroup = 'external_acl_type ldap_group %LOGIN /usr/lib/squid3/squid_ldap_group'
		ldapGroup += ' -h %s' % configRegistry.get("ldap/server/name", "")
		ldapGroup += ' -p %d' % int(configRegistry.get("ldap/server/port", 7389))
		ldapGroup += ' -B "%s"' % configRegistry.get("ldap/base", "")
		ldapGroup += ' -b "%s"' % configRegistry.get("ldap/base", "")
		ldapGroup += ' -D "%s"' % configRegistry.get("ldap/hostdn", "")
		if configRegistry.is_true('squid/ntlmauth'):
			ldapGroup += ' -S'
		if configRegistry.is_true('squid/krb5auth'):
			ldapGroup += ' -K'
		ldapGroup += ' -s sub'
		ldapGroup += ' -F "(uid=%s)"'
		ldapGroup += ' -W /etc/squid3.secret'
		ldapGroup += ' -f "(&(objectclass=univentionGroup)(uniqueMember=%u)(cn=%g))"'
		print ldapGroup
		print 'acl inetusers external ldap_group "/etc/squid3/allowed_ldap_groups.conf"' 
	print "acl AuthorizedUsers proxy_auth REQUIRED"
	print

print "# network acl's"
count = 0
for network, netmask in allowFrom:
	netprefix = ipaddr.IPv4Network('%s/%s' % (network, netmask)).prefixlen
	print 'acl localnet%s src %s/%s' % (count, network, netprefix)
	count += 1
print


print "#########"
print "# rules #"
print "#########"
print
print "# default rules"
print "http_access deny !web_ports"
print "http_access allow manager localhost"
print "http_access deny manager"
print "http_access allow purge localhost"
print "http_access deny purge"
print

# local nets
if configRegistry.is_true("squid/allow/localnet"):
	count = 0
	print "# allow local networks (squid/allow/localnet)"
	print 'http_access allow localhost'
	for network in myNetworks.keys():
		print 'http_access allow localnet%s' % count
		count += 1
	print
# user authentication or
if authentication:
	if authenticationGroups:
		print "# allow access based on ldap group membership"
		print "http_access deny !inetusers"
	print '# allow authenticated users'
	print "http_access allow CONNECT AuthorizedUsers"
	print "http_access allow AuthorizedUsers"
	print
# based on networks
else:
	print "# allow access based on networks"
	print "http_access allow localhost"
	if configRegistry.is_false('squid/virusscan', True) and configRegistry.is_false('squid/contentscan', True):
		if allowAll:
			print "http_access allow all"
		else:
			count = 0
			for network, netmask in allowFrom:
				print 'http_access allow localnet%s' % count
				count += 1
	print

print "# deny the rest"
print "http_access deny all"
print "http_reply_access allow all"
print "icp_access allow all"

print
print "coredump_dir /var/spool/squid3"
print

redirect = configRegistry.get("squid/redirect")
if redirect:
	if redirect == "squidguard":
		print 'url_rewrite_program /usr/bin/squidGuard -c /etc/squid/squidGuard.conf'
	else:
		print 'url_rewrite_program %s' % redirect

print "forwarded_for %s" % configRegistry.get("squid/forwardedfor", "")

if configRegistry['squid/parent/host']:
	print 'cache_peer %s parent %d 0 %s' % (configRegistry['squid/parent/host'], int(configRegistry.get('squid/parent/port', 3128)), configRegistry.get('squid/parent/options', 'default'))

	print 'always_direct allow to_localhost'

	directTo = []

	for network in myNetworks:
		directTo.append((network, myNetworks[network]))

	directNetworks = configRegistry.get( 'squid/parent/directnetworks', '' )

	if directNetworks != '':
		for entry in directNetworks.split(" "):
			try:
				directTo.append( ( entry.split('/')[0], entry.split('/')[1] ) )
			except:
				print "# wrong entry in squid/parent/directnetworks: %s " % entry
		
	count = 0
	import ipaddr
	for network, netmask in directTo:
		prefix = ipaddr.IPv4Network('%s/%s' % (network, netmask)).prefixlen
		print 'acl to_localnet%s dst %s/%s' % (count, network, prefix)
		count += 1
		
	for rulenum in range(0, count):
		print 'always_direct allow to_localnet%s' % rulenum

	print 'never_direct allow all'

append_domain = configRegistry.get( 'squid/append_domain', '' )
if append_domain != '':
	print 'append_domain', append_domain

@!@
