# Warning: This file is auto-generated and might be overwritten by
#          univention-baseconfig.
#          Please edit the following file instead:
# Warnung: Diese Datei wurde automatisch generiert und kann durch
#          univention-baseconfig Ã¼berschrieben werden.
#          Bitte bearbeiten Sie an Stelle dessen die folgende Datei:
#
#       /etc/univention/templates/files/etc/gdm/gdm.conf
#
#
#
# GDM Configuration file.  You can use gdmsetup program to graphically
# edit this, or you can optionally just edit this file by hand.  Note that
# gdmsetup does not tweak every option here, just the ones most users
# would care about.  Rest is for special setups and distro specific
# tweaks.  If you edit this file, you should send the HUP or USR1 signal to
# the daemon so that it restarts: (Assuming you have not changed PidFile)
#   kill -USR1 `cat /var/run/gdm.pid`
# (HUP will make gdm restart immediately while USR1 will make gdm not kill
# existing sessions and will only restart gdm after all users log out)
#
# You can also use the gdm-restart and gdm-safe-restart scripts which just
# do the above for you.
#
# Have fun! - George

[daemon]
# Automatic login, if true the first local screen will automatically logged
# in as user as set with AutomaticLogin key.
AutomaticLoginEnable=@!@
if baseConfig.has_key('univentionAutoStartScript') and baseConfig['univentionAutoStartScript']:
	print 'true'
else:
	print 'false'
@!@
AutomaticLogin=autostart
# Timed login, useful for kiosks.  Log in a certain user after a certain
# amount of time
TimedLoginEnable=@!@
if baseConfig.has_key('univentionAutoStartScript') and baseConfig['univentionAutoStartScript']:
	print 'true'
else:
	print 'false'
@!@
TimedLogin=autostart
TimedLoginDelay=5
# A comma separated list of users that will be logged in without having
# to authenticate on local screens (not over xdmcp).  Note that 'root'
# is ignored and will always have to authenticate.
LocalNoPasswordUsers=@!@
if baseConfig.has_key('univentionAutoStartScript') and baseConfig['univentionAutoStartScript']=='1':
	print 'autostart'
else:
	pass
@!@
# If you are having trouble with using a single server for a long time and
# want gdm to kill/restart the server, turn this on
# Note: I've made this default to true now because there seem to be some
# issues ranging from some things not being reset in the X server to
# pam issues with the slave.  It is likely that this feature may be removed
# in the future and we're always going to do server restarts.
AlwaysRestartServer=true
# The gdm configuration program that is run from the login screen, you should
# probably leave this alone
GnomeDefaultSession=/etc/gdm/Sessions/Linux-Arbeitsplatz
# Default path to set.  The profile scripts will likely override this
DefaultPath=/bin:/usr/bin:/usr/bin/X11:/usr/X11R6/bin:/usr/local/bin:/usr/bin
# Default path for root.  The profile scripts will likely override this
RootPath=/sbin:/usr/sbin:/bin:/usr/bin:/usr/bin/X11:/usr/X11R6/bin:/usr/games:/usr/local/bin:/usr/bin
# To try to kill all clients started at greeter time or in the Init script.
# doesn't always work, only if those clients have a window of their own
KillInitClients=true
LogDir=/var/log/gdm

# This is our standard startup script.  A bit different from a normal
# X session, but it shares a lot of stuff with that.  See the provided
# default for more information.
@!@
if baseConfig.has_key('univentionAutoStartScript') and baseConfig['univentionAutoStartScript']:
	print 'BaseXsession=/etc/gdm/Autostart/%s' %  baseConfig['univentionAutoStartScript'].strip('"')
else:
	print 'BaseXsession=/etc/gdm/Xsession'
@!@
DefaultSession=Linux-Arbeitsplatz.desktop
# Fallback if home directory not writable
UserAuthFBDir=/tmp
UserAuthFile=.Xauthority
# The X server to use if we can't figure out what else to run.
StandardXServer=/usr/bin/X

[security]
# If any distributions ship with this one off, they should be shot
# this is only local, so it's only for say kiosk use, when you
# want to minimize possibility of breakin
@!@
if baseConfig.has_key('gdm/allowroot') and baseConfig['gdm/allowroot']:
        print 'AllowRoot=%s' %  baseConfig['gdm/allowroot'].strip('"')
else:
        print 'AllowRoot=false'
@!@
# If you want to be paranoid, turn this one off
@!@
if baseConfig.has_key('gdm/allowremoteroot') and baseConfig['gdm/allowremoteroot']:
        print 'AllowRemoteRoot=%s' %  baseConfig['gdm/allowremoteroot'].strip('"')
else:
        print 'AllowRemoteRoot=false'
@!@
# This will allow remote timed login
AllowRemoteAutoLogin=false

# XDMCP is the protocol that allows remote login.  If you want to log into
# gdm remotely (I'd never turn this on on open network, use ssh for such
# remote usage that).  You can then run X with -query <thishost> to log in,
# or -indirect <thishost> to run a chooser.  Look for the 'Terminal' server
# type at the bottom of this config file.
[xdmcp]
# Distributions: Ship with this off.  It is never a safe thing to leave
# out on the net.  Alternatively you can set up /etc/hosts.allow and
# /etc/hosts.deny to only allow say local access.
Enable=false

[gui]

[greeter]
SystemMenu=@!@
if baseConfig.has_key('gdm/menu/system') and baseConfig['gdm/menu/system']:
	print "%s" % baseConfig['gdm/menu/system']
else:
	print 'false'
@!@
#SecureSystemMenu diallows shutdown for normal users
SecureSystemMenu=@!@
if baseConfig.has_key('gdm/menu/securesystem') and ( baseConfig['gdm/menu/securesystem']):
	print "%s" % baseConfig['gdm/menu/securesystem']
else:
	print 'true'
@!@
# Type can be 0=None, 1=Image, 2=Color
BackgroundType=2
BackgroundImage=
BackgroundScaleToFit=true
BackgroundColor=#363047
# XDMCP session should only get a color, this is the sanest setting since
# you don't want to take up too much bandwidth
BackgroundRemoteOnlyColor=true
# Program to run to draw the background in the standard greeter.  Perhaps
# something like an xscreensaver hack or some such.
BackgroundProgram=
# if this is true then the background program is run always, otherwise
# it is only run when the BackgroundType is 0 (None)
RunBackgroundProgramAlways=false
# Show the chooser (you can choose a specific saved gnome session) session
@!@
if baseConfig.has_key('gdm/theme') and baseConfig['gdm/theme']:
	print 'GraphicalTheme=%s' % baseConfig['gdm/theme']
else:
	print 'GraphicalTheme=univention'
if baseConfig.has_key('gdm/theme/dir') and baseConfig['gdm/theme/dir']:
	print 'GraphicalThemeDir=%s' % baseConfig['gdm/theme/dir']
else:
	print 'GraphicalThemeDir=/usr/share/gdm/themes/'
@!@

[debug]
# This will enable debugging into the syslog, usually not neccessary
# and it creates a LOT of spew of random stuff to the syslog.  However it
# can be useful in determining when something is going very wrong.
Enable=false

[servers]
# Definition of the standard X server.
[server-Standard]
name=Standard server
command=/usr/bin/X :0 -audit 0 -deferglyphs 16 -br -auth /var/lib/gdm/:0.Xauth -nolisten tcp

