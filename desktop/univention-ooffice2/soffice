#!/bin/sh
#*************************************************************************
#
#   OpenOffice.org - a multi-platform office productivity suite
#
#   $RCSfile: soffice.sh,v $
#
#   $Revision: 1.28.48.1 $
#
#   last change: $Author: hr $ $Date: 2008/01/02 14:47:34 $
#
#   The Contents of this file are made available subject to
#   the terms of GNU Lesser General Public License Version 2.1.
#
#
#     GNU Lesser General Public License Version 2.1
#     =============================================
#     Copyright 2005 by Sun Microsystems, Inc.
#     901 San Antonio Road, Palo Alto, CA 94303, USA
#
#     This library is free software; you can redistribute it and/or
#     modify it under the terms of the GNU Lesser General Public
#     License version 2.1, as published by the Free Software Foundation.
#
#     This library is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#     Lesser General Public License for more details.
#
#     You should have received a copy of the GNU Lesser General Public
#     License along with this library; if not, write to the Free Software
#     Foundation, Inc., 59 Temple Place, Suite 330, Boston,
#     MA  02111-1307  USA
#
#*************************************************************************

#
# STAR_PROFILE_LOCKING_DISABLED=1
# export STAR_PROFILE_LOCKING_DISABLED
#

if test -z "$HOME"; then
    HOME=$(getent passwd $(whoami) | cut -d":" -f6)
fi

# helper functions
file_or_home_on_nfs()
{
    case $(stat -f -c %T $HOME) in nfs*|smb)
        return 0
    esac
    for i; do
       case "$i" in -*) continue; esac
       [ -f "$i" ] || continue
       case $(stat -f -c %T "$i") in nfs*|smb)
            return 0
       esac
    done
    return 1
}

# FIXME: this is conservative; allow more known working configurations
working_opengl_support()
{
    if [ -n "$(lsmod | awk '/^(fglrx|nvidia)/ {print $1}')" ]; then
	return 1
    fi
    return 0
}

# read config file

FILE_LOCKING=auto
OPENGL_SUPPORT=no
if [ -f /etc/openoffice/soffice.sh ]; then
    . /etc/openoffice/soffice.sh
fi

# sanity checks

case "$FILE_LOCKING" in
    auto|yes|no) ;;
    *)
        echo >&2 "unknown value '$FILE_LOCKING' for FILE_LOCKING parameter."
	FILE_LOCKING=auto
	echo >&2 "FILE_LOCKING reset to '$FILE_LOCKING'"
esac
    
case "$OPENGL_SUPPORT" in
    auto|yes|no) ;;
    *)
        echo >&2 "unknown value '$OPENGL_SUPPORT' for OPENGL_SUPPORT parameter."
	OPENGL_SUPPORT=auto
	echo >&2 "OPENGL_SUPPORT reset to '$OPENGL_SUPPORT'"
esac

# adjust environment

if [ -z "$SAL_ENABLE_FILE_LOCKING" ]; then
    case "$FILE_LOCKING" in
	auto)
        if ! file_or_home_on_nfs "$@"; then
            # file locking now enabled by default
	    SAL_ENABLE_FILE_LOCKING=1
	    export SAL_ENABLE_FILE_LOCKING
	fi
        ;;
	yes)
	SAL_ENABLE_FILE_LOCKING=1
	export SAL_ENABLE_FILE_LOCKING
        ;;
	no)
	SAL_ENABLE_FILE_LOCKING=0
	export SAL_ENABLE_FILE_LOCKING
    esac
fi

if [ -z "$SAL_NOOPENGL" ]; then
    case "$OPENGL_SUPPORT" in
	auto)
        if ! working_opengl_support; then
	    SAL_NOOPENGL=true
	    export SAL_NOOPENGL
	fi
        ;;
	yes)
	:
	unset SAL_NOOPENGL
	#export SAL_NOOPENGL
        ;;
	no)
	SAL_NOOPENGL=true
	export SAL_NOOPENGL
    esac
fi

sd_platform=`uname -s`

# the following test is needed on Linux PPC with IBM j2sdk142
if [ $sd_platform = "Linux" -a "`uname -m`" = "ppc" ] ; then
    JITC_PROCESSOR_TYPE=6
    export JITC_PROCESSOR_TYPE
fi

# set -x

# resolve installation directory
sd_cwd="`pwd`"
if [ -h "$0" ] ; then
	sd_basename=`basename "$0"`
 	sd_script=`ls -l "$0" | sed "s/.*${sd_basename} -> //g"`
    cd "`dirname "$0"`"
    cd "`dirname "$sd_script"`"
else
    cd "`dirname "$0"`"
fi

sd_prog="`pwd`"

cd ..
sd_binary=`basename "$0"`".bin"
sd_inst="`pwd`"

# change back directory
cd "$sd_cwd"

# check if all required patches are installed
if [ -x "$sd_prog/sopatchlevel.sh" ]; then
    "$sd_prog/sopatchlevel.sh"
    if [ $? -eq 1 ]; then
        exit 0
    fi
fi

# set search path for shared libraries
add_moz_lib=
for moz_lib_path in \
    $MOZILLA_LIBRARY_PATH \
    /usr/lib \
    /usr/lib/mozilla \
    /usr/lib/mozilla-firefox \
    /usr/lib/mozilla-thunderbird \
    /opt/mozilla/lib \
    /opt/MozillaFirefox/lib \
    /opt/MozillaThunderbird/lib; \
do
    if [ -f $moz_lib_path/libnss3.so ]; then
	case "$moz_lib_path" in
	    /usr/lib|/usr/lib64) : ;;
	    *) add_moz_lib=":$moz_lib_path"
	esac
	break
    fi
done
case $sd_platform in
  AIX)
    # this is a temporary hack until we can live with the default search paths
    if [ $LIBPATH ]; then
      SYSTEM_LIBPATH=$LIBPATH
      export SYSTEM_LIBPATH
      LIBPATH="$sd_prog$add_moz_lib":$LIBPATH
    else
      LIBPATH="$sd_prog$add_moz_lib"
    fi
    export LIBPATH
    ;;

  Darwin)
    # this is a temporary hack until we can live with the default search paths
    if [ "$DYLD_LIBRARY_PATH" ]; then
      SYSTEM_DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH
      export SYSTEM_DYLD_LIBRARY_PATH
      DYLD_LIBRARY_PATH="$sd_prog$add_moz_lib":$DYLD_LIBRARY_PATH
    else
      DYLD_LIBRARY_PATH="$sd_prog$add_moz_lib"
    fi
    export DYLD_LIBRARY_PATH
    ;;

  HP-UX)
    # this is a temporary hack until we can live with the default search paths
    if [ $SHLIB_PATH ]; then
      SYSTEM_SHLIB_PATH=$SHLIB_PATH
      export SYSTEM_SHLIB_PATH
      SHLIB_PATH="$sd_prog$add_moz_lib":/usr/openwin/lib:$SHLIB_PATH
    else
      SHLIB_PATH="$sd_prog$add_moz_lib":/usr/openwin/lib
    fi
    export SHLIB_PATH
    ;;

  IRIX*)
    # this is a temporary hack until we can live with the default search paths
    if [ $LD_LIBRARYN32_PATH ]; then
       SYSTEM_LD_LIBRARYN32_PATH=$LD_LIBRARYN32_PATH
       export SYSTEM_LD_LIBRARYN32_PATH
       LD_LIBRARYN32_PATH=:"$sd_prog$add_moz_lib":$LD_LIBRARYN32_PATH
    else
       LD_LIBRARYN32_PATH=:"$sd_prog$add_moz_lib"
    fi
    export LD_LIBRARYN32_PATH
    ;;

  *)
    # this is a temporary hack until we can live with the default search paths
    if [ $LD_LIBRARY_PATH ]; then
      SYSTEM_LD_LIBRARY_PATH=$LD_LIBRARY_PATH
      export SYSTEM_LD_LIBRARY_PATH
      LD_LIBRARY_PATH="$sd_prog$add_moz_lib":$LD_LIBRARY_PATH
    else
      LD_LIBRARY_PATH="$sd_prog$add_moz_lib"
    fi
    export LD_LIBRARY_PATH
    ;;
esac

#collect all bootstrap variables specified on the command line
#so that they can be passed as arguments to javaldx later on
for arg in $@
do
  case "$arg" in
       -env:*) BOOTSTRAPVARS=$BOOTSTRAPVARS" ""$arg";;
  esac
done

# extend the ld_library_path for java: javaldx checks the sofficerc for us
unset java_ld_library_path
if [ -x "$sd_prog/javaldx" ] ; then
    java_ld_library_path=`"$sd_prog/javaldx" $BOOTSTRAPVARS`
elif [ -x "$sd_prog/../ure-link/javaldx" ] ; then
    java_ld_library_path=`"$sd_prog/../ure-link/javaldx" $BOOTSTRAPVARS`
fi
if [ "$java_ld_library_path" != "" ] ; then
    case $sd_platform in
        AIX)
            LIBPATH=${java_ld_library_path}:${LIBPATH}
            ;;
        Darwin)
            DYLD_LIBRARY_PATH=${java_ld_library_path}:${DYLD_LIBRARY_PATH}
            ;;
        HP-UX)
            SHLIB_PATH=${java_ld_library_path}:${SHLIB_PATH}
            ;;
        IRIX*)
            LD_LIBRARYN32_PATH=${java_ld_library_path}:${LD_LIBRARYN32_PATH}
            ;;
        *)
            LD_LIBRARY_PATH=${java_ld_library_path}:${LD_LIBRARY_PATH}
            ;;
    esac
fi

# misc. environment variables
OPENOFFICE_MOZILLA_FIVE_HOME="$sd_inst/program"
export OPENOFFICE_MOZILLA_FIVE_HOME

if [ -z "$MOZILLA_CERTIFICATE_FOLDER" ]; then
	db=""
	dir=""
	for d in $HOME/.mozilla/firefox $HOME/.firefox $HOME/.mozilla-thunderbird $HOME/.mozilla/default $HOME/.mozilla; do
		if [ -z "$dir" -a -d "$d" ]; then
			dir=$d;
		fi;
	done
	if [ -n "$dir" ]; then
		cert8=`find $dir -name "cert8.db" | head -n 1`
		if [ -n "$cert8" ]; then
			profiledir=`dirname "$cert8"`
			MOZILLA_CERTIFICATE_FOLDER=$profiledir
			export MOZILLA_CERTIFICATE_FOLDER
		fi
	fi
fi

unset XENVIRONMENT

# uncomment line below to disable anti aliasing of fonts
# SAL_ANTIALIAS_DISABLE=true; export SAL_ANTIALIAS_DISABLE

# pagein
for sd_arg in ${1+"$@"} ; do
    case ${sd_arg} in
    -calc)
        sd_pagein_args="${sd_pagein_args:+${sd_pagein_args} }@pagein-calc"
        break;
        ;;
    -draw)
        sd_pagein_args="${sd_pagein_args:+${sd_pagein_args} }@pagein-draw"
        break;
        ;;
    -impress)
        sd_pagein_args="${sd_pagein_args:+${sd_pagein_args} }@pagein-impress"
        break;
        ;;
    -writer)
        sd_pagein_args="${sd_pagein_args:+${sd_pagein_args} }@pagein-writer"
        break;
        ;;
    *)
        ;;
    esac
done

sd_pagein_args="${sd_pagein_args:+${sd_pagein_args} }@pagein-common"
"${sd_prog}"/pagein -L"${sd_prog}" ${sd_pagein_args}

# set path so that other apps can be started from soffice just by name
if [ "$PATH" ]; then
  PATH="$sd_prog":$PATH
else
  PATH="$sd_prog"
fi
export PATH

# test for availability of the fast external splash
#if [ "$sd_binary" = "soffice.bin" -a -x "$sd_prog/oosplash.bin" ] ; then
#    sd_binary="oosplash.bin"
#fi

# execute soffice binary
"$sd_prog/$sd_binary" "$@" &
trap 'kill -9 $!' TERM
wait $!

while [ $? -eq 79 ]
do
	"$sd_prog/$sd_binary" ""$BOOTSTRAPVARS"" &
    wait $!
done

exit
