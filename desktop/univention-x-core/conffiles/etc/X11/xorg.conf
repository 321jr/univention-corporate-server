
Section "Files"
	FontPath        "/usr/share/fonts/X11/misc"
	FontPath        "/usr/X11R6/lib/X11/fonts/misc"
	FontPath        "/usr/share/fonts/X11/cyrillic"
	FontPath        "/usr/X11R6/lib/X11/fonts/cyrillic"
	FontPath        "/usr/share/fonts/X11/100dpi/:unscaled"
	FontPath        "/usr/X11R6/lib/X11/fonts/100dpi/:unscaled"
	FontPath        "/usr/share/fonts/X11/75dpi/:unscaled"
	FontPath        "/usr/X11R6/lib/X11/fonts/75dpi/:unscaled"
	FontPath        "/usr/share/fonts/X11/Type1"
	FontPath        "/usr/X11R6/lib/X11/fonts/Type1"
	FontPath        "/usr/share/fonts/X11/100dpi"
	FontPath        "/usr/X11R6/lib/X11/fonts/100dpi"
	FontPath        "/usr/share/fonts/X11/75dpi"
	FontPath        "/usr/X11R6/lib/X11/fonts/75dpi"
	# path to defoma fonts
	FontPath        "/var/lib/defoma/x-ttcidfont-conf.d/dirs/TrueType"
EndSection


@!@
print 'Section "Module"'
for mod in baseConfig.get('xorg/module/load', '').split(';'):
	print '\tLoad\t"%s"'%mod

if baseConfig.get('xorg/vnc/exporttype', '').lower() in [ 'true', 'yes', '1']:
	print'\tLoad\t"vnc"'
print 'EndSection'


print ''

print 'Section "ServerLayout"'
print '\tIdentifier "XFree86 Configured"'
print '\tScreen 0 "Screen0" 0 0'
print '\tInputDevice "Keyboard0" "CoreKeyboard"'

# old style variables
device_keylist = {}
for key in baseConfig.keys():
	if key.startswith('xorg/mouse/') and key.endswith('/device'):
		device_keylist[key.split('/')[2]]=baseConfig['xorg/mouse/%s/identifier' % key.split('/')[2]]
if device_keylist.has_key(baseConfig.get('xorg/mouse/device', None)):
	print '\tInputDevice\t"%s" "CorePointer"' % device_keylist[baseConfig.get('xorg/mouse/device', None)]
else:
	for key in baseConfig.keys():
		if key.startswith('xorg/mouse/') and key.endswith('/identifier'):
			print '\tInputDevice\t"%s" "CorePointer"' % baseConfig[key]

if baseConfig.get('xorg/vnc/exporttype', '').lower() in [ 'true', 'yes', '1'] and baseConfig.get('xorg/vnc/viewonly', '').lower() in [ 'false', 'no', '0' ]:
	print '\tInputDevice\t"vncMouse" "ExtraPointer"'
	print '\tInputDevice\t"vncKeyboard" "ExtraKeyboard"'
print 'EndSection'

print ''

print 'Section "ServerFlags"'
for key in baseConfig.keys():
	if key.startswith('xorg/serverflags/options/'):
		opt=key.split('xorg/serverflags/options/')[-1]
		if baseConfig[key] == "SET":
			print '\tOption\t"%s"'%opt
		else:
			print '\tOption\t"%s" "%s"'%(opt, baseConfig[key])
print 'EndSection'

print ''

print 'Section "InputDevice"'
print '\tIdentifier "Keyboard0"'
print '\tDriver "keyboard"'
print '\tOption "CoreKeyboard"'
for key in baseConfig.keys():
	if key.startswith('xorg/keyboard/options/'):
		opt=key.split('xorg/keyboard/options/')[-1]
		if baseConfig[key]:
			print '\tOption\t"%s" "%s"'%(opt, baseConfig[key])
		else:
			print '\tOption\t"%s"'%opt
print 'EndSection'

print ''

mouse_list = []
for key in baseConfig.keys():
	if key.startswith('xorg/mouse/'):
		name = key.split('/')[2]
		if not name in mouse_list:
			mouse_list.append(name)
for mouse in mouse_list:
	print 'Section "InputDevice"'
	for key in baseConfig.keys():
		if key.startswith('xorg/mouse/%s/' % mouse):
			if key.startswith('xorg/mouse/%s/options/' % mouse):
				opt=key.split('xorg/mouse/%s/options/' % mouse)[-1]
				print '\tOption\t"%s" "%s"' % (opt, baseConfig[key])
			else:
				opt=key.split('org/mouse/%s/' % mouse)[-1]
				if baseConfig[key] == "__SET__":
					print '\t%s' % (opt)
				elif not baseConfig[key] == "__NOT_SET__":
					print '\t%s\t"%s"' % (opt, baseConfig[key])
	print 'EndSection'
	print ''

if baseConfig.get('xorg/vnc/exporttype', '').lower() in [ 'true', 'yes', '1'] and baseConfig.get('xorg/vnc/viewonly', '').lower() in [ 'false', 'no', '0' ]:
	print 'Section "InputDevice"'
	print '        # vncKeyboard: keyboard actions from vnc'
	print '        Identifier "vncKeyboard"'
	print '         Driver "rfbkeyb"'
	print 'EndSection'
	print ''
	print 'Section "InputDevice"'
	print '        # vncMouse: mouse actions from vnc'
	print '        Identifier "vncMouse"'
	print '        Driver "rfbmouse"'
	print 'EndSection'
	print ''

print 'Section "Device"'
if baseConfig.get('xorg/vnc/exporttype', '').lower() in [ 'true', 'yes', '1'] and baseConfig.get('xorg/vnc/viewonly', '').lower() in [ 'false', 'no', '0' ]:
	print '\tOption\t"usevnc"'
	print '\tOption\t"rfbport" "5900"'
	print '\tOption\t"useraccept"'

	if baseConfig.get('xorg/vnc/viewonly', '').lower() in [ 'true', 'yes', '1' ]:
		print '\tOption\t"viewonly"'
for key in baseConfig.keys():
	if key.startswith('xorg/device/'):
		if key.startswith('xorg/device/options/'):
			opt=key.split('xorg/device/options/')[-1]
			if baseConfig[key] == "__SET__":
				print '\tOption\t"%s"' % (opt)
			elif not baseConfig[key] == "__NOT_SET__":
				print '\tOption\t"%s" "%s"' % (opt, baseConfig[key])
		else:
			opt=key.split('org/device/')[-1]
			if baseConfig[key] == "__SET__":
				print '\t%s' % (opt)
			elif not baseConfig[key] == "__NOT_SET__":
				if opt.lower() == 'driver' and baseConfig[key].lower() in ['atimisc', 'r128','radeon']:
					print '\t%s\t"ati"' % (opt)
				else:
					print '\t%s\t"%s"' % (opt, baseConfig[key])
	if baseConfig.get('xorg/device/driver', '') == 'trident' and not baseConfig.has_key('xorg/device/options/SWcursor'):
		print '\tOption     "SWcursor"'
print 'Identifier  "Card0"'
print 'EndSection'

print ''

print 'Section "Monitor"'
print '\tIdentifier  "Monitor0"'
for key in baseConfig.keys():
	if key.startswith('xorg/monitor/'):
			if key.startswith('xorg/monitor/options/'):
				opt=key.split('xorg/monitor/options/')[-1]
				if baseConfig[key] == "__SET__":
					print '\tOption\t"%s"' % (opt)
				elif not baseConfig[key] == "__NOT_SET__":
					print '\tOption\t"%s" "%s"' % (opt, baseConfig[key])
			elif key.startswith('xorg/monitor/modeline') or key.startswith('xorg/monitor/Modeline'):
				print '\tModeLine\t%s' % (baseConfig[key])
			else:
				opt=key.split('org/monitor/')[-1]
				if baseConfig[key] == "__SET__":
					print '\t%s' % (opt)
				elif not baseConfig[key] == "__NOT_SET__":
					if opt.lower() == 'displaysize':
						try:
							x = baseConfig[key].lower().split('x')[0]
							y = baseConfig[key].lower().split('x')[1]
							print '\tDisplaySize\t%s %s'%(x,y)
						except:
							print '\t#failed to set the DisplaySize'
							pass
					elif opt.lower() == 'gamma':
						gamma=baseConfig[key].strip().split(' ')
						print '\tGamma\t%s %s %s'%(gamma[0], gamma[1], gamma[2])
					else:
						print '\t%s\t%s' % (opt, baseConfig[key])
print 'EndSection'

print ''

print 'Section "Screen"'
print '\tIdentifier "Screen0"'
print '\tDevice     "Card0"'
print '\tMonitor    "Monitor0"'
for key in baseConfig.keys():
	if key.startswith('xorg/screen/'):
			if key.startswith('xorg/screen/options/'):
				opt=key.split('xorg/screen/options/')[-1]
				if baseConfig[key] == "__SET__":
					print '\tOption\t"%s"' % (opt)
				elif not baseConfig[key] == "__NOT_SET__":
					print '\tOption\t"%s" "%s"' % (opt, baseConfig[key])
			else:
				opt=key.split('xorg/screen/')[-1]
				if baseConfig[key] == "__SET__":
					print '\t%s' % (opt)
				elif not baseConfig[key] == "__NOT_SET__":
					print '\t%s\t%s' % (opt, baseConfig[key])
for depth in [ '1', '2', '4', '8', '16', '24', '32' ]:
	print '\tSubSection "Display"'
	print '\t\tDepth\t%s' % depth
	print '\t\tModes\t"%s"' % baseConfig.get('xorg/resolution', '1024x768')
	print '\tEndSubSection'

print 'EndSection'

section = False
for key in baseConfig.keys():
	if key.startswith('xorg/extension/'):
		if not section:
			print 'Section "Extension"'
			section = True
		if key.startswith('xorg/extension/options/'):
			opt=key.split('xorg/extension/options/')[-1]
			if baseConfig[key] == "__SET__":
				print '\tOption\t"%s"' % (opt)
			elif not baseConfig[key] == "__NOT_SET__":
				print '\tOption\t"%s" "%s"' % (opt, baseConfig[key])
		else:
			opt=key.split('org/extension/')[-1]
			if baseConfig[key] == "__SET__":
				print '\t%s' % (opt)
			elif not baseConfig[key] == "__NOT_SET__":
				print '\t%s\t%s' % (opt, baseConfig[key])
		
if section:
	print 'EndSection'

print ''

print 'Section "DRI"'
print '\tMode 0666'
print 'EndSection'

@!@
