Section "ServerLayout"
	Identifier "XFree86 Configured"
	Screen 0 "Screen0" 0 0
	InputDevice "Keyboard0" "CoreKeyboard"
@!@
# old style variables
if baseConfig.has_key('univentionXMouseDevice') and \
   baseConfig['univentionXMouseDevice'] in ["/dev/psaux", "/dev/ttyS0", "/dev/input/mice"]:
	if baseConfig['univentionXMouseDevice'] == '/dev/psaux':
		print '\tInputDevice "PS/2 Mouse" "CorePointer"'
	elif baseConfig['univentionXMouseDevice'] == '/dev/ttyS0':
		print '\tInputDevice "Serial Mouse" "CorePointer"'
	elif baseConfig['univentionXMouseDevice'] == '/dev/input/mice':
		print '\tInputDevice "USB Mouse" "CorePointer"'
# new style variables
elif baseConfig.has_key('X/Mouse/Device') and \
   baseConfig['X/Mouse/Device'] in ["/dev/psaux", "/dev/ttyS0", "/dev/input/mice"]:
	if baseConfig['X/Mouse/Device'] == '/dev/psaux':
		print '\tInputDevice "PS/2 Mouse" "CorePointer"'
	elif baseConfig['X/Mouse/Device'] == '/dev/ttyS0':
		print '\tInputDevice "Serial Mouse" "CorePointer"'
	elif baseConfig['X/Mouse/Device'] == '/dev/input/mice':
		print '\tInputDevice "USB Mouse" "CorePointer"'
# default
else:
	print '\tInputDevice "PS/2 Mouse" "CorePointer"'
	print '\tInputDevice "Serial Mouse" "CorePointer"'
	print '\tInputDevice "USB Mouse" "CorePointer"'

if baseConfig.has_key('univentionXVNCExportType') and \
   baseConfig.has_key('univentionXVNCExportViewonly') and \
   baseConfig['univentionXVNCExportType'] == '1' and \
   baseConfig['univentionXVNCExportViewonly'] == '0':
	print '\tInputDevice "vncMouse" "ExtraPointer"'
	print '\tInputDevice "vncKeyboard" "ExtraKeyboard"'
@!@
EndSection

Section "ServerFlags"
@!@
# general options
if baseConfig['X/ServerFlags/Options']:
	for opt in baseConfig['X/ServerFlags/Options'].split(';'):
		if baseConfig['X/ServerFlags/Options/%s' % opt]:
			print '\tOption "%s" "%s"'%(opt, baseConfig['X/ServerFlags/Options/%s' % opt])
		else:
			print '\tOption "%s"'%opt
	if not "AllowMouseOpenFail" in baseConfig['X/ServerFlags/Options'].split(';'):
		# for sake of compatiblity
		print '\tOption "AllowMouseOpenFail" "true"'
else:
	print '\tOption "AllowMouseOpenFail"  "true"'
@!@
EndSection

Section "Files"
	RgbPath      "/usr/X11R6/lib/X11/rgb"
	ModulePath   "/usr/X11R6/lib/modules"
	FontPath     "/usr/X11R6/lib/X11/fonts/misc:unscaled"
	FontPath     "/usr/X11R6/lib/X11/fonts/misc"
	FontPath     "/usr/X11R6/lib/X11/fonts/75dpi:unscaled"
	FontPath     "/usr/X11R6/lib/X11/fonts/75dpi"
	FontPath     "/usr/X11R6/lib/X11/fonts/100dpi:unscaled"
	FontPath     "/usr/X11R6/lib/X11/fonts/100dpi"
	FontPath     "/usr/X11R6/lib/X11/fonts/Speedo"
	FontPath     "/usr/X11R6/lib/X11/fonts/PEX"
	FontPath     "/usr/X11R6/lib/X11/fonts/cyrillic"
	FontPath     "/usr/share/fonts/truetype"
# Additional fonts: Locale, Gimp, TTF...
#	FontPath     "/usr/X11R6/lib/X11/fonts/latin2/75dpi"
#	FontPath     "/usr/X11R6/lib/X11/fonts/latin2/100dpi"
# True type and type1 fonts are also handled via xftlib, see /etc/X11/XftConfig!
#	FontPath     "/usr/X11R6/lib/X11/fonts/Type1"
#	FontPath     "/usr/share/fonts/ttf/western"
#	FontPath     "/usr/share/fonts/ttf/decoratives"
#	FontPath     "/usr/share/fonts/truetype/openoffice"
#	FontPath     "/usr/X11R6/lib/X11/fonts/defoma/CID"
#	FontPath     "/usr/X11R6/lib/X11/fonts/defoma/TrueType"
EndSection

Section "Module"
	Load  "ddc"  # ddc probing of monitor
	Load  "GLcore"
	Load  "dbe"
	Load  "dri"
	Load  "extmod" # used to crash kcminit when using vesa driver
	Load  "glx"
	Load  "xie"
	Load  "pex5"
	Load  "bitmap" # bitmap-fonts
	Load  "speedo"
	Load  "type1"
	Load  "freetype"
	Load  "record"
@!@

if baseConfig.has_key('X/Module/Load'):
	for mod in baseconfig['X/Module/Load'].split(';'):
		print '\tLoad "%s"'%mod

if baseConfig.has_key('univentionXVNCExportType') and baseConfig['univentionXVNCExportType'] == '1' or \
   baseConfig.has_key('X/VNC/ExportType') and baseConfig['X/VNC/ExportType'] == '1':
	print'\tLoad  "vnc"'
@!@
EndSection

Section "InputDevice"
	Identifier "Keyboard0"
	Driver "keyboard"
	Option "CoreKeyboard"
@!@
if baseConfig.has_key('X/Keyboard/Options') and baseConfig['X/Keyboard/Options']:
	options = baseConfig['X/Keyboard/Options'].split(';')
	
	# necessassary default values
	if not 'XkbLayout' in options:
		options.append['XkbLayout']
		baseConfig['X/Keyboard/Options/XkbLayout'] = baseConfig['univentionXKeyboardLayout']
	if not 'XkbVariant' in options:
		if baseConfig['univentionXKeyboardVariant']:
			options.append['XkbVariant']
			baseConfig['X/Keyboard/Options/XkbVariant'] = baseConfig['univentionXKeyboardVariant']
	if not 'XkbRules' in options:
		options.append['XkbRules']
		baseConfig['X/Keyboard/Options/XkbRules'] = "xorg"
	if not 'XkbModel' in options:
		options.append['XkbModel']
		baseConfig['X/Keyboard/Options/XkbModel'] = "pc105"
		
	# options
	for opt in options:
		if baseConfig['X/Keyboard/Options/%s' % opt]:
			print '\tOption "%s" "%s"'%(opt, baseConfig['X/ServerFlags/Options/%s' % opt])
		else:
			print '\tOption "%s"'%opt

else:
	layout = ""
	try:
		layout = baseConfig['univentionXKeyboardLayout']
		print('\tOption "XkbLayout" "%s"' % layout)
	except:
		pass
	variant = ""
        try:
                variant = baseConfig['univentionXKeyboardVariant']
                print('\tOption "XkbVariant" "%s"' % variant)
        except:
                pass

	print('\tOption "XkbRules" "xorg"')
	print('\tOption "XkbModel" "pc105"')
@!@
EndSection

Section "InputDevice"
        Identifier "Serial Mouse"
        Driver "mouse"
        Option "Protocol" "@%@univentionXMouseProtocol@%@"
        Option "Device" "/dev/ttyS0"
@!@
if baseConfig.has_key('X/Mouse/Options') and baseConfig['X/Mouse/Options']:
	options = baseConfig['X/Mouse/Options'].split(';')
	
	# necessassary default values
	if not 'Emulate3Buttons' in options:
		options.append['Emulate3Buttons']
		baseConfig['X/Mouse/Options/Emulate3Buttons'] = "true"
	if not 'Emulate3Timeout' in options:
		options.append['Emulate3Timeout']
		baseConfig['X/Mouse/Options/Emulate3Timeout'] = "70"
	if not 'SendCoreEvents' in options:
		options.append['SendCoreEvents']
		baseConfig['X/Mouse/Options/SendCoreEvents'] = "true"
		
	# options
	for opt in options:
		if baseConfig['X/Keyboard/Options/%s' % opt]:
			print '\tOption "%s" "%s"'%(opt, baseConfig['X/ServerFlags/Options/%s' % opt])
		else:
			print '\tOption "%s"'%opt
else:
	print('\tOption "Emulate3Buttons" "true"')
	print('\tOption "Emulate3Timeout" "70"')
	print('\tOption "SendCoreEvents" "true"')
@!@

EndSection

Section "InputDevice"
        Identifier "Serial Mouse ttyS1"
        Driver "mouse"
        Option "Protocol" "@%@univentionXMouseProtocol@%@"
        Option "Device" "/dev/ttyS1"
@!@
if baseConfig.has_key('X/Mouse/Options') and baseConfig['X/Mouse/Options']:
	options = baseConfig['X/Mouse/Options'].split(';')
	
	# necessassary default values
	if not 'Emulate3Buttons' in options:
		options.append['Emulate3Buttons']
		baseConfig['X/Mouse/Options/Emulate3Buttons'] = "true"
	if not 'Emulate3Timeout' in options:
		options.append['Emulate3Timeout']
		baseConfig['X/Mouse/Options/Emulate3Timeout'] = "70"
	if not 'SendCoreEvents' in options:
		options.append['SendCoreEvents']
		baseConfig['X/Mouse/Options/SendCoreEvents'] = "true"
		
	# options
	for opt in options:
		if baseConfig['X/Keyboard/Options/%s' % opt]:
			print '\tOption "%s" "%s"'%(opt, baseConfig['X/ServerFlags/Options/%s' % opt])
		else:
			print '\tOption "%s"'%opt
else:
	print('\tOption "Emulate3Buttons" "true"')
	print('\tOption "Emulate3Timeout" "70"')
	print('\tOption "SendCoreEvents" "true"')
@!@
EndSection

Section "InputDevice"
        Identifier "PS/2 Mouse"
        Driver "mouse"
        Option "Protocol" "@%@univentionXMouseProtocol@%@"
        Option "Device" "/dev/psaux"
@!@
if baseConfig.has_key('X/Mouse/Options') and baseConfig['X/Mouse/Options']:
	options = baseConfig['X/Mouse/Options'].split(';')
	
	# necessassary default values
	if not 'Emulate3Buttons' in options:
		options.append['Emulate3Buttons']
		baseConfig['X/Mouse/Options/Emulate3Buttons'] = "true"
	if not 'Emulate3Timeout' in options:
		options.append['Emulate3Timeout']
		baseConfig['X/Mouse/Options/Emulate3Timeout'] = "70"
	if not 'SendCoreEvents' in options:
		options.append['SendCoreEvents']
		baseConfig['X/Mouse/Options/SendCoreEvents'] = "true"
	if not 'Buttons' in options:
		options.append['Buttons']
		baseConfig['X/Mouse/Options/Buttons'] = "5"
	if not 'ZAxisMapping' in options:
		options.append['ZAxisMapping']
		baseConfig['X/Mouse/Options/ZAxisMapping'] = "4 5"
		
	# options
	for opt in options:
		if baseConfig['X/Keyboard/Options/%s' % opt]:
			print '\tOption "%s" "%s"'%(opt, baseConfig['X/ServerFlags/Options/%s' % opt])
		else:
			print '\tOption "%s"'%opt
else:
	print('\tOption "Emulate3Buttons" "true"')
	print('\tOption "Emulate3Timeout" "70"')
	print('\tOption "SendCoreEvents" "true"')
	print('\tOption "Buttons" "5"')
	print('\tOption "ZAxisMapping" "4 5"')
@!@
EndSection

Section "InputDevice"
        Identifier "USB Mouse"
        Driver "mouse"
        Option "Device" "/dev/input/mice"
        Option "Protocol" "@%@univentionXMouseProtocol@%@"
@!@
if baseConfig.has_key('X/Mouse/Options') and baseConfig['X/Mouse/Options']:
	options = baseConfig['X/Mouse/Options'].split(';')
	
	# necessassary default values
	if not 'SendCoreEvents' in options:
		options.append['SendCoreEvents']
		baseConfig['X/Mouse/Options/SendCoreEvents'] = "true"
	if not 'Buttons' in options:
		options.append['Buttons']
		baseConfig['X/Mouse/Options/Buttons'] = "5"
	if not 'ZAxisMapping' in options:
		options.append['ZAxisMapping']
		baseConfig['X/Mouse/Options/ZAxisMapping'] = "4 5"
		
	# options
	for opt in options:
		if baseConfig['X/Keyboard/Options/%s' % opt]:
			print '\tOption "%s" "%s"'%(opt, baseConfig['X/ServerFlags/Options/%s' % opt])
		else:
			print '\tOption "%s"'%opt
else:
	print('\tOption "SendCoreEvents" "true"')
	print('\tOption "Buttons" "5"')
	print('\tOption "ZAxisMapping" "4 5"')
@!@
EndSection

@!@
if (baseConfig.has_key('univentionXVNCExportType') and baseConfig.has_key('univentionXVNCExportViewonly') and \
    baseConfig['univentionXVNCExportType'] == '1' and baseConfig['univentionXVNCExportViewonly'] == '0') or \
    (baseConfig.has_key('X/VNC/ExportType') and baseConfig.has_key('X/VNC/ExportViewonly') and \
    baseConfig['X/VNC/ExportType'] == '1' and baseConfig['X/VNC/ExportViewonly'] == '0'):
	print 'Section "InputDevice"'
	print '        # vncKeyboard: keyboard actions from vnc'
	print '        Identifier "vncKeyboard"'
	print '         Driver "rfbkeyb"'
	print 'EndSection'
	print ''
	print 'Section "InputDevice"'
	print '        # vncMouse: mouse actions from vnc'
	print '        Identifier "vncMouse"'
	print '        Driver "rfbmouse"'
	print 'EndSection'
@!@

Section "Device"
	### Available Driver options are:-
	# SWCursor is needed for some ati and radeon cards
        #Option     "SWcursor"
        #Option     "HWcursor"
        #Option     "NoAccel"
        #Option     "ShowCache"
        #Option     "ShadowFB"
        #Option     "UseFBDev"
        #Option     "Rotate"
@!@
if (baseConfig.has_key('univentionXVNCExportType') and baseConfig['univentionXVNCExportType'] == '1') or \
   (baseConfig.has_key('X/VNC/ExportType') and baseConfig['X/VNC/ExportType'] == '1'):
	print '        Option "usevnc"'
	print '        Option "rfbport" "5900"'
	print '        Option "useraccept"'

	if (baseConfig.has_key('univentionXVNCExportViewonly') and baseConfig['univentionXVNCExportViewonly'] == '1') or \
	   (baseConfig.has_key('X/VNC/ExportViewonly') and baseConfig['X/VNC/ExportViewonly'] == '1'):
		print '        Option "viewonly"'

if baseConfig['univentionXModule']=="trident":
        print '\tOption     "SWcursor"'
if baseConfig['univentionXVideoRam']:
        print '\tOption     "VideoRam"      "%s"' % baseConfig['univentionXVideoRam']
@!@
	Identifier  "Card0"
@!@
xmodule = baseConfig['univentionXModule']
if xmodule.lower() in ['atimisc', 'r128','radeon']:
	xmodule = 'ati'
print	'Driver      "%s"'%xmodule
@!@
	VendorName  "All"
	BoardName   "All"
#	BusID       "PCI:1:0:0"
EndSection

Section "Monitor"
	Identifier  "Monitor0"
@!@

# general options
if baseConfig['X/Monitor/Options']:
	for opt in baseConfig['X/Monitor/Options'].split(';'):
		if baseConfig['X/Monitor/Options/%s' % opt]:
			print '\tOption "%s" "%s"'%(opt, baseConfig['X/Monitor/Options/%s' % opt])
		else:
			print '\tOption "%s"'%opt

# Horizontal Sync
if baseConfig['X/Monitor/XHSync']:
	print '\tHorizSync '+baseConfig['X/Monitor/XHSync']
elif baseConfig['univentionXHSync']:
	print '\tHorizSync '+baseConfig['univentionXHSync']

# Vertical Refresh
if baseConfig['X/Monitor/XVRefresh']:
	print '\tVertRefresh '+baseConfig['X/Monitor/XVRefresh']
if baseConfig['univentionXVRefresh']:
	print '\tVertRefresh '+baseConfig['univentionXVRefresh']

# Display Size
dispSize=""
if baseConfig.has_key('X/Monitor/DisplaySize') and baseConfig['X/Monitor/DisplaySize']:
	dispSize=baseConfig['X/Monitor/DisplaySize']
elif baseConfig.has_key('univentionXDisplaySize') and baseConfig['univentionXDisplaySize']:
	dispSize=baseConfig['univentionXDisplaySize']
if dispSize!="":
	if 'x' in dispSize.lower():
		try:
			x = dispSize.lower().split('x')[0]
			y = dispSize.lower().split('x')[1]
			print 'DisplaySize %s %s'%(x,y)
		except:
			pass

# Gamma
if baseConfig.has_key('X/Monitor/Gamma') and baseConfig['X/Monitor/Gamma']:
	gamma=baseConfig['X/Monitor/Gamma'].strip().split(' ')
	if len(gamma)==3:
		print '\tGamma %s %s %s'%(gamma[0], gamma[1], gamma[2])
@!@
	Option      "DPMS"
EndSection

Section "Screen"
	Identifier "Screen0"
	Device     "Card0"
	Monitor    "Monitor0"
@!@
# general options
if baseConfig['X/Screen/Options']:
	for opt in baseConfig['X/Screen/Options'].split(';'):
		if baseConfig['X/Screen/Options/%s' % opt]:
			print '\tOption "%s" "%s"'%(opt, baseConfig['X/Screen/Options/%s' % opt])
		else:
			print '\tOption "%s"'%opt

# color depth
if baseConfig['univentionXColorDepth']:
	print "\tDefaultColorDepth %s" % baseConfig['univentionXColorDepth']
elif baseConfig['X/Screen/ColorDepth']:
	print "\tDefaultColorDepth %s" % baseConfig['X/Screen/ColorDepth']
@!@
	SubSection "Display"
		Depth     16
		Modes     "@%@univentionXResolution@%@"
	EndSubSection
	SubSection "Display"
		Depth     24
		Modes     "@%@univentionXResolution@%@"
	EndSubSection
EndSection

Section "DRI"
	Mode 0666
EndSection
